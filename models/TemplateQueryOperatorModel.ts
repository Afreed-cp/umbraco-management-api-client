/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TemplateQueryPropertyTypeModel } from './TemplateQueryPropertyTypeModel';
import {
    TemplateQueryPropertyTypeModelFromJSON,
    TemplateQueryPropertyTypeModelFromJSONTyped,
    TemplateQueryPropertyTypeModelToJSON,
    TemplateQueryPropertyTypeModelToJSONTyped,
} from './TemplateQueryPropertyTypeModel';
import type { OperatorModel } from './OperatorModel';
import {
    OperatorModelFromJSON,
    OperatorModelFromJSONTyped,
    OperatorModelToJSON,
    OperatorModelToJSONTyped,
} from './OperatorModel';

/**
 * 
 * @export
 * @interface TemplateQueryOperatorModel
 */
export interface TemplateQueryOperatorModel {
    /**
     * 
     * @type {OperatorModel}
     * @memberof TemplateQueryOperatorModel
     */
    operator: OperatorModel;
    /**
     * 
     * @type {Array<TemplateQueryPropertyTypeModel>}
     * @memberof TemplateQueryOperatorModel
     */
    applicableTypes: Array<TemplateQueryPropertyTypeModel>;
}



/**
 * Check if a given object implements the TemplateQueryOperatorModel interface.
 */
export function instanceOfTemplateQueryOperatorModel(value: object): value is TemplateQueryOperatorModel {
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('applicableTypes' in value) || value['applicableTypes'] === undefined) return false;
    return true;
}

export function TemplateQueryOperatorModelFromJSON(json: any): TemplateQueryOperatorModel {
    return TemplateQueryOperatorModelFromJSONTyped(json, false);
}

export function TemplateQueryOperatorModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateQueryOperatorModel {
    if (json == null) {
        return json;
    }
    return {
        
        'operator': OperatorModelFromJSON(json['operator']),
        'applicableTypes': ((json['applicableTypes'] as Array<any>).map(TemplateQueryPropertyTypeModelFromJSON)),
    };
}

export function TemplateQueryOperatorModelToJSON(json: any): TemplateQueryOperatorModel {
    return TemplateQueryOperatorModelToJSONTyped(json, false);
}

export function TemplateQueryOperatorModelToJSONTyped(value?: TemplateQueryOperatorModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'operator': OperatorModelToJSON(value['operator']),
        'applicableTypes': ((value['applicableTypes'] as Array<any>).map(TemplateQueryPropertyTypeModelToJSON)),
    };
}

