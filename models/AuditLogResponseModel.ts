/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuditTypeModel } from './AuditTypeModel';
import {
    AuditTypeModelFromJSON,
    AuditTypeModelFromJSONTyped,
    AuditTypeModelToJSON,
    AuditTypeModelToJSONTyped,
} from './AuditTypeModel';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface AuditLogResponseModel
 */
export interface AuditLogResponseModel {
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof AuditLogResponseModel
     */
    user: ReferenceByIdModel;
    /**
     * 
     * @type {Date}
     * @memberof AuditLogResponseModel
     */
    timestamp: Date;
    /**
     * 
     * @type {AuditTypeModel}
     * @memberof AuditLogResponseModel
     */
    logType: AuditTypeModel;
    /**
     * 
     * @type {string}
     * @memberof AuditLogResponseModel
     */
    comment?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditLogResponseModel
     */
    parameters?: string | null;
}



/**
 * Check if a given object implements the AuditLogResponseModel interface.
 */
export function instanceOfAuditLogResponseModel(value: object): value is AuditLogResponseModel {
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('logType' in value) || value['logType'] === undefined) return false;
    return true;
}

export function AuditLogResponseModelFromJSON(json: any): AuditLogResponseModel {
    return AuditLogResponseModelFromJSONTyped(json, false);
}

export function AuditLogResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'user': ReferenceByIdModelFromJSON(json['user']),
        'timestamp': (new Date(json['timestamp'])),
        'logType': AuditTypeModelFromJSON(json['logType']),
        'comment': json['comment'] == null ? undefined : json['comment'],
        'parameters': json['parameters'] == null ? undefined : json['parameters'],
    };
}

export function AuditLogResponseModelToJSON(json: any): AuditLogResponseModel {
    return AuditLogResponseModelToJSONTyped(json, false);
}

export function AuditLogResponseModelToJSONTyped(value?: AuditLogResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': ReferenceByIdModelToJSON(value['user']),
        'timestamp': ((value['timestamp']).toISOString()),
        'logType': AuditTypeModelToJSON(value['logType']),
        'comment': value['comment'],
        'parameters': value['parameters'],
    };
}

