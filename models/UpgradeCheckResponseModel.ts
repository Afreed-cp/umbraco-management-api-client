/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpgradeCheckResponseModel
 */
export interface UpgradeCheckResponseModel {
    /**
     * 
     * @type {string}
     * @memberof UpgradeCheckResponseModel
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof UpgradeCheckResponseModel
     */
    comment: string;
    /**
     * 
     * @type {string}
     * @memberof UpgradeCheckResponseModel
     */
    url: string;
}

/**
 * Check if a given object implements the UpgradeCheckResponseModel interface.
 */
export function instanceOfUpgradeCheckResponseModel(value: object): value is UpgradeCheckResponseModel {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('comment' in value) || value['comment'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function UpgradeCheckResponseModelFromJSON(json: any): UpgradeCheckResponseModel {
    return UpgradeCheckResponseModelFromJSONTyped(json, false);
}

export function UpgradeCheckResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpgradeCheckResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'comment': json['comment'],
        'url': json['url'],
    };
}

export function UpgradeCheckResponseModelToJSON(json: any): UpgradeCheckResponseModel {
    return UpgradeCheckResponseModelToJSONTyped(json, false);
}

export function UpgradeCheckResponseModelToJSONTyped(value?: UpgradeCheckResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'comment': value['comment'],
        'url': value['url'],
    };
}

