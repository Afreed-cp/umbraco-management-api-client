/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MemberTypeCompositionRequestModel
 */
export interface MemberTypeCompositionRequestModel {
    /**
     * 
     * @type {string}
     * @memberof MemberTypeCompositionRequestModel
     */
    id?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberTypeCompositionRequestModel
     */
    currentPropertyAliases: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberTypeCompositionRequestModel
     */
    currentCompositeIds: Array<string>;
}

/**
 * Check if a given object implements the MemberTypeCompositionRequestModel interface.
 */
export function instanceOfMemberTypeCompositionRequestModel(value: object): value is MemberTypeCompositionRequestModel {
    if (!('currentPropertyAliases' in value) || value['currentPropertyAliases'] === undefined) return false;
    if (!('currentCompositeIds' in value) || value['currentCompositeIds'] === undefined) return false;
    return true;
}

export function MemberTypeCompositionRequestModelFromJSON(json: any): MemberTypeCompositionRequestModel {
    return MemberTypeCompositionRequestModelFromJSONTyped(json, false);
}

export function MemberTypeCompositionRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberTypeCompositionRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'currentPropertyAliases': json['currentPropertyAliases'],
        'currentCompositeIds': json['currentCompositeIds'],
    };
}

export function MemberTypeCompositionRequestModelToJSON(json: any): MemberTypeCompositionRequestModel {
    return MemberTypeCompositionRequestModelToJSONTyped(json, false);
}

export function MemberTypeCompositionRequestModelToJSONTyped(value?: MemberTypeCompositionRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'currentPropertyAliases': value['currentPropertyAliases'],
        'currentCompositeIds': value['currentCompositeIds'],
    };
}

