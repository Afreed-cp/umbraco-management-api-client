/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TemplateQueryPropertyTypeModel } from './TemplateQueryPropertyTypeModel';
import {
    TemplateQueryPropertyTypeModelFromJSON,
    TemplateQueryPropertyTypeModelFromJSONTyped,
    TemplateQueryPropertyTypeModelToJSON,
    TemplateQueryPropertyTypeModelToJSONTyped,
} from './TemplateQueryPropertyTypeModel';

/**
 * 
 * @export
 * @interface TemplateQueryPropertyPresentationModel
 */
export interface TemplateQueryPropertyPresentationModel {
    /**
     * 
     * @type {string}
     * @memberof TemplateQueryPropertyPresentationModel
     */
    alias: string;
    /**
     * 
     * @type {TemplateQueryPropertyTypeModel}
     * @memberof TemplateQueryPropertyPresentationModel
     */
    type: TemplateQueryPropertyTypeModel;
}



/**
 * Check if a given object implements the TemplateQueryPropertyPresentationModel interface.
 */
export function instanceOfTemplateQueryPropertyPresentationModel(value: object): value is TemplateQueryPropertyPresentationModel {
    if (!('alias' in value) || value['alias'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function TemplateQueryPropertyPresentationModelFromJSON(json: any): TemplateQueryPropertyPresentationModel {
    return TemplateQueryPropertyPresentationModelFromJSONTyped(json, false);
}

export function TemplateQueryPropertyPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateQueryPropertyPresentationModel {
    if (json == null) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'type': TemplateQueryPropertyTypeModelFromJSON(json['type']),
    };
}

export function TemplateQueryPropertyPresentationModelToJSON(json: any): TemplateQueryPropertyPresentationModel {
    return TemplateQueryPropertyPresentationModelToJSONTyped(json, false);
}

export function TemplateQueryPropertyPresentationModelToJSONTyped(value?: TemplateQueryPropertyPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alias': value['alias'],
        'type': TemplateQueryPropertyTypeModelToJSON(value['type']),
    };
}

