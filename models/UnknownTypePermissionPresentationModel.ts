/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UnknownTypePermissionPresentationModel
 */
export interface UnknownTypePermissionPresentationModel {
    /**
     * 
     * @type {string}
     * @memberof UnknownTypePermissionPresentationModel
     */
    $type: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof UnknownTypePermissionPresentationModel
     */
    verbs: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof UnknownTypePermissionPresentationModel
     */
    context: string;
}

/**
 * Check if a given object implements the UnknownTypePermissionPresentationModel interface.
 */
export function instanceOfUnknownTypePermissionPresentationModel(value: object): value is UnknownTypePermissionPresentationModel {
    if (!('$type' in value) || value['$type'] === undefined) return false;
    if (!('verbs' in value) || value['verbs'] === undefined) return false;
    if (!('context' in value) || value['context'] === undefined) return false;
    return true;
}

export function UnknownTypePermissionPresentationModelFromJSON(json: any): UnknownTypePermissionPresentationModel {
    return UnknownTypePermissionPresentationModelFromJSONTyped(json, false);
}

export function UnknownTypePermissionPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UnknownTypePermissionPresentationModel {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'UnknownTypePermissionPresentationModel') {
            return UnknownTypePermissionPresentationModelFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        '$type': json['$type'],
        'verbs': new Set(json['verbs']),
        'context': json['context'],
    };
}

export function UnknownTypePermissionPresentationModelToJSON(json: any): UnknownTypePermissionPresentationModel {
    return UnknownTypePermissionPresentationModelToJSONTyped(json, false);
}

export function UnknownTypePermissionPresentationModelToJSONTyped(value?: UnknownTypePermissionPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['$type']) {
            case 'UnknownTypePermissionPresentationModel':
                return UnknownTypePermissionPresentationModelToJSONTyped(value as UnknownTypePermissionPresentationModel, ignoreDiscriminator);
            default:
                return value;
        }
    }

    return {
        
        '$type': value['$type'],
        'verbs': Array.from(value['verbs'] as Set<any>),
        'context': value['context'],
    };
}

