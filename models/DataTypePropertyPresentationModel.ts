/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataTypePropertyPresentationModel
 */
export interface DataTypePropertyPresentationModel {
    /**
     * 
     * @type {string}
     * @memberof DataTypePropertyPresentationModel
     */
    alias: string;
    /**
     * 
     * @type {any}
     * @memberof DataTypePropertyPresentationModel
     */
    value?: any | null;
}

/**
 * Check if a given object implements the DataTypePropertyPresentationModel interface.
 */
export function instanceOfDataTypePropertyPresentationModel(value: object): value is DataTypePropertyPresentationModel {
    if (!('alias' in value) || value['alias'] === undefined) return false;
    return true;
}

export function DataTypePropertyPresentationModelFromJSON(json: any): DataTypePropertyPresentationModel {
    return DataTypePropertyPresentationModelFromJSONTyped(json, false);
}

export function DataTypePropertyPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataTypePropertyPresentationModel {
    if (json == null) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function DataTypePropertyPresentationModelToJSON(json: any): DataTypePropertyPresentationModel {
    return DataTypePropertyPresentationModelToJSONTyped(json, false);
}

export function DataTypePropertyPresentationModelToJSONTyped(value?: DataTypePropertyPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alias': value['alias'],
        'value': value['value'],
    };
}

