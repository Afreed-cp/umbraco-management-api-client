/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserKindModel } from './UserKindModel';
import {
    UserKindModelFromJSON,
    UserKindModelFromJSONTyped,
    UserKindModelToJSON,
    UserKindModelToJSONTyped,
} from './UserKindModel';
import type { PostUserGroupByIdUsersRequestInner } from './PostUserGroupByIdUsersRequestInner';
import {
    PostUserGroupByIdUsersRequestInnerFromJSON,
    PostUserGroupByIdUsersRequestInnerFromJSONTyped,
    PostUserGroupByIdUsersRequestInnerToJSON,
    PostUserGroupByIdUsersRequestInnerToJSONTyped,
} from './PostUserGroupByIdUsersRequestInner';
import type { UserStateModel } from './UserStateModel';
import {
    UserStateModelFromJSON,
    UserStateModelFromJSONTyped,
    UserStateModelToJSON,
    UserStateModelToJSONTyped,
} from './UserStateModel';

/**
 * 
 * @export
 * @interface UserResponseModel
 */
export interface UserResponseModel {
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    name: string;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof UserResponseModel
     */
    userGroupIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    languageIsoCode?: string | null;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof UserResponseModel
     */
    documentStartNodeIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseModel
     */
    hasDocumentRootAccess: boolean;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof UserResponseModel
     */
    mediaStartNodeIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseModel
     */
    hasMediaRootAccess: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserResponseModel
     */
    avatarUrls: Array<string>;
    /**
     * 
     * @type {UserStateModel}
     * @memberof UserResponseModel
     */
    state: UserStateModel;
    /**
     * 
     * @type {number}
     * @memberof UserResponseModel
     */
    failedLoginAttempts: number;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseModel
     */
    createDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseModel
     */
    updateDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseModel
     */
    lastLoginDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseModel
     */
    lastLockoutDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseModel
     */
    lastPasswordChangeDate?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseModel
     */
    isAdmin: boolean;
    /**
     * 
     * @type {UserKindModel}
     * @memberof UserResponseModel
     */
    kind: UserKindModel;
}



/**
 * Check if a given object implements the UserResponseModel interface.
 */
export function instanceOfUserResponseModel(value: object): value is UserResponseModel {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('userName' in value) || value['userName'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('userGroupIds' in value) || value['userGroupIds'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('documentStartNodeIds' in value) || value['documentStartNodeIds'] === undefined) return false;
    if (!('hasDocumentRootAccess' in value) || value['hasDocumentRootAccess'] === undefined) return false;
    if (!('mediaStartNodeIds' in value) || value['mediaStartNodeIds'] === undefined) return false;
    if (!('hasMediaRootAccess' in value) || value['hasMediaRootAccess'] === undefined) return false;
    if (!('avatarUrls' in value) || value['avatarUrls'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('failedLoginAttempts' in value) || value['failedLoginAttempts'] === undefined) return false;
    if (!('createDate' in value) || value['createDate'] === undefined) return false;
    if (!('updateDate' in value) || value['updateDate'] === undefined) return false;
    if (!('isAdmin' in value) || value['isAdmin'] === undefined) return false;
    if (!('kind' in value) || value['kind'] === undefined) return false;
    return true;
}

export function UserResponseModelFromJSON(json: any): UserResponseModel {
    return UserResponseModelFromJSONTyped(json, false);
}

export function UserResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'userName': json['userName'],
        'name': json['name'],
        'userGroupIds': (new Set((json['userGroupIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'id': json['id'],
        'languageIsoCode': json['languageIsoCode'] == null ? undefined : json['languageIsoCode'],
        'documentStartNodeIds': (new Set((json['documentStartNodeIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'hasDocumentRootAccess': json['hasDocumentRootAccess'],
        'mediaStartNodeIds': (new Set((json['mediaStartNodeIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'hasMediaRootAccess': json['hasMediaRootAccess'],
        'avatarUrls': json['avatarUrls'],
        'state': UserStateModelFromJSON(json['state']),
        'failedLoginAttempts': json['failedLoginAttempts'],
        'createDate': (new Date(json['createDate'])),
        'updateDate': (new Date(json['updateDate'])),
        'lastLoginDate': json['lastLoginDate'] == null ? undefined : (new Date(json['lastLoginDate'])),
        'lastLockoutDate': json['lastLockoutDate'] == null ? undefined : (new Date(json['lastLockoutDate'])),
        'lastPasswordChangeDate': json['lastPasswordChangeDate'] == null ? undefined : (new Date(json['lastPasswordChangeDate'])),
        'isAdmin': json['isAdmin'],
        'kind': UserKindModelFromJSON(json['kind']),
    };
}

export function UserResponseModelToJSON(json: any): UserResponseModel {
    return UserResponseModelToJSONTyped(json, false);
}

export function UserResponseModelToJSONTyped(value?: UserResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'userName': value['userName'],
        'name': value['name'],
        'userGroupIds': (Array.from(value['userGroupIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'id': value['id'],
        'languageIsoCode': value['languageIsoCode'],
        'documentStartNodeIds': (Array.from(value['documentStartNodeIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'hasDocumentRootAccess': value['hasDocumentRootAccess'],
        'mediaStartNodeIds': (Array.from(value['mediaStartNodeIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'hasMediaRootAccess': value['hasMediaRootAccess'],
        'avatarUrls': value['avatarUrls'],
        'state': UserStateModelToJSON(value['state']),
        'failedLoginAttempts': value['failedLoginAttempts'],
        'createDate': ((value['createDate']).toISOString()),
        'updateDate': ((value['updateDate']).toISOString()),
        'lastLoginDate': value['lastLoginDate'] == null ? undefined : ((value['lastLoginDate'] as any).toISOString()),
        'lastLockoutDate': value['lastLockoutDate'] == null ? undefined : ((value['lastLockoutDate'] as any).toISOString()),
        'lastPasswordChangeDate': value['lastPasswordChangeDate'] == null ? undefined : ((value['lastPasswordChangeDate'] as any).toISOString()),
        'isAdmin': value['isAdmin'],
        'kind': UserKindModelToJSON(value['kind']),
    };
}

