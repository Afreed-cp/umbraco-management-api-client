/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CompositionTypeModel } from './CompositionTypeModel';
import {
    CompositionTypeModelFromJSON,
    CompositionTypeModelFromJSONTyped,
    CompositionTypeModelToJSON,
    CompositionTypeModelToJSONTyped,
} from './CompositionTypeModel';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface MediaTypeCompositionModel
 */
export interface MediaTypeCompositionModel {
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof MediaTypeCompositionModel
     */
    mediaType: ReferenceByIdModel;
    /**
     * 
     * @type {CompositionTypeModel}
     * @memberof MediaTypeCompositionModel
     */
    compositionType: CompositionTypeModel;
}



/**
 * Check if a given object implements the MediaTypeCompositionModel interface.
 */
export function instanceOfMediaTypeCompositionModel(value: object): value is MediaTypeCompositionModel {
    if (!('mediaType' in value) || value['mediaType'] === undefined) return false;
    if (!('compositionType' in value) || value['compositionType'] === undefined) return false;
    return true;
}

export function MediaTypeCompositionModelFromJSON(json: any): MediaTypeCompositionModel {
    return MediaTypeCompositionModelFromJSONTyped(json, false);
}

export function MediaTypeCompositionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaTypeCompositionModel {
    if (json == null) {
        return json;
    }
    return {
        
        'mediaType': ReferenceByIdModelFromJSON(json['mediaType']),
        'compositionType': CompositionTypeModelFromJSON(json['compositionType']),
    };
}

export function MediaTypeCompositionModelToJSON(json: any): MediaTypeCompositionModel {
    return MediaTypeCompositionModelToJSONTyped(json, false);
}

export function MediaTypeCompositionModelToJSONTyped(value?: MediaTypeCompositionModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mediaType': ReferenceByIdModelToJSON(value['mediaType']),
        'compositionType': CompositionTypeModelToJSON(value['compositionType']),
    };
}

