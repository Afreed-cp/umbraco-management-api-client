/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaCollectionResponseModelVariantsInner } from './MediaCollectionResponseModelVariantsInner';
import {
    MediaCollectionResponseModelVariantsInnerFromJSON,
    MediaCollectionResponseModelVariantsInnerFromJSONTyped,
    MediaCollectionResponseModelVariantsInnerToJSON,
    MediaCollectionResponseModelVariantsInnerToJSONTyped,
} from './MediaCollectionResponseModelVariantsInner';
import type { MediaCollectionResponseModelValuesInner } from './MediaCollectionResponseModelValuesInner';
import {
    MediaCollectionResponseModelValuesInnerFromJSON,
    MediaCollectionResponseModelValuesInnerFromJSONTyped,
    MediaCollectionResponseModelValuesInnerToJSON,
    MediaCollectionResponseModelValuesInnerToJSONTyped,
} from './MediaCollectionResponseModelValuesInner';
import type { MediaTypeCollectionReferenceResponseModel } from './MediaTypeCollectionReferenceResponseModel';
import {
    MediaTypeCollectionReferenceResponseModelFromJSON,
    MediaTypeCollectionReferenceResponseModelFromJSONTyped,
    MediaTypeCollectionReferenceResponseModelToJSON,
    MediaTypeCollectionReferenceResponseModelToJSONTyped,
} from './MediaTypeCollectionReferenceResponseModel';

/**
 * 
 * @export
 * @interface MediaCollectionResponseModel
 */
export interface MediaCollectionResponseModel {
    /**
     * 
     * @type {Array<MediaCollectionResponseModelValuesInner>}
     * @memberof MediaCollectionResponseModel
     */
    values: Array<MediaCollectionResponseModelValuesInner>;
    /**
     * 
     * @type {Array<MediaCollectionResponseModelVariantsInner>}
     * @memberof MediaCollectionResponseModel
     */
    variants: Array<MediaCollectionResponseModelVariantsInner>;
    /**
     * 
     * @type {string}
     * @memberof MediaCollectionResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MediaCollectionResponseModel
     */
    creator?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MediaCollectionResponseModel
     */
    sortOrder: number;
    /**
     * 
     * @type {MediaTypeCollectionReferenceResponseModel}
     * @memberof MediaCollectionResponseModel
     */
    mediaType: MediaTypeCollectionReferenceResponseModel;
}

/**
 * Check if a given object implements the MediaCollectionResponseModel interface.
 */
export function instanceOfMediaCollectionResponseModel(value: object): value is MediaCollectionResponseModel {
    if (!('values' in value) || value['values'] === undefined) return false;
    if (!('variants' in value) || value['variants'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    if (!('mediaType' in value) || value['mediaType'] === undefined) return false;
    return true;
}

export function MediaCollectionResponseModelFromJSON(json: any): MediaCollectionResponseModel {
    return MediaCollectionResponseModelFromJSONTyped(json, false);
}

export function MediaCollectionResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaCollectionResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'values': ((json['values'] as Array<any>).map(MediaCollectionResponseModelValuesInnerFromJSON)),
        'variants': ((json['variants'] as Array<any>).map(MediaCollectionResponseModelVariantsInnerFromJSON)),
        'id': json['id'],
        'creator': json['creator'] == null ? undefined : json['creator'],
        'sortOrder': json['sortOrder'],
        'mediaType': MediaTypeCollectionReferenceResponseModelFromJSON(json['mediaType']),
    };
}

export function MediaCollectionResponseModelToJSON(json: any): MediaCollectionResponseModel {
    return MediaCollectionResponseModelToJSONTyped(json, false);
}

export function MediaCollectionResponseModelToJSONTyped(value?: MediaCollectionResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'values': ((value['values'] as Array<any>).map(MediaCollectionResponseModelValuesInnerToJSON)),
        'variants': ((value['variants'] as Array<any>).map(MediaCollectionResponseModelVariantsInnerToJSON)),
        'id': value['id'],
        'creator': value['creator'],
        'sortOrder': value['sortOrder'],
        'mediaType': MediaTypeCollectionReferenceResponseModelToJSON(value['mediaType']),
    };
}

