/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataTypeChangeModeModel } from './DataTypeChangeModeModel';
import {
    DataTypeChangeModeModelFromJSON,
    DataTypeChangeModeModelFromJSONTyped,
    DataTypeChangeModeModelToJSON,
    DataTypeChangeModeModelToJSONTyped,
} from './DataTypeChangeModeModel';

/**
 * 
 * @export
 * @interface DocumentTypeConfigurationResponseModel
 */
export interface DocumentTypeConfigurationResponseModel {
    /**
     * 
     * @type {DataTypeChangeModeModel}
     * @memberof DocumentTypeConfigurationResponseModel
     */
    dataTypesCanBeChanged: DataTypeChangeModeModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocumentTypeConfigurationResponseModel
     */
    disableTemplates: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocumentTypeConfigurationResponseModel
     */
    useSegments: boolean;
    /**
     * 
     * @type {Set<string>}
     * @memberof DocumentTypeConfigurationResponseModel
     */
    reservedFieldNames: Set<string>;
}



/**
 * Check if a given object implements the DocumentTypeConfigurationResponseModel interface.
 */
export function instanceOfDocumentTypeConfigurationResponseModel(value: object): value is DocumentTypeConfigurationResponseModel {
    if (!('dataTypesCanBeChanged' in value) || value['dataTypesCanBeChanged'] === undefined) return false;
    if (!('disableTemplates' in value) || value['disableTemplates'] === undefined) return false;
    if (!('useSegments' in value) || value['useSegments'] === undefined) return false;
    if (!('reservedFieldNames' in value) || value['reservedFieldNames'] === undefined) return false;
    return true;
}

export function DocumentTypeConfigurationResponseModelFromJSON(json: any): DocumentTypeConfigurationResponseModel {
    return DocumentTypeConfigurationResponseModelFromJSONTyped(json, false);
}

export function DocumentTypeConfigurationResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentTypeConfigurationResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'dataTypesCanBeChanged': DataTypeChangeModeModelFromJSON(json['dataTypesCanBeChanged']),
        'disableTemplates': json['disableTemplates'],
        'useSegments': json['useSegments'],
        'reservedFieldNames': new Set(json['reservedFieldNames']),
    };
}

export function DocumentTypeConfigurationResponseModelToJSON(json: any): DocumentTypeConfigurationResponseModel {
    return DocumentTypeConfigurationResponseModelToJSONTyped(json, false);
}

export function DocumentTypeConfigurationResponseModelToJSONTyped(value?: DocumentTypeConfigurationResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dataTypesCanBeChanged': DataTypeChangeModeModelToJSON(value['dataTypesCanBeChanged']),
        'disableTemplates': value['disableTemplates'],
        'useSegments': value['useSegments'],
        'reservedFieldNames': Array.from(value['reservedFieldNames'] as Set<any>),
    };
}

