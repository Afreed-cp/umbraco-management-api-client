/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { MediaTypeCompositionModel } from './MediaTypeCompositionModel';
import {
    instanceOfMediaTypeCompositionModel,
    MediaTypeCompositionModelFromJSON,
    MediaTypeCompositionModelFromJSONTyped,
    MediaTypeCompositionModelToJSON,
} from './MediaTypeCompositionModel';

/**
 * @type CreateMediaTypeRequestModelCompositionsInner
 * 
 * @export
 */
export type CreateMediaTypeRequestModelCompositionsInner = MediaTypeCompositionModel;

export function CreateMediaTypeRequestModelCompositionsInnerFromJSON(json: any): CreateMediaTypeRequestModelCompositionsInner {
    return CreateMediaTypeRequestModelCompositionsInnerFromJSONTyped(json, false);
}

export function CreateMediaTypeRequestModelCompositionsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateMediaTypeRequestModelCompositionsInner {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfMediaTypeCompositionModel(json)) {
        return MediaTypeCompositionModelFromJSONTyped(json, true);
    }

    return {} as any;
}

export function CreateMediaTypeRequestModelCompositionsInnerToJSON(json: any): any {
    return CreateMediaTypeRequestModelCompositionsInnerToJSONTyped(json, false);
}

export function CreateMediaTypeRequestModelCompositionsInnerToJSONTyped(value?: CreateMediaTypeRequestModelCompositionsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfMediaTypeCompositionModel(value)) {
        return MediaTypeCompositionModelToJSON(value as MediaTypeCompositionModel);
    }

    return {};
}

