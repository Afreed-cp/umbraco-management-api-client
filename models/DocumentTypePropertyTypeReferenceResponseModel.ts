/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TrackedReferenceDocumentTypeModel } from './TrackedReferenceDocumentTypeModel';
import {
    TrackedReferenceDocumentTypeModelFromJSON,
    TrackedReferenceDocumentTypeModelFromJSONTyped,
    TrackedReferenceDocumentTypeModelToJSON,
    TrackedReferenceDocumentTypeModelToJSONTyped,
} from './TrackedReferenceDocumentTypeModel';

/**
 * 
 * @export
 * @interface DocumentTypePropertyTypeReferenceResponseModel
 */
export interface DocumentTypePropertyTypeReferenceResponseModel {
    /**
     * 
     * @type {string}
     * @memberof DocumentTypePropertyTypeReferenceResponseModel
     */
    $type: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentTypePropertyTypeReferenceResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentTypePropertyTypeReferenceResponseModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentTypePropertyTypeReferenceResponseModel
     */
    alias?: string | null;
    /**
     * 
     * @type {TrackedReferenceDocumentTypeModel}
     * @memberof DocumentTypePropertyTypeReferenceResponseModel
     */
    documentType: TrackedReferenceDocumentTypeModel;
}

/**
 * Check if a given object implements the DocumentTypePropertyTypeReferenceResponseModel interface.
 */
export function instanceOfDocumentTypePropertyTypeReferenceResponseModel(value: object): value is DocumentTypePropertyTypeReferenceResponseModel {
    if (!('$type' in value) || value['$type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('documentType' in value) || value['documentType'] === undefined) return false;
    return true;
}

export function DocumentTypePropertyTypeReferenceResponseModelFromJSON(json: any): DocumentTypePropertyTypeReferenceResponseModel {
    return DocumentTypePropertyTypeReferenceResponseModelFromJSONTyped(json, false);
}

export function DocumentTypePropertyTypeReferenceResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentTypePropertyTypeReferenceResponseModel {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'DocumentTypePropertyTypeReferenceResponseModel') {
            return DocumentTypePropertyTypeReferenceResponseModelFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        '$type': json['$type'],
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'alias': json['alias'] == null ? undefined : json['alias'],
        'documentType': TrackedReferenceDocumentTypeModelFromJSON(json['documentType']),
    };
}

export function DocumentTypePropertyTypeReferenceResponseModelToJSON(json: any): DocumentTypePropertyTypeReferenceResponseModel {
    return DocumentTypePropertyTypeReferenceResponseModelToJSONTyped(json, false);
}

export function DocumentTypePropertyTypeReferenceResponseModelToJSONTyped(value?: DocumentTypePropertyTypeReferenceResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['$type']) {
            case 'DocumentTypePropertyTypeReferenceResponseModel':
                return DocumentTypePropertyTypeReferenceResponseModelToJSONTyped(value as DocumentTypePropertyTypeReferenceResponseModel, ignoreDiscriminator);
            default:
                return value;
        }
    }

    return {
        
        '$type': value['$type'],
        'id': value['id'],
        'name': value['name'],
        'alias': value['alias'],
        'documentType': TrackedReferenceDocumentTypeModelToJSON(value['documentType']),
    };
}

