/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface DocumentTypeSortModel
 */
export interface DocumentTypeSortModel {
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof DocumentTypeSortModel
     */
    documentType: ReferenceByIdModel;
    /**
     * 
     * @type {number}
     * @memberof DocumentTypeSortModel
     */
    sortOrder: number;
}

/**
 * Check if a given object implements the DocumentTypeSortModel interface.
 */
export function instanceOfDocumentTypeSortModel(value: object): value is DocumentTypeSortModel {
    if (!('documentType' in value) || value['documentType'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    return true;
}

export function DocumentTypeSortModelFromJSON(json: any): DocumentTypeSortModel {
    return DocumentTypeSortModelFromJSONTyped(json, false);
}

export function DocumentTypeSortModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentTypeSortModel {
    if (json == null) {
        return json;
    }
    return {
        
        'documentType': ReferenceByIdModelFromJSON(json['documentType']),
        'sortOrder': json['sortOrder'],
    };
}

export function DocumentTypeSortModelToJSON(json: any): DocumentTypeSortModel {
    return DocumentTypeSortModelToJSONTyped(json, false);
}

export function DocumentTypeSortModelToJSONTyped(value?: DocumentTypeSortModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'documentType': ReferenceByIdModelToJSON(value['documentType']),
        'sortOrder': value['sortOrder'],
    };
}

