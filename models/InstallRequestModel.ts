/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TelemetryLevelModel } from './TelemetryLevelModel';
import {
    TelemetryLevelModelFromJSON,
    TelemetryLevelModelFromJSONTyped,
    TelemetryLevelModelToJSON,
    TelemetryLevelModelToJSONTyped,
} from './TelemetryLevelModel';
import type { UserInstallRequestModel } from './UserInstallRequestModel';
import {
    UserInstallRequestModelFromJSON,
    UserInstallRequestModelFromJSONTyped,
    UserInstallRequestModelToJSON,
    UserInstallRequestModelToJSONTyped,
} from './UserInstallRequestModel';
import type { DatabaseInstallRequestModel } from './DatabaseInstallRequestModel';
import {
    DatabaseInstallRequestModelFromJSON,
    DatabaseInstallRequestModelFromJSONTyped,
    DatabaseInstallRequestModelToJSON,
    DatabaseInstallRequestModelToJSONTyped,
} from './DatabaseInstallRequestModel';

/**
 * 
 * @export
 * @interface InstallRequestModel
 */
export interface InstallRequestModel {
    /**
     * 
     * @type {UserInstallRequestModel}
     * @memberof InstallRequestModel
     */
    user: UserInstallRequestModel;
    /**
     * 
     * @type {DatabaseInstallRequestModel}
     * @memberof InstallRequestModel
     */
    database: DatabaseInstallRequestModel;
    /**
     * 
     * @type {TelemetryLevelModel}
     * @memberof InstallRequestModel
     */
    telemetryLevel: TelemetryLevelModel;
}



/**
 * Check if a given object implements the InstallRequestModel interface.
 */
export function instanceOfInstallRequestModel(value: object): value is InstallRequestModel {
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('database' in value) || value['database'] === undefined) return false;
    if (!('telemetryLevel' in value) || value['telemetryLevel'] === undefined) return false;
    return true;
}

export function InstallRequestModelFromJSON(json: any): InstallRequestModel {
    return InstallRequestModelFromJSONTyped(json, false);
}

export function InstallRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstallRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'user': UserInstallRequestModelFromJSON(json['user']),
        'database': DatabaseInstallRequestModelFromJSON(json['database']),
        'telemetryLevel': TelemetryLevelModelFromJSON(json['telemetryLevel']),
    };
}

export function InstallRequestModelToJSON(json: any): InstallRequestModel {
    return InstallRequestModelToJSONTyped(json, false);
}

export function InstallRequestModelToJSONTyped(value?: InstallRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': UserInstallRequestModelToJSON(value['user']),
        'database': DatabaseInstallRequestModelToJSON(value['database']),
        'telemetryLevel': TelemetryLevelModelToJSON(value['telemetryLevel']),
    };
}

