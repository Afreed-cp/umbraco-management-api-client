/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface MediaTypeTreeItemResponseModel
 */
export interface MediaTypeTreeItemResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeTreeItemResponseModel
     */
    hasChildren: boolean;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeTreeItemResponseModel
     */
    id: string;
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof MediaTypeTreeItemResponseModel
     */
    parent?: ReferenceByIdModel | null;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeTreeItemResponseModel
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeTreeItemResponseModel
     */
    isFolder: boolean;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeTreeItemResponseModel
     */
    icon: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeTreeItemResponseModel
     */
    isDeletable: boolean;
}

/**
 * Check if a given object implements the MediaTypeTreeItemResponseModel interface.
 */
export function instanceOfMediaTypeTreeItemResponseModel(value: object): value is MediaTypeTreeItemResponseModel {
    if (!('hasChildren' in value) || value['hasChildren'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('isFolder' in value) || value['isFolder'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('isDeletable' in value) || value['isDeletable'] === undefined) return false;
    return true;
}

export function MediaTypeTreeItemResponseModelFromJSON(json: any): MediaTypeTreeItemResponseModel {
    return MediaTypeTreeItemResponseModelFromJSONTyped(json, false);
}

export function MediaTypeTreeItemResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaTypeTreeItemResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'hasChildren': json['hasChildren'],
        'id': json['id'],
        'parent': json['parent'] == null ? undefined : ReferenceByIdModelFromJSON(json['parent']),
        'name': json['name'],
        'isFolder': json['isFolder'],
        'icon': json['icon'],
        'isDeletable': json['isDeletable'],
    };
}

export function MediaTypeTreeItemResponseModelToJSON(json: any): MediaTypeTreeItemResponseModel {
    return MediaTypeTreeItemResponseModelToJSONTyped(json, false);
}

export function MediaTypeTreeItemResponseModelToJSONTyped(value?: MediaTypeTreeItemResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'hasChildren': value['hasChildren'],
        'id': value['id'],
        'parent': ReferenceByIdModelToJSON(value['parent']),
        'name': value['name'],
        'isFolder': value['isFolder'],
        'icon': value['icon'],
        'isDeletable': value['isDeletable'],
    };
}

