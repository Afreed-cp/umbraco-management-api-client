/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WebhookLogResponseModel
 */
export interface WebhookLogResponseModel {
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    webhookKey: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    statusCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookLogResponseModel
     */
    isSuccessStatusCode: boolean;
    /**
     * 
     * @type {Date}
     * @memberof WebhookLogResponseModel
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    eventAlias: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof WebhookLogResponseModel
     */
    retryCount: number;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    requestHeaders: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    requestBody: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    responseHeaders: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookLogResponseModel
     */
    responseBody: string;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookLogResponseModel
     */
    exceptionOccured: boolean;
}

/**
 * Check if a given object implements the WebhookLogResponseModel interface.
 */
export function instanceOfWebhookLogResponseModel(value: object): value is WebhookLogResponseModel {
    if (!('key' in value) || value['key'] === undefined) return false;
    if (!('webhookKey' in value) || value['webhookKey'] === undefined) return false;
    if (!('statusCode' in value) || value['statusCode'] === undefined) return false;
    if (!('isSuccessStatusCode' in value) || value['isSuccessStatusCode'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('eventAlias' in value) || value['eventAlias'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('retryCount' in value) || value['retryCount'] === undefined) return false;
    if (!('requestHeaders' in value) || value['requestHeaders'] === undefined) return false;
    if (!('requestBody' in value) || value['requestBody'] === undefined) return false;
    if (!('responseHeaders' in value) || value['responseHeaders'] === undefined) return false;
    if (!('responseBody' in value) || value['responseBody'] === undefined) return false;
    if (!('exceptionOccured' in value) || value['exceptionOccured'] === undefined) return false;
    return true;
}

export function WebhookLogResponseModelFromJSON(json: any): WebhookLogResponseModel {
    return WebhookLogResponseModelFromJSONTyped(json, false);
}

export function WebhookLogResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookLogResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['key'],
        'webhookKey': json['webhookKey'],
        'statusCode': json['statusCode'],
        'isSuccessStatusCode': json['isSuccessStatusCode'],
        'date': (new Date(json['date'])),
        'eventAlias': json['eventAlias'],
        'url': json['url'],
        'retryCount': json['retryCount'],
        'requestHeaders': json['requestHeaders'],
        'requestBody': json['requestBody'],
        'responseHeaders': json['responseHeaders'],
        'responseBody': json['responseBody'],
        'exceptionOccured': json['exceptionOccured'],
    };
}

export function WebhookLogResponseModelToJSON(json: any): WebhookLogResponseModel {
    return WebhookLogResponseModelToJSONTyped(json, false);
}

export function WebhookLogResponseModelToJSONTyped(value?: WebhookLogResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key': value['key'],
        'webhookKey': value['webhookKey'],
        'statusCode': value['statusCode'],
        'isSuccessStatusCode': value['isSuccessStatusCode'],
        'date': ((value['date']).toISOString()),
        'eventAlias': value['eventAlias'],
        'url': value['url'],
        'retryCount': value['retryCount'],
        'requestHeaders': value['requestHeaders'],
        'requestBody': value['requestBody'],
        'responseHeaders': value['responseHeaders'],
        'responseBody': value['responseBody'],
        'exceptionOccured': value['exceptionOccured'],
    };
}

