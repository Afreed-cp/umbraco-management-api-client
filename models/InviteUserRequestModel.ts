/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostUserGroupByIdUsersRequestInner } from './PostUserGroupByIdUsersRequestInner';
import {
    PostUserGroupByIdUsersRequestInnerFromJSON,
    PostUserGroupByIdUsersRequestInnerFromJSONTyped,
    PostUserGroupByIdUsersRequestInnerToJSON,
    PostUserGroupByIdUsersRequestInnerToJSONTyped,
} from './PostUserGroupByIdUsersRequestInner';

/**
 * 
 * @export
 * @interface InviteUserRequestModel
 */
export interface InviteUserRequestModel {
    /**
     * 
     * @type {string}
     * @memberof InviteUserRequestModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof InviteUserRequestModel
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof InviteUserRequestModel
     */
    name: string;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof InviteUserRequestModel
     */
    userGroupIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {string}
     * @memberof InviteUserRequestModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InviteUserRequestModel
     */
    message?: string | null;
}

/**
 * Check if a given object implements the InviteUserRequestModel interface.
 */
export function instanceOfInviteUserRequestModel(value: object): value is InviteUserRequestModel {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('userName' in value) || value['userName'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('userGroupIds' in value) || value['userGroupIds'] === undefined) return false;
    return true;
}

export function InviteUserRequestModelFromJSON(json: any): InviteUserRequestModel {
    return InviteUserRequestModelFromJSONTyped(json, false);
}

export function InviteUserRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): InviteUserRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'userName': json['userName'],
        'name': json['name'],
        'userGroupIds': (new Set((json['userGroupIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'id': json['id'] == null ? undefined : json['id'],
        'message': json['message'] == null ? undefined : json['message'],
    };
}

export function InviteUserRequestModelToJSON(json: any): InviteUserRequestModel {
    return InviteUserRequestModelToJSONTyped(json, false);
}

export function InviteUserRequestModelToJSONTyped(value?: InviteUserRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'userName': value['userName'],
        'name': value['name'],
        'userGroupIds': (Array.from(value['userGroupIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'id': value['id'],
        'message': value['message'],
    };
}

