/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { MediaVariantRequestModel } from './MediaVariantRequestModel';
import {
    instanceOfMediaVariantRequestModel,
    MediaVariantRequestModelFromJSON,
    MediaVariantRequestModelFromJSONTyped,
    MediaVariantRequestModelToJSON,
} from './MediaVariantRequestModel';

/**
 * @type CreateMediaRequestModelVariantsInner
 * 
 * @export
 */
export type CreateMediaRequestModelVariantsInner = MediaVariantRequestModel;

export function CreateMediaRequestModelVariantsInnerFromJSON(json: any): CreateMediaRequestModelVariantsInner {
    return CreateMediaRequestModelVariantsInnerFromJSONTyped(json, false);
}

export function CreateMediaRequestModelVariantsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateMediaRequestModelVariantsInner {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfMediaVariantRequestModel(json)) {
        return MediaVariantRequestModelFromJSONTyped(json, true);
    }

    return {} as any;
}

export function CreateMediaRequestModelVariantsInnerToJSON(json: any): any {
    return CreateMediaRequestModelVariantsInnerToJSONTyped(json, false);
}

export function CreateMediaRequestModelVariantsInnerToJSONTyped(value?: CreateMediaRequestModelVariantsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfMediaVariantRequestModel(value)) {
        return MediaVariantRequestModelToJSON(value as MediaVariantRequestModel);
    }

    return {};
}

