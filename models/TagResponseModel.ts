/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TagResponseModel
 */
export interface TagResponseModel {
    /**
     * 
     * @type {string}
     * @memberof TagResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TagResponseModel
     */
    text?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TagResponseModel
     */
    group?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TagResponseModel
     */
    nodeCount: number;
}

/**
 * Check if a given object implements the TagResponseModel interface.
 */
export function instanceOfTagResponseModel(value: object): value is TagResponseModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('nodeCount' in value) || value['nodeCount'] === undefined) return false;
    return true;
}

export function TagResponseModelFromJSON(json: any): TagResponseModel {
    return TagResponseModelFromJSONTyped(json, false);
}

export function TagResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TagResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'text': json['text'] == null ? undefined : json['text'],
        'group': json['group'] == null ? undefined : json['group'],
        'nodeCount': json['nodeCount'],
    };
}

export function TagResponseModelToJSON(json: any): TagResponseModel {
    return TagResponseModelToJSONTyped(json, false);
}

export function TagResponseModelToJSONTyped(value?: TagResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'text': value['text'],
        'group': value['group'],
        'nodeCount': value['nodeCount'],
    };
}

