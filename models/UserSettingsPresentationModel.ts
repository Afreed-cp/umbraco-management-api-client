/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSettingsPresentationModelConsentLevelsInner } from './UserSettingsPresentationModelConsentLevelsInner';
import {
    UserSettingsPresentationModelConsentLevelsInnerFromJSON,
    UserSettingsPresentationModelConsentLevelsInnerFromJSONTyped,
    UserSettingsPresentationModelConsentLevelsInnerToJSON,
    UserSettingsPresentationModelConsentLevelsInnerToJSONTyped,
} from './UserSettingsPresentationModelConsentLevelsInner';

/**
 * 
 * @export
 * @interface UserSettingsPresentationModel
 */
export interface UserSettingsPresentationModel {
    /**
     * 
     * @type {number}
     * @memberof UserSettingsPresentationModel
     */
    minCharLength: number;
    /**
     * 
     * @type {number}
     * @memberof UserSettingsPresentationModel
     */
    minNonAlphaNumericLength: number;
    /**
     * 
     * @type {Array<UserSettingsPresentationModelConsentLevelsInner>}
     * @memberof UserSettingsPresentationModel
     */
    consentLevels: Array<UserSettingsPresentationModelConsentLevelsInner>;
}

/**
 * Check if a given object implements the UserSettingsPresentationModel interface.
 */
export function instanceOfUserSettingsPresentationModel(value: object): value is UserSettingsPresentationModel {
    if (!('minCharLength' in value) || value['minCharLength'] === undefined) return false;
    if (!('minNonAlphaNumericLength' in value) || value['minNonAlphaNumericLength'] === undefined) return false;
    if (!('consentLevels' in value) || value['consentLevels'] === undefined) return false;
    return true;
}

export function UserSettingsPresentationModelFromJSON(json: any): UserSettingsPresentationModel {
    return UserSettingsPresentationModelFromJSONTyped(json, false);
}

export function UserSettingsPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSettingsPresentationModel {
    if (json == null) {
        return json;
    }
    return {
        
        'minCharLength': json['minCharLength'],
        'minNonAlphaNumericLength': json['minNonAlphaNumericLength'],
        'consentLevels': ((json['consentLevels'] as Array<any>).map(UserSettingsPresentationModelConsentLevelsInnerFromJSON)),
    };
}

export function UserSettingsPresentationModelToJSON(json: any): UserSettingsPresentationModel {
    return UserSettingsPresentationModelToJSONTyped(json, false);
}

export function UserSettingsPresentationModelToJSONTyped(value?: UserSettingsPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'minCharLength': value['minCharLength'],
        'minNonAlphaNumericLength': value['minNonAlphaNumericLength'],
        'consentLevels': ((value['consentLevels'] as Array<any>).map(UserSettingsPresentationModelConsentLevelsInnerToJSON)),
    };
}

