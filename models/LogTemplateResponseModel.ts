/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LogTemplateResponseModel
 */
export interface LogTemplateResponseModel {
    /**
     * 
     * @type {string}
     * @memberof LogTemplateResponseModel
     */
    messageTemplate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogTemplateResponseModel
     */
    count: number;
}

/**
 * Check if a given object implements the LogTemplateResponseModel interface.
 */
export function instanceOfLogTemplateResponseModel(value: object): value is LogTemplateResponseModel {
    if (!('count' in value) || value['count'] === undefined) return false;
    return true;
}

export function LogTemplateResponseModelFromJSON(json: any): LogTemplateResponseModel {
    return LogTemplateResponseModelFromJSONTyped(json, false);
}

export function LogTemplateResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogTemplateResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'messageTemplate': json['messageTemplate'] == null ? undefined : json['messageTemplate'],
        'count': json['count'],
    };
}

export function LogTemplateResponseModelToJSON(json: any): LogTemplateResponseModel {
    return LogTemplateResponseModelToJSONTyped(json, false);
}

export function LogTemplateResponseModelToJSONTyped(value?: LogTemplateResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'messageTemplate': value['messageTemplate'],
        'count': value['count'],
    };
}

