/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaResponseModelUrlsInner } from './MediaResponseModelUrlsInner';
import {
    MediaResponseModelUrlsInnerFromJSON,
    MediaResponseModelUrlsInnerFromJSONTyped,
    MediaResponseModelUrlsInnerToJSON,
    MediaResponseModelUrlsInnerToJSONTyped,
} from './MediaResponseModelUrlsInner';

/**
 * 
 * @export
 * @interface MediaUrlInfoResponseModel
 */
export interface MediaUrlInfoResponseModel {
    /**
     * 
     * @type {string}
     * @memberof MediaUrlInfoResponseModel
     */
    id: string;
    /**
     * 
     * @type {Array<MediaResponseModelUrlsInner>}
     * @memberof MediaUrlInfoResponseModel
     */
    urlInfos: Array<MediaResponseModelUrlsInner>;
}

/**
 * Check if a given object implements the MediaUrlInfoResponseModel interface.
 */
export function instanceOfMediaUrlInfoResponseModel(value: object): value is MediaUrlInfoResponseModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('urlInfos' in value) || value['urlInfos'] === undefined) return false;
    return true;
}

export function MediaUrlInfoResponseModelFromJSON(json: any): MediaUrlInfoResponseModel {
    return MediaUrlInfoResponseModelFromJSONTyped(json, false);
}

export function MediaUrlInfoResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaUrlInfoResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'urlInfos': ((json['urlInfos'] as Array<any>).map(MediaResponseModelUrlsInnerFromJSON)),
    };
}

export function MediaUrlInfoResponseModelToJSON(json: any): MediaUrlInfoResponseModel {
    return MediaUrlInfoResponseModelToJSONTyped(json, false);
}

export function MediaUrlInfoResponseModelToJSONTyped(value?: MediaUrlInfoResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'urlInfos': ((value['urlInfos'] as Array<any>).map(MediaResponseModelUrlsInnerToJSON)),
    };
}

