/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateMediaTypeRequestModelAllowedMediaTypesInner } from './CreateMediaTypeRequestModelAllowedMediaTypesInner';
import {
    CreateMediaTypeRequestModelAllowedMediaTypesInnerFromJSON,
    CreateMediaTypeRequestModelAllowedMediaTypesInnerFromJSONTyped,
    CreateMediaTypeRequestModelAllowedMediaTypesInnerToJSON,
    CreateMediaTypeRequestModelAllowedMediaTypesInnerToJSONTyped,
} from './CreateMediaTypeRequestModelAllowedMediaTypesInner';
import type { CreateMediaTypeRequestModelCompositionsInner } from './CreateMediaTypeRequestModelCompositionsInner';
import {
    CreateMediaTypeRequestModelCompositionsInnerFromJSON,
    CreateMediaTypeRequestModelCompositionsInnerFromJSONTyped,
    CreateMediaTypeRequestModelCompositionsInnerToJSON,
    CreateMediaTypeRequestModelCompositionsInnerToJSONTyped,
} from './CreateMediaTypeRequestModelCompositionsInner';
import type { MediaTypeResponseModelContainersInner } from './MediaTypeResponseModelContainersInner';
import {
    MediaTypeResponseModelContainersInnerFromJSON,
    MediaTypeResponseModelContainersInnerFromJSONTyped,
    MediaTypeResponseModelContainersInnerToJSON,
    MediaTypeResponseModelContainersInnerToJSONTyped,
} from './MediaTypeResponseModelContainersInner';
import type { MediaTypeResponseModelPropertiesInner } from './MediaTypeResponseModelPropertiesInner';
import {
    MediaTypeResponseModelPropertiesInnerFromJSON,
    MediaTypeResponseModelPropertiesInnerFromJSONTyped,
    MediaTypeResponseModelPropertiesInnerToJSON,
    MediaTypeResponseModelPropertiesInnerToJSONTyped,
} from './MediaTypeResponseModelPropertiesInner';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface MediaTypeResponseModel
 */
export interface MediaTypeResponseModel {
    /**
     * 
     * @type {string}
     * @memberof MediaTypeResponseModel
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeResponseModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeResponseModel
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeResponseModel
     */
    icon: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeResponseModel
     */
    allowedAsRoot: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeResponseModel
     */
    variesByCulture: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeResponseModel
     */
    variesBySegment: boolean;
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof MediaTypeResponseModel
     */
    collection?: ReferenceByIdModel | null;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeResponseModel
     */
    isElement: boolean;
    /**
     * 
     * @type {Array<MediaTypeResponseModelPropertiesInner>}
     * @memberof MediaTypeResponseModel
     */
    properties: Array<MediaTypeResponseModelPropertiesInner>;
    /**
     * 
     * @type {Array<MediaTypeResponseModelContainersInner>}
     * @memberof MediaTypeResponseModel
     */
    containers: Array<MediaTypeResponseModelContainersInner>;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeResponseModel
     */
    id: string;
    /**
     * 
     * @type {Array<CreateMediaTypeRequestModelAllowedMediaTypesInner>}
     * @memberof MediaTypeResponseModel
     */
    allowedMediaTypes: Array<CreateMediaTypeRequestModelAllowedMediaTypesInner>;
    /**
     * 
     * @type {Array<CreateMediaTypeRequestModelCompositionsInner>}
     * @memberof MediaTypeResponseModel
     */
    compositions: Array<CreateMediaTypeRequestModelCompositionsInner>;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeResponseModel
     */
    isDeletable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MediaTypeResponseModel
     */
    aliasCanBeChanged: boolean;
}

/**
 * Check if a given object implements the MediaTypeResponseModel interface.
 */
export function instanceOfMediaTypeResponseModel(value: object): value is MediaTypeResponseModel {
    if (!('alias' in value) || value['alias'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('allowedAsRoot' in value) || value['allowedAsRoot'] === undefined) return false;
    if (!('variesByCulture' in value) || value['variesByCulture'] === undefined) return false;
    if (!('variesBySegment' in value) || value['variesBySegment'] === undefined) return false;
    if (!('isElement' in value) || value['isElement'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    if (!('containers' in value) || value['containers'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('allowedMediaTypes' in value) || value['allowedMediaTypes'] === undefined) return false;
    if (!('compositions' in value) || value['compositions'] === undefined) return false;
    if (!('isDeletable' in value) || value['isDeletable'] === undefined) return false;
    if (!('aliasCanBeChanged' in value) || value['aliasCanBeChanged'] === undefined) return false;
    return true;
}

export function MediaTypeResponseModelFromJSON(json: any): MediaTypeResponseModel {
    return MediaTypeResponseModelFromJSONTyped(json, false);
}

export function MediaTypeResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaTypeResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'icon': json['icon'],
        'allowedAsRoot': json['allowedAsRoot'],
        'variesByCulture': json['variesByCulture'],
        'variesBySegment': json['variesBySegment'],
        'collection': json['collection'] == null ? undefined : ReferenceByIdModelFromJSON(json['collection']),
        'isElement': json['isElement'],
        'properties': ((json['properties'] as Array<any>).map(MediaTypeResponseModelPropertiesInnerFromJSON)),
        'containers': ((json['containers'] as Array<any>).map(MediaTypeResponseModelContainersInnerFromJSON)),
        'id': json['id'],
        'allowedMediaTypes': ((json['allowedMediaTypes'] as Array<any>).map(CreateMediaTypeRequestModelAllowedMediaTypesInnerFromJSON)),
        'compositions': ((json['compositions'] as Array<any>).map(CreateMediaTypeRequestModelCompositionsInnerFromJSON)),
        'isDeletable': json['isDeletable'],
        'aliasCanBeChanged': json['aliasCanBeChanged'],
    };
}

export function MediaTypeResponseModelToJSON(json: any): MediaTypeResponseModel {
    return MediaTypeResponseModelToJSONTyped(json, false);
}

export function MediaTypeResponseModelToJSONTyped(value?: MediaTypeResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alias': value['alias'],
        'name': value['name'],
        'description': value['description'],
        'icon': value['icon'],
        'allowedAsRoot': value['allowedAsRoot'],
        'variesByCulture': value['variesByCulture'],
        'variesBySegment': value['variesBySegment'],
        'collection': ReferenceByIdModelToJSON(value['collection']),
        'isElement': value['isElement'],
        'properties': ((value['properties'] as Array<any>).map(MediaTypeResponseModelPropertiesInnerToJSON)),
        'containers': ((value['containers'] as Array<any>).map(MediaTypeResponseModelContainersInnerToJSON)),
        'id': value['id'],
        'allowedMediaTypes': ((value['allowedMediaTypes'] as Array<any>).map(CreateMediaTypeRequestModelAllowedMediaTypesInnerToJSON)),
        'compositions': ((value['compositions'] as Array<any>).map(CreateMediaTypeRequestModelCompositionsInnerToJSON)),
        'isDeletable': value['isDeletable'],
        'aliasCanBeChanged': value['aliasCanBeChanged'],
    };
}

