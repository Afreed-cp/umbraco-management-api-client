/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MemberTypeReferenceResponseModel } from './MemberTypeReferenceResponseModel';
import {
    MemberTypeReferenceResponseModelFromJSON,
    MemberTypeReferenceResponseModelFromJSONTyped,
    MemberTypeReferenceResponseModelToJSON,
    MemberTypeReferenceResponseModelToJSONTyped,
} from './MemberTypeReferenceResponseModel';
import type { MemberResponseModelValuesInner } from './MemberResponseModelValuesInner';
import {
    MemberResponseModelValuesInnerFromJSON,
    MemberResponseModelValuesInnerFromJSONTyped,
    MemberResponseModelValuesInnerToJSON,
    MemberResponseModelValuesInnerToJSONTyped,
} from './MemberResponseModelValuesInner';
import type { MemberResponseModelVariantsInner } from './MemberResponseModelVariantsInner';
import {
    MemberResponseModelVariantsInnerFromJSON,
    MemberResponseModelVariantsInnerFromJSONTyped,
    MemberResponseModelVariantsInnerToJSON,
    MemberResponseModelVariantsInnerToJSONTyped,
} from './MemberResponseModelVariantsInner';
import type { MemberKindModel } from './MemberKindModel';
import {
    MemberKindModelFromJSON,
    MemberKindModelFromJSONTyped,
    MemberKindModelToJSON,
    MemberKindModelToJSONTyped,
} from './MemberKindModel';

/**
 * 
 * @export
 * @interface MemberResponseModel
 */
export interface MemberResponseModel {
    /**
     * 
     * @type {Array<MemberResponseModelValuesInner>}
     * @memberof MemberResponseModel
     */
    values: Array<MemberResponseModelValuesInner>;
    /**
     * 
     * @type {Array<MemberResponseModelVariantsInner>}
     * @memberof MemberResponseModel
     */
    variants: Array<MemberResponseModelVariantsInner>;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseModel
     */
    username: string;
    /**
     * 
     * @type {MemberTypeReferenceResponseModel}
     * @memberof MemberResponseModel
     */
    memberType: MemberTypeReferenceResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof MemberResponseModel
     */
    isApproved: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberResponseModel
     */
    isLockedOut: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberResponseModel
     */
    isTwoFactorEnabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof MemberResponseModel
     */
    failedPasswordAttempts: number;
    /**
     * 
     * @type {Date}
     * @memberof MemberResponseModel
     */
    lastLoginDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof MemberResponseModel
     */
    lastLockoutDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof MemberResponseModel
     */
    lastPasswordChangeDate?: Date | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberResponseModel
     */
    groups: Array<string>;
    /**
     * 
     * @type {MemberKindModel}
     * @memberof MemberResponseModel
     */
    kind: MemberKindModel;
}



/**
 * Check if a given object implements the MemberResponseModel interface.
 */
export function instanceOfMemberResponseModel(value: object): value is MemberResponseModel {
    if (!('values' in value) || value['values'] === undefined) return false;
    if (!('variants' in value) || value['variants'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('memberType' in value) || value['memberType'] === undefined) return false;
    if (!('isApproved' in value) || value['isApproved'] === undefined) return false;
    if (!('isLockedOut' in value) || value['isLockedOut'] === undefined) return false;
    if (!('isTwoFactorEnabled' in value) || value['isTwoFactorEnabled'] === undefined) return false;
    if (!('failedPasswordAttempts' in value) || value['failedPasswordAttempts'] === undefined) return false;
    if (!('groups' in value) || value['groups'] === undefined) return false;
    if (!('kind' in value) || value['kind'] === undefined) return false;
    return true;
}

export function MemberResponseModelFromJSON(json: any): MemberResponseModel {
    return MemberResponseModelFromJSONTyped(json, false);
}

export function MemberResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'values': ((json['values'] as Array<any>).map(MemberResponseModelValuesInnerFromJSON)),
        'variants': ((json['variants'] as Array<any>).map(MemberResponseModelVariantsInnerFromJSON)),
        'id': json['id'],
        'email': json['email'],
        'username': json['username'],
        'memberType': MemberTypeReferenceResponseModelFromJSON(json['memberType']),
        'isApproved': json['isApproved'],
        'isLockedOut': json['isLockedOut'],
        'isTwoFactorEnabled': json['isTwoFactorEnabled'],
        'failedPasswordAttempts': json['failedPasswordAttempts'],
        'lastLoginDate': json['lastLoginDate'] == null ? undefined : (new Date(json['lastLoginDate'])),
        'lastLockoutDate': json['lastLockoutDate'] == null ? undefined : (new Date(json['lastLockoutDate'])),
        'lastPasswordChangeDate': json['lastPasswordChangeDate'] == null ? undefined : (new Date(json['lastPasswordChangeDate'])),
        'groups': json['groups'],
        'kind': MemberKindModelFromJSON(json['kind']),
    };
}

export function MemberResponseModelToJSON(json: any): MemberResponseModel {
    return MemberResponseModelToJSONTyped(json, false);
}

export function MemberResponseModelToJSONTyped(value?: MemberResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'values': ((value['values'] as Array<any>).map(MemberResponseModelValuesInnerToJSON)),
        'variants': ((value['variants'] as Array<any>).map(MemberResponseModelVariantsInnerToJSON)),
        'id': value['id'],
        'email': value['email'],
        'username': value['username'],
        'memberType': MemberTypeReferenceResponseModelToJSON(value['memberType']),
        'isApproved': value['isApproved'],
        'isLockedOut': value['isLockedOut'],
        'isTwoFactorEnabled': value['isTwoFactorEnabled'],
        'failedPasswordAttempts': value['failedPasswordAttempts'],
        'lastLoginDate': value['lastLoginDate'] == null ? undefined : ((value['lastLoginDate'] as any).toISOString()),
        'lastLockoutDate': value['lastLockoutDate'] == null ? undefined : ((value['lastLockoutDate'] as any).toISOString()),
        'lastPasswordChangeDate': value['lastPasswordChangeDate'] == null ? undefined : ((value['lastPasswordChangeDate'] as any).toISOString()),
        'groups': value['groups'],
        'kind': MemberKindModelToJSON(value['kind']),
    };
}

