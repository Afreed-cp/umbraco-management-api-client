/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventMessageTypeModel } from './EventMessageTypeModel';
import {
    EventMessageTypeModelFromJSON,
    EventMessageTypeModelFromJSONTyped,
    EventMessageTypeModelToJSON,
    EventMessageTypeModelToJSONTyped,
} from './EventMessageTypeModel';

/**
 * 
 * @export
 * @interface NotificationHeaderModel
 */
export interface NotificationHeaderModel {
    /**
     * 
     * @type {string}
     * @memberof NotificationHeaderModel
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationHeaderModel
     */
    category: string;
    /**
     * 
     * @type {EventMessageTypeModel}
     * @memberof NotificationHeaderModel
     */
    type: EventMessageTypeModel;
}



/**
 * Check if a given object implements the NotificationHeaderModel interface.
 */
export function instanceOfNotificationHeaderModel(value: object): value is NotificationHeaderModel {
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function NotificationHeaderModelFromJSON(json: any): NotificationHeaderModel {
    return NotificationHeaderModelFromJSONTyped(json, false);
}

export function NotificationHeaderModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationHeaderModel {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'],
        'category': json['category'],
        'type': EventMessageTypeModelFromJSON(json['type']),
    };
}

export function NotificationHeaderModelToJSON(json: any): NotificationHeaderModel {
    return NotificationHeaderModelToJSONTyped(json, false);
}

export function NotificationHeaderModelToJSONTyped(value?: NotificationHeaderModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'category': value['category'],
        'type': EventMessageTypeModelToJSON(value['type']),
    };
}

