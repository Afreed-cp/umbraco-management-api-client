/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ObjectTypeResponseModel } from './ObjectTypeResponseModel';
import {
    ObjectTypeResponseModelFromJSON,
    ObjectTypeResponseModelFromJSONTyped,
    ObjectTypeResponseModelToJSON,
    ObjectTypeResponseModelToJSONTyped,
} from './ObjectTypeResponseModel';

/**
 * 
 * @export
 * @interface RelationTypeResponseModel
 */
export interface RelationTypeResponseModel {
    /**
     * 
     * @type {string}
     * @memberof RelationTypeResponseModel
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof RelationTypeResponseModel
     */
    isBidirectional: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RelationTypeResponseModel
     */
    isDependency: boolean;
    /**
     * 
     * @type {string}
     * @memberof RelationTypeResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RelationTypeResponseModel
     */
    alias?: string | null;
    /**
     * 
     * @type {ObjectTypeResponseModel}
     * @memberof RelationTypeResponseModel
     */
    parentObject?: ObjectTypeResponseModel | null;
    /**
     * 
     * @type {ObjectTypeResponseModel}
     * @memberof RelationTypeResponseModel
     */
    childObject?: ObjectTypeResponseModel | null;
}

/**
 * Check if a given object implements the RelationTypeResponseModel interface.
 */
export function instanceOfRelationTypeResponseModel(value: object): value is RelationTypeResponseModel {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('isBidirectional' in value) || value['isBidirectional'] === undefined) return false;
    if (!('isDependency' in value) || value['isDependency'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function RelationTypeResponseModelFromJSON(json: any): RelationTypeResponseModel {
    return RelationTypeResponseModelFromJSONTyped(json, false);
}

export function RelationTypeResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationTypeResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'isBidirectional': json['isBidirectional'],
        'isDependency': json['isDependency'],
        'id': json['id'],
        'alias': json['alias'] == null ? undefined : json['alias'],
        'parentObject': json['parentObject'] == null ? undefined : ObjectTypeResponseModelFromJSON(json['parentObject']),
        'childObject': json['childObject'] == null ? undefined : ObjectTypeResponseModelFromJSON(json['childObject']),
    };
}

export function RelationTypeResponseModelToJSON(json: any): RelationTypeResponseModel {
    return RelationTypeResponseModelToJSONTyped(json, false);
}

export function RelationTypeResponseModelToJSONTyped(value?: RelationTypeResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'isBidirectional': value['isBidirectional'],
        'isDependency': value['isDependency'],
        'id': value['id'],
        'alias': value['alias'],
        'parentObject': ObjectTypeResponseModelToJSON(value['parentObject']),
        'childObject': ObjectTypeResponseModelToJSON(value['childObject']),
    };
}

