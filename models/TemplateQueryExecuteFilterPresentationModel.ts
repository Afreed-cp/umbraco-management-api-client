/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OperatorModel } from './OperatorModel';
import {
    OperatorModelFromJSON,
    OperatorModelFromJSONTyped,
    OperatorModelToJSON,
    OperatorModelToJSONTyped,
} from './OperatorModel';

/**
 * 
 * @export
 * @interface TemplateQueryExecuteFilterPresentationModel
 */
export interface TemplateQueryExecuteFilterPresentationModel {
    /**
     * 
     * @type {string}
     * @memberof TemplateQueryExecuteFilterPresentationModel
     */
    propertyAlias: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateQueryExecuteFilterPresentationModel
     */
    constraintValue: string;
    /**
     * 
     * @type {OperatorModel}
     * @memberof TemplateQueryExecuteFilterPresentationModel
     */
    operator: OperatorModel;
}



/**
 * Check if a given object implements the TemplateQueryExecuteFilterPresentationModel interface.
 */
export function instanceOfTemplateQueryExecuteFilterPresentationModel(value: object): value is TemplateQueryExecuteFilterPresentationModel {
    if (!('propertyAlias' in value) || value['propertyAlias'] === undefined) return false;
    if (!('constraintValue' in value) || value['constraintValue'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    return true;
}

export function TemplateQueryExecuteFilterPresentationModelFromJSON(json: any): TemplateQueryExecuteFilterPresentationModel {
    return TemplateQueryExecuteFilterPresentationModelFromJSONTyped(json, false);
}

export function TemplateQueryExecuteFilterPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateQueryExecuteFilterPresentationModel {
    if (json == null) {
        return json;
    }
    return {
        
        'propertyAlias': json['propertyAlias'],
        'constraintValue': json['constraintValue'],
        'operator': OperatorModelFromJSON(json['operator']),
    };
}

export function TemplateQueryExecuteFilterPresentationModelToJSON(json: any): TemplateQueryExecuteFilterPresentationModel {
    return TemplateQueryExecuteFilterPresentationModelToJSONTyped(json, false);
}

export function TemplateQueryExecuteFilterPresentationModelToJSONTyped(value?: TemplateQueryExecuteFilterPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'propertyAlias': value['propertyAlias'],
        'constraintValue': value['constraintValue'],
        'operator': OperatorModelToJSON(value['operator']),
    };
}

