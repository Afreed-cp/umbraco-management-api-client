/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TrackedReferenceMediaTypeModel } from './TrackedReferenceMediaTypeModel';
import {
    TrackedReferenceMediaTypeModelFromJSON,
    TrackedReferenceMediaTypeModelFromJSONTyped,
    TrackedReferenceMediaTypeModelToJSON,
    TrackedReferenceMediaTypeModelToJSONTyped,
} from './TrackedReferenceMediaTypeModel';

/**
 * 
 * @export
 * @interface MediaReferenceResponseModel
 */
export interface MediaReferenceResponseModel {
    /**
     * 
     * @type {string}
     * @memberof MediaReferenceResponseModel
     */
    $type: string;
    /**
     * 
     * @type {string}
     * @memberof MediaReferenceResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MediaReferenceResponseModel
     */
    name?: string | null;
    /**
     * 
     * @type {TrackedReferenceMediaTypeModel}
     * @memberof MediaReferenceResponseModel
     */
    mediaType: TrackedReferenceMediaTypeModel;
}

/**
 * Check if a given object implements the MediaReferenceResponseModel interface.
 */
export function instanceOfMediaReferenceResponseModel(value: object): value is MediaReferenceResponseModel {
    if (!('$type' in value) || value['$type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('mediaType' in value) || value['mediaType'] === undefined) return false;
    return true;
}

export function MediaReferenceResponseModelFromJSON(json: any): MediaReferenceResponseModel {
    return MediaReferenceResponseModelFromJSONTyped(json, false);
}

export function MediaReferenceResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaReferenceResponseModel {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'MediaReferenceResponseModel') {
            return MediaReferenceResponseModelFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        '$type': json['$type'],
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'mediaType': TrackedReferenceMediaTypeModelFromJSON(json['mediaType']),
    };
}

export function MediaReferenceResponseModelToJSON(json: any): MediaReferenceResponseModel {
    return MediaReferenceResponseModelToJSONTyped(json, false);
}

export function MediaReferenceResponseModelToJSONTyped(value?: MediaReferenceResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['$type']) {
            case 'MediaReferenceResponseModel':
                return MediaReferenceResponseModelToJSONTyped(value as MediaReferenceResponseModel, ignoreDiscriminator);
            default:
                return value;
        }
    }

    return {
        
        '$type': value['$type'],
        'id': value['id'],
        'name': value['name'],
        'mediaType': TrackedReferenceMediaTypeModelToJSON(value['mediaType']),
    };
}

