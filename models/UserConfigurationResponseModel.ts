/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PasswordConfigurationResponseModel } from './PasswordConfigurationResponseModel';
import {
    PasswordConfigurationResponseModelFromJSON,
    PasswordConfigurationResponseModelFromJSONTyped,
    PasswordConfigurationResponseModelToJSON,
    PasswordConfigurationResponseModelToJSONTyped,
} from './PasswordConfigurationResponseModel';

/**
 * 
 * @export
 * @interface UserConfigurationResponseModel
 */
export interface UserConfigurationResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof UserConfigurationResponseModel
     */
    canInviteUsers: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserConfigurationResponseModel
     */
    usernameIsEmail: boolean;
    /**
     * 
     * @type {PasswordConfigurationResponseModel}
     * @memberof UserConfigurationResponseModel
     */
    passwordConfiguration: PasswordConfigurationResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof UserConfigurationResponseModel
     */
    allowChangePassword: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserConfigurationResponseModel
     */
    allowTwoFactor: boolean;
}

/**
 * Check if a given object implements the UserConfigurationResponseModel interface.
 */
export function instanceOfUserConfigurationResponseModel(value: object): value is UserConfigurationResponseModel {
    if (!('canInviteUsers' in value) || value['canInviteUsers'] === undefined) return false;
    if (!('usernameIsEmail' in value) || value['usernameIsEmail'] === undefined) return false;
    if (!('passwordConfiguration' in value) || value['passwordConfiguration'] === undefined) return false;
    if (!('allowChangePassword' in value) || value['allowChangePassword'] === undefined) return false;
    if (!('allowTwoFactor' in value) || value['allowTwoFactor'] === undefined) return false;
    return true;
}

export function UserConfigurationResponseModelFromJSON(json: any): UserConfigurationResponseModel {
    return UserConfigurationResponseModelFromJSONTyped(json, false);
}

export function UserConfigurationResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserConfigurationResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'canInviteUsers': json['canInviteUsers'],
        'usernameIsEmail': json['usernameIsEmail'],
        'passwordConfiguration': PasswordConfigurationResponseModelFromJSON(json['passwordConfiguration']),
        'allowChangePassword': json['allowChangePassword'],
        'allowTwoFactor': json['allowTwoFactor'],
    };
}

export function UserConfigurationResponseModelToJSON(json: any): UserConfigurationResponseModel {
    return UserConfigurationResponseModelToJSONTyped(json, false);
}

export function UserConfigurationResponseModelToJSONTyped(value?: UserConfigurationResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'canInviteUsers': value['canInviteUsers'],
        'usernameIsEmail': value['usernameIsEmail'],
        'passwordConfiguration': PasswordConfigurationResponseModelToJSON(value['passwordConfiguration']),
        'allowChangePassword': value['allowChangePassword'],
        'allowTwoFactor': value['allowTwoFactor'],
    };
}

