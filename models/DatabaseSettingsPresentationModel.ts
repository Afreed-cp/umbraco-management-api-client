/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DatabaseSettingsPresentationModel
 */
export interface DatabaseSettingsPresentationModel {
    /**
     * 
     * @type {string}
     * @memberof DatabaseSettingsPresentationModel
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof DatabaseSettingsPresentationModel
     */
    sortOrder: number;
    /**
     * 
     * @type {string}
     * @memberof DatabaseSettingsPresentationModel
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseSettingsPresentationModel
     */
    defaultDatabaseName: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseSettingsPresentationModel
     */
    providerName: string;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseSettingsPresentationModel
     */
    isConfigured: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseSettingsPresentationModel
     */
    requiresServer: boolean;
    /**
     * 
     * @type {string}
     * @memberof DatabaseSettingsPresentationModel
     */
    serverPlaceholder: string;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseSettingsPresentationModel
     */
    requiresCredentials: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseSettingsPresentationModel
     */
    supportsIntegratedAuthentication: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseSettingsPresentationModel
     */
    requiresConnectionTest: boolean;
}

/**
 * Check if a given object implements the DatabaseSettingsPresentationModel interface.
 */
export function instanceOfDatabaseSettingsPresentationModel(value: object): value is DatabaseSettingsPresentationModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('defaultDatabaseName' in value) || value['defaultDatabaseName'] === undefined) return false;
    if (!('providerName' in value) || value['providerName'] === undefined) return false;
    if (!('isConfigured' in value) || value['isConfigured'] === undefined) return false;
    if (!('requiresServer' in value) || value['requiresServer'] === undefined) return false;
    if (!('serverPlaceholder' in value) || value['serverPlaceholder'] === undefined) return false;
    if (!('requiresCredentials' in value) || value['requiresCredentials'] === undefined) return false;
    if (!('supportsIntegratedAuthentication' in value) || value['supportsIntegratedAuthentication'] === undefined) return false;
    if (!('requiresConnectionTest' in value) || value['requiresConnectionTest'] === undefined) return false;
    return true;
}

export function DatabaseSettingsPresentationModelFromJSON(json: any): DatabaseSettingsPresentationModel {
    return DatabaseSettingsPresentationModelFromJSONTyped(json, false);
}

export function DatabaseSettingsPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatabaseSettingsPresentationModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sortOrder': json['sortOrder'],
        'displayName': json['displayName'],
        'defaultDatabaseName': json['defaultDatabaseName'],
        'providerName': json['providerName'],
        'isConfigured': json['isConfigured'],
        'requiresServer': json['requiresServer'],
        'serverPlaceholder': json['serverPlaceholder'],
        'requiresCredentials': json['requiresCredentials'],
        'supportsIntegratedAuthentication': json['supportsIntegratedAuthentication'],
        'requiresConnectionTest': json['requiresConnectionTest'],
    };
}

export function DatabaseSettingsPresentationModelToJSON(json: any): DatabaseSettingsPresentationModel {
    return DatabaseSettingsPresentationModelToJSONTyped(json, false);
}

export function DatabaseSettingsPresentationModelToJSONTyped(value?: DatabaseSettingsPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'sortOrder': value['sortOrder'],
        'displayName': value['displayName'],
        'defaultDatabaseName': value['defaultDatabaseName'],
        'providerName': value['providerName'],
        'isConfigured': value['isConfigured'],
        'requiresServer': value['requiresServer'],
        'serverPlaceholder': value['serverPlaceholder'],
        'requiresCredentials': value['requiresCredentials'],
        'supportsIntegratedAuthentication': value['supportsIntegratedAuthentication'],
        'requiresConnectionTest': value['requiresConnectionTest'],
    };
}

