/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DatabaseInstallRequestModel
 */
export interface DatabaseInstallRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    providerName: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    server?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    password?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseInstallRequestModel
     */
    useIntegratedAuthentication: boolean;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInstallRequestModel
     */
    connectionString?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DatabaseInstallRequestModel
     */
    trustServerCertificate: boolean;
}

/**
 * Check if a given object implements the DatabaseInstallRequestModel interface.
 */
export function instanceOfDatabaseInstallRequestModel(value: object): value is DatabaseInstallRequestModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('providerName' in value) || value['providerName'] === undefined) return false;
    if (!('useIntegratedAuthentication' in value) || value['useIntegratedAuthentication'] === undefined) return false;
    if (!('trustServerCertificate' in value) || value['trustServerCertificate'] === undefined) return false;
    return true;
}

export function DatabaseInstallRequestModelFromJSON(json: any): DatabaseInstallRequestModel {
    return DatabaseInstallRequestModelFromJSONTyped(json, false);
}

export function DatabaseInstallRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatabaseInstallRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'providerName': json['providerName'],
        'server': json['server'] == null ? undefined : json['server'],
        'name': json['name'] == null ? undefined : json['name'],
        'username': json['username'] == null ? undefined : json['username'],
        'password': json['password'] == null ? undefined : json['password'],
        'useIntegratedAuthentication': json['useIntegratedAuthentication'],
        'connectionString': json['connectionString'] == null ? undefined : json['connectionString'],
        'trustServerCertificate': json['trustServerCertificate'],
    };
}

export function DatabaseInstallRequestModelToJSON(json: any): DatabaseInstallRequestModel {
    return DatabaseInstallRequestModelToJSONTyped(json, false);
}

export function DatabaseInstallRequestModelToJSONTyped(value?: DatabaseInstallRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'providerName': value['providerName'],
        'server': value['server'],
        'name': value['name'],
        'username': value['username'],
        'password': value['password'],
        'useIntegratedAuthentication': value['useIntegratedAuthentication'],
        'connectionString': value['connectionString'],
        'trustServerCertificate': value['trustServerCertificate'],
    };
}

