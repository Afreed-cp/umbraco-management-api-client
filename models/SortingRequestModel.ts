/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SortingRequestModelSortingInner } from './SortingRequestModelSortingInner';
import {
    SortingRequestModelSortingInnerFromJSON,
    SortingRequestModelSortingInnerFromJSONTyped,
    SortingRequestModelSortingInnerToJSON,
    SortingRequestModelSortingInnerToJSONTyped,
} from './SortingRequestModelSortingInner';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface SortingRequestModel
 */
export interface SortingRequestModel {
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof SortingRequestModel
     */
    parent?: ReferenceByIdModel | null;
    /**
     * 
     * @type {Array<SortingRequestModelSortingInner>}
     * @memberof SortingRequestModel
     */
    sorting: Array<SortingRequestModelSortingInner>;
}

/**
 * Check if a given object implements the SortingRequestModel interface.
 */
export function instanceOfSortingRequestModel(value: object): value is SortingRequestModel {
    if (!('sorting' in value) || value['sorting'] === undefined) return false;
    return true;
}

export function SortingRequestModelFromJSON(json: any): SortingRequestModel {
    return SortingRequestModelFromJSONTyped(json, false);
}

export function SortingRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): SortingRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'parent': json['parent'] == null ? undefined : ReferenceByIdModelFromJSON(json['parent']),
        'sorting': ((json['sorting'] as Array<any>).map(SortingRequestModelSortingInnerFromJSON)),
    };
}

export function SortingRequestModelToJSON(json: any): SortingRequestModel {
    return SortingRequestModelToJSONTyped(json, false);
}

export function SortingRequestModelToJSONTyped(value?: SortingRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'parent': ReferenceByIdModelToJSON(value['parent']),
        'sorting': ((value['sorting'] as Array<any>).map(SortingRequestModelSortingInnerToJSON)),
    };
}

