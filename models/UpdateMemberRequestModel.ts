/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateMemberRequestModelVariantsInner } from './CreateMemberRequestModelVariantsInner';
import {
    CreateMemberRequestModelVariantsInnerFromJSON,
    CreateMemberRequestModelVariantsInnerFromJSONTyped,
    CreateMemberRequestModelVariantsInnerToJSON,
    CreateMemberRequestModelVariantsInnerToJSONTyped,
} from './CreateMemberRequestModelVariantsInner';
import type { CreateMemberRequestModelValuesInner } from './CreateMemberRequestModelValuesInner';
import {
    CreateMemberRequestModelValuesInnerFromJSON,
    CreateMemberRequestModelValuesInnerFromJSONTyped,
    CreateMemberRequestModelValuesInnerToJSON,
    CreateMemberRequestModelValuesInnerToJSONTyped,
} from './CreateMemberRequestModelValuesInner';

/**
 * 
 * @export
 * @interface UpdateMemberRequestModel
 */
export interface UpdateMemberRequestModel {
    /**
     * 
     * @type {Array<CreateMemberRequestModelValuesInner>}
     * @memberof UpdateMemberRequestModel
     */
    values: Array<CreateMemberRequestModelValuesInner>;
    /**
     * 
     * @type {Array<CreateMemberRequestModelVariantsInner>}
     * @memberof UpdateMemberRequestModel
     */
    variants: Array<CreateMemberRequestModelVariantsInner>;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberRequestModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberRequestModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberRequestModel
     */
    oldPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberRequestModel
     */
    newPassword?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateMemberRequestModel
     */
    groups?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMemberRequestModel
     */
    isApproved: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMemberRequestModel
     */
    isLockedOut: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMemberRequestModel
     */
    isTwoFactorEnabled: boolean;
}

/**
 * Check if a given object implements the UpdateMemberRequestModel interface.
 */
export function instanceOfUpdateMemberRequestModel(value: object): value is UpdateMemberRequestModel {
    if (!('values' in value) || value['values'] === undefined) return false;
    if (!('variants' in value) || value['variants'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('isApproved' in value) || value['isApproved'] === undefined) return false;
    if (!('isLockedOut' in value) || value['isLockedOut'] === undefined) return false;
    if (!('isTwoFactorEnabled' in value) || value['isTwoFactorEnabled'] === undefined) return false;
    return true;
}

export function UpdateMemberRequestModelFromJSON(json: any): UpdateMemberRequestModel {
    return UpdateMemberRequestModelFromJSONTyped(json, false);
}

export function UpdateMemberRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateMemberRequestModel {
    if (json == null) {
        return json;
    }
    return {
        
        'values': ((json['values'] as Array<any>).map(CreateMemberRequestModelValuesInnerFromJSON)),
        'variants': ((json['variants'] as Array<any>).map(CreateMemberRequestModelVariantsInnerFromJSON)),
        'email': json['email'],
        'username': json['username'],
        'oldPassword': json['oldPassword'] == null ? undefined : json['oldPassword'],
        'newPassword': json['newPassword'] == null ? undefined : json['newPassword'],
        'groups': json['groups'] == null ? undefined : json['groups'],
        'isApproved': json['isApproved'],
        'isLockedOut': json['isLockedOut'],
        'isTwoFactorEnabled': json['isTwoFactorEnabled'],
    };
}

export function UpdateMemberRequestModelToJSON(json: any): UpdateMemberRequestModel {
    return UpdateMemberRequestModelToJSONTyped(json, false);
}

export function UpdateMemberRequestModelToJSONTyped(value?: UpdateMemberRequestModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'values': ((value['values'] as Array<any>).map(CreateMemberRequestModelValuesInnerToJSON)),
        'variants': ((value['variants'] as Array<any>).map(CreateMemberRequestModelVariantsInnerToJSON)),
        'email': value['email'],
        'username': value['username'],
        'oldPassword': value['oldPassword'],
        'newPassword': value['newPassword'],
        'groups': value['groups'],
        'isApproved': value['isApproved'],
        'isLockedOut': value['isLockedOut'],
        'isTwoFactorEnabled': value['isTwoFactorEnabled'],
    };
}

