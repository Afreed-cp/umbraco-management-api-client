/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface MediaTypePropertyTypeContainerResponseModel
 */
export interface MediaTypePropertyTypeContainerResponseModel {
    /**
     * 
     * @type {string}
     * @memberof MediaTypePropertyTypeContainerResponseModel
     */
    id: string;
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof MediaTypePropertyTypeContainerResponseModel
     */
    parent?: ReferenceByIdModel | null;
    /**
     * 
     * @type {string}
     * @memberof MediaTypePropertyTypeContainerResponseModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MediaTypePropertyTypeContainerResponseModel
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof MediaTypePropertyTypeContainerResponseModel
     */
    sortOrder: number;
}

/**
 * Check if a given object implements the MediaTypePropertyTypeContainerResponseModel interface.
 */
export function instanceOfMediaTypePropertyTypeContainerResponseModel(value: object): value is MediaTypePropertyTypeContainerResponseModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    return true;
}

export function MediaTypePropertyTypeContainerResponseModelFromJSON(json: any): MediaTypePropertyTypeContainerResponseModel {
    return MediaTypePropertyTypeContainerResponseModelFromJSONTyped(json, false);
}

export function MediaTypePropertyTypeContainerResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaTypePropertyTypeContainerResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'parent': json['parent'] == null ? undefined : ReferenceByIdModelFromJSON(json['parent']),
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'],
        'sortOrder': json['sortOrder'],
    };
}

export function MediaTypePropertyTypeContainerResponseModelToJSON(json: any): MediaTypePropertyTypeContainerResponseModel {
    return MediaTypePropertyTypeContainerResponseModelToJSONTyped(json, false);
}

export function MediaTypePropertyTypeContainerResponseModelToJSONTyped(value?: MediaTypePropertyTypeContainerResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'parent': ReferenceByIdModelToJSON(value['parent']),
        'name': value['name'],
        'type': value['type'],
        'sortOrder': value['sortOrder'],
    };
}

