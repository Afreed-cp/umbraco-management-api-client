/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PasswordConfigurationResponseModel
 */
export interface PasswordConfigurationResponseModel {
    /**
     * 
     * @type {number}
     * @memberof PasswordConfigurationResponseModel
     */
    minimumPasswordLength: number;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordConfigurationResponseModel
     */
    requireNonLetterOrDigit: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordConfigurationResponseModel
     */
    requireDigit: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordConfigurationResponseModel
     */
    requireLowercase: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordConfigurationResponseModel
     */
    requireUppercase: boolean;
}

/**
 * Check if a given object implements the PasswordConfigurationResponseModel interface.
 */
export function instanceOfPasswordConfigurationResponseModel(value: object): value is PasswordConfigurationResponseModel {
    if (!('minimumPasswordLength' in value) || value['minimumPasswordLength'] === undefined) return false;
    if (!('requireNonLetterOrDigit' in value) || value['requireNonLetterOrDigit'] === undefined) return false;
    if (!('requireDigit' in value) || value['requireDigit'] === undefined) return false;
    if (!('requireLowercase' in value) || value['requireLowercase'] === undefined) return false;
    if (!('requireUppercase' in value) || value['requireUppercase'] === undefined) return false;
    return true;
}

export function PasswordConfigurationResponseModelFromJSON(json: any): PasswordConfigurationResponseModel {
    return PasswordConfigurationResponseModelFromJSONTyped(json, false);
}

export function PasswordConfigurationResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PasswordConfigurationResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'minimumPasswordLength': json['minimumPasswordLength'],
        'requireNonLetterOrDigit': json['requireNonLetterOrDigit'],
        'requireDigit': json['requireDigit'],
        'requireLowercase': json['requireLowercase'],
        'requireUppercase': json['requireUppercase'],
    };
}

export function PasswordConfigurationResponseModelToJSON(json: any): PasswordConfigurationResponseModel {
    return PasswordConfigurationResponseModelToJSONTyped(json, false);
}

export function PasswordConfigurationResponseModelToJSONTyped(value?: PasswordConfigurationResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'minimumPasswordLength': value['minimumPasswordLength'],
        'requireNonLetterOrDigit': value['requireNonLetterOrDigit'],
        'requireDigit': value['requireDigit'],
        'requireLowercase': value['requireLowercase'],
        'requireUppercase': value['requireUppercase'],
    };
}

