/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostUserGroupByIdUsersRequestInner } from './PostUserGroupByIdUsersRequestInner';
import {
    PostUserGroupByIdUsersRequestInnerFromJSON,
    PostUserGroupByIdUsersRequestInnerFromJSONTyped,
    PostUserGroupByIdUsersRequestInnerToJSON,
    PostUserGroupByIdUsersRequestInnerToJSONTyped,
} from './PostUserGroupByIdUsersRequestInner';
import type { CreateUserGroupRequestModelPermissionsInner } from './CreateUserGroupRequestModelPermissionsInner';
import {
    CreateUserGroupRequestModelPermissionsInnerFromJSON,
    CreateUserGroupRequestModelPermissionsInnerFromJSONTyped,
    CreateUserGroupRequestModelPermissionsInnerToJSON,
    CreateUserGroupRequestModelPermissionsInnerToJSONTyped,
} from './CreateUserGroupRequestModelPermissionsInner';

/**
 * 
 * @export
 * @interface CurrentUserResponseModel
 */
export interface CurrentUserResponseModel {
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseModel
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseModel
     */
    name: string;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof CurrentUserResponseModel
     */
    userGroupIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponseModel
     */
    languageIsoCode: string | null;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof CurrentUserResponseModel
     */
    documentStartNodeIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserResponseModel
     */
    hasDocumentRootAccess: boolean;
    /**
     * 
     * @type {Set<PostUserGroupByIdUsersRequestInner>}
     * @memberof CurrentUserResponseModel
     */
    mediaStartNodeIds: Set<PostUserGroupByIdUsersRequestInner>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserResponseModel
     */
    hasMediaRootAccess: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUserResponseModel
     */
    avatarUrls: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUserResponseModel
     */
    languages: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserResponseModel
     */
    hasAccessToAllLanguages: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserResponseModel
     */
    hasAccessToSensitiveData: boolean;
    /**
     * 
     * @type {Set<string>}
     * @memberof CurrentUserResponseModel
     */
    fallbackPermissions: Set<string>;
    /**
     * 
     * @type {Set<CreateUserGroupRequestModelPermissionsInner>}
     * @memberof CurrentUserResponseModel
     */
    permissions: Set<CreateUserGroupRequestModelPermissionsInner>;
    /**
     * 
     * @type {Set<string>}
     * @memberof CurrentUserResponseModel
     */
    allowedSections: Set<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserResponseModel
     */
    isAdmin: boolean;
}

/**
 * Check if a given object implements the CurrentUserResponseModel interface.
 */
export function instanceOfCurrentUserResponseModel(value: object): value is CurrentUserResponseModel {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('userName' in value) || value['userName'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('userGroupIds' in value) || value['userGroupIds'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('languageIsoCode' in value) || value['languageIsoCode'] === undefined) return false;
    if (!('documentStartNodeIds' in value) || value['documentStartNodeIds'] === undefined) return false;
    if (!('hasDocumentRootAccess' in value) || value['hasDocumentRootAccess'] === undefined) return false;
    if (!('mediaStartNodeIds' in value) || value['mediaStartNodeIds'] === undefined) return false;
    if (!('hasMediaRootAccess' in value) || value['hasMediaRootAccess'] === undefined) return false;
    if (!('avatarUrls' in value) || value['avatarUrls'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    if (!('hasAccessToAllLanguages' in value) || value['hasAccessToAllLanguages'] === undefined) return false;
    if (!('hasAccessToSensitiveData' in value) || value['hasAccessToSensitiveData'] === undefined) return false;
    if (!('fallbackPermissions' in value) || value['fallbackPermissions'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    if (!('allowedSections' in value) || value['allowedSections'] === undefined) return false;
    if (!('isAdmin' in value) || value['isAdmin'] === undefined) return false;
    return true;
}

export function CurrentUserResponseModelFromJSON(json: any): CurrentUserResponseModel {
    return CurrentUserResponseModelFromJSONTyped(json, false);
}

export function CurrentUserResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentUserResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'userName': json['userName'],
        'name': json['name'],
        'userGroupIds': (new Set((json['userGroupIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'id': json['id'],
        'languageIsoCode': json['languageIsoCode'],
        'documentStartNodeIds': (new Set((json['documentStartNodeIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'hasDocumentRootAccess': json['hasDocumentRootAccess'],
        'mediaStartNodeIds': (new Set((json['mediaStartNodeIds'] as Array<any>).map(PostUserGroupByIdUsersRequestInnerFromJSON))),
        'hasMediaRootAccess': json['hasMediaRootAccess'],
        'avatarUrls': json['avatarUrls'],
        'languages': json['languages'],
        'hasAccessToAllLanguages': json['hasAccessToAllLanguages'],
        'hasAccessToSensitiveData': json['hasAccessToSensitiveData'],
        'fallbackPermissions': new Set(json['fallbackPermissions']),
        'permissions': (new Set((json['permissions'] as Array<any>).map(CreateUserGroupRequestModelPermissionsInnerFromJSON))),
        'allowedSections': new Set(json['allowedSections']),
        'isAdmin': json['isAdmin'],
    };
}

export function CurrentUserResponseModelToJSON(json: any): CurrentUserResponseModel {
    return CurrentUserResponseModelToJSONTyped(json, false);
}

export function CurrentUserResponseModelToJSONTyped(value?: CurrentUserResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'userName': value['userName'],
        'name': value['name'],
        'userGroupIds': (Array.from(value['userGroupIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'id': value['id'],
        'languageIsoCode': value['languageIsoCode'],
        'documentStartNodeIds': (Array.from(value['documentStartNodeIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'hasDocumentRootAccess': value['hasDocumentRootAccess'],
        'mediaStartNodeIds': (Array.from(value['mediaStartNodeIds'] as Set<any>).map(PostUserGroupByIdUsersRequestInnerToJSON)),
        'hasMediaRootAccess': value['hasMediaRootAccess'],
        'avatarUrls': value['avatarUrls'],
        'languages': value['languages'],
        'hasAccessToAllLanguages': value['hasAccessToAllLanguages'],
        'hasAccessToSensitiveData': value['hasAccessToSensitiveData'],
        'fallbackPermissions': Array.from(value['fallbackPermissions'] as Set<any>),
        'permissions': (Array.from(value['permissions'] as Set<any>).map(CreateUserGroupRequestModelPermissionsInnerToJSON)),
        'allowedSections': Array.from(value['allowedSections'] as Set<any>),
        'isAdmin': value['isAdmin'],
    };
}

