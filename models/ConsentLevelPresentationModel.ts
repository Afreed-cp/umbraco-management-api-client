/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TelemetryLevelModel } from './TelemetryLevelModel';
import {
    TelemetryLevelModelFromJSON,
    TelemetryLevelModelFromJSONTyped,
    TelemetryLevelModelToJSON,
    TelemetryLevelModelToJSONTyped,
} from './TelemetryLevelModel';

/**
 * 
 * @export
 * @interface ConsentLevelPresentationModel
 */
export interface ConsentLevelPresentationModel {
    /**
     * 
     * @type {TelemetryLevelModel}
     * @memberof ConsentLevelPresentationModel
     */
    level: TelemetryLevelModel;
    /**
     * 
     * @type {string}
     * @memberof ConsentLevelPresentationModel
     */
    description: string;
}



/**
 * Check if a given object implements the ConsentLevelPresentationModel interface.
 */
export function instanceOfConsentLevelPresentationModel(value: object): value is ConsentLevelPresentationModel {
    if (!('level' in value) || value['level'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function ConsentLevelPresentationModelFromJSON(json: any): ConsentLevelPresentationModel {
    return ConsentLevelPresentationModelFromJSONTyped(json, false);
}

export function ConsentLevelPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsentLevelPresentationModel {
    if (json == null) {
        return json;
    }
    return {
        
        'level': TelemetryLevelModelFromJSON(json['level']),
        'description': json['description'],
    };
}

export function ConsentLevelPresentationModelToJSON(json: any): ConsentLevelPresentationModel {
    return ConsentLevelPresentationModelToJSONTyped(json, false);
}

export function ConsentLevelPresentationModelToJSONTyped(value?: ConsentLevelPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'level': TelemetryLevelModelToJSON(value['level']),
        'description': value['description'],
    };
}

