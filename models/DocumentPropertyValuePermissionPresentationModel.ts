/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface DocumentPropertyValuePermissionPresentationModel
 */
export interface DocumentPropertyValuePermissionPresentationModel {
    /**
     * 
     * @type {string}
     * @memberof DocumentPropertyValuePermissionPresentationModel
     */
    $type: string;
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof DocumentPropertyValuePermissionPresentationModel
     */
    documentType: ReferenceByIdModel;
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof DocumentPropertyValuePermissionPresentationModel
     */
    propertyType: ReferenceByIdModel;
    /**
     * 
     * @type {Set<string>}
     * @memberof DocumentPropertyValuePermissionPresentationModel
     */
    verbs: Set<string>;
}

/**
 * Check if a given object implements the DocumentPropertyValuePermissionPresentationModel interface.
 */
export function instanceOfDocumentPropertyValuePermissionPresentationModel(value: object): value is DocumentPropertyValuePermissionPresentationModel {
    if (!('$type' in value) || value['$type'] === undefined) return false;
    if (!('documentType' in value) || value['documentType'] === undefined) return false;
    if (!('propertyType' in value) || value['propertyType'] === undefined) return false;
    if (!('verbs' in value) || value['verbs'] === undefined) return false;
    return true;
}

export function DocumentPropertyValuePermissionPresentationModelFromJSON(json: any): DocumentPropertyValuePermissionPresentationModel {
    return DocumentPropertyValuePermissionPresentationModelFromJSONTyped(json, false);
}

export function DocumentPropertyValuePermissionPresentationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentPropertyValuePermissionPresentationModel {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'DocumentPropertyValuePermissionPresentationModel') {
            return DocumentPropertyValuePermissionPresentationModelFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        '$type': json['$type'],
        'documentType': ReferenceByIdModelFromJSON(json['documentType']),
        'propertyType': ReferenceByIdModelFromJSON(json['propertyType']),
        'verbs': new Set(json['verbs']),
    };
}

export function DocumentPropertyValuePermissionPresentationModelToJSON(json: any): DocumentPropertyValuePermissionPresentationModel {
    return DocumentPropertyValuePermissionPresentationModelToJSONTyped(json, false);
}

export function DocumentPropertyValuePermissionPresentationModelToJSONTyped(value?: DocumentPropertyValuePermissionPresentationModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['$type']) {
            case 'DocumentPropertyValuePermissionPresentationModel':
                return DocumentPropertyValuePermissionPresentationModelToJSONTyped(value as DocumentPropertyValuePermissionPresentationModel, ignoreDiscriminator);
            default:
                return value;
        }
    }

    return {
        
        '$type': value['$type'],
        'documentType': ReferenceByIdModelToJSON(value['documentType']),
        'propertyType': ReferenceByIdModelToJSON(value['propertyType']),
        'verbs': Array.from(value['verbs'] as Set<any>),
    };
}

