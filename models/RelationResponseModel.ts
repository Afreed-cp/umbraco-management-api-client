/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelationReferenceModel } from './RelationReferenceModel';
import {
    RelationReferenceModelFromJSON,
    RelationReferenceModelFromJSONTyped,
    RelationReferenceModelToJSON,
    RelationReferenceModelToJSONTyped,
} from './RelationReferenceModel';
import type { ReferenceByIdModel } from './ReferenceByIdModel';
import {
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelFromJSONTyped,
    ReferenceByIdModelToJSON,
    ReferenceByIdModelToJSONTyped,
} from './ReferenceByIdModel';

/**
 * 
 * @export
 * @interface RelationResponseModel
 */
export interface RelationResponseModel {
    /**
     * 
     * @type {string}
     * @memberof RelationResponseModel
     */
    id: string;
    /**
     * 
     * @type {ReferenceByIdModel}
     * @memberof RelationResponseModel
     */
    relationType: ReferenceByIdModel;
    /**
     * 
     * @type {RelationReferenceModel}
     * @memberof RelationResponseModel
     */
    parent: RelationReferenceModel;
    /**
     * 
     * @type {RelationReferenceModel}
     * @memberof RelationResponseModel
     */
    child: RelationReferenceModel;
    /**
     * 
     * @type {Date}
     * @memberof RelationResponseModel
     */
    readonly createDate: Date;
    /**
     * 
     * @type {string}
     * @memberof RelationResponseModel
     */
    readonly comment?: string | null;
}

/**
 * Check if a given object implements the RelationResponseModel interface.
 */
export function instanceOfRelationResponseModel(value: object): value is RelationResponseModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('relationType' in value) || value['relationType'] === undefined) return false;
    if (!('parent' in value) || value['parent'] === undefined) return false;
    if (!('child' in value) || value['child'] === undefined) return false;
    if (!('createDate' in value) || value['createDate'] === undefined) return false;
    return true;
}

export function RelationResponseModelFromJSON(json: any): RelationResponseModel {
    return RelationResponseModelFromJSONTyped(json, false);
}

export function RelationResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'relationType': ReferenceByIdModelFromJSON(json['relationType']),
        'parent': RelationReferenceModelFromJSON(json['parent']),
        'child': RelationReferenceModelFromJSON(json['child']),
        'createDate': (new Date(json['createDate'])),
        'comment': json['comment'] == null ? undefined : json['comment'],
    };
}

export function RelationResponseModelToJSON(json: any): RelationResponseModel {
    return RelationResponseModelToJSONTyped(json, false);
}

export function RelationResponseModelToJSONTyped(value?: Omit<RelationResponseModel, 'createDate'|'comment'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'relationType': ReferenceByIdModelToJSON(value['relationType']),
        'parent': RelationReferenceModelToJSON(value['parent']),
        'child': RelationReferenceModelToJSON(value['child']),
    };
}

