/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateDataTypeRequestModelValuesInner } from './CreateDataTypeRequestModelValuesInner';
import {
    CreateDataTypeRequestModelValuesInnerFromJSON,
    CreateDataTypeRequestModelValuesInnerFromJSONTyped,
    CreateDataTypeRequestModelValuesInnerToJSON,
    CreateDataTypeRequestModelValuesInnerToJSONTyped,
} from './CreateDataTypeRequestModelValuesInner';

/**
 * 
 * @export
 * @interface DataTypeResponseModel
 */
export interface DataTypeResponseModel {
    /**
     * 
     * @type {string}
     * @memberof DataTypeResponseModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DataTypeResponseModel
     */
    editorAlias: string;
    /**
     * 
     * @type {string}
     * @memberof DataTypeResponseModel
     */
    editorUiAlias: string;
    /**
     * 
     * @type {Array<CreateDataTypeRequestModelValuesInner>}
     * @memberof DataTypeResponseModel
     */
    values: Array<CreateDataTypeRequestModelValuesInner>;
    /**
     * 
     * @type {string}
     * @memberof DataTypeResponseModel
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof DataTypeResponseModel
     */
    isDeletable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DataTypeResponseModel
     */
    canIgnoreStartNodes: boolean;
}

/**
 * Check if a given object implements the DataTypeResponseModel interface.
 */
export function instanceOfDataTypeResponseModel(value: object): value is DataTypeResponseModel {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('editorAlias' in value) || value['editorAlias'] === undefined) return false;
    if (!('editorUiAlias' in value) || value['editorUiAlias'] === undefined) return false;
    if (!('values' in value) || value['values'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isDeletable' in value) || value['isDeletable'] === undefined) return false;
    if (!('canIgnoreStartNodes' in value) || value['canIgnoreStartNodes'] === undefined) return false;
    return true;
}

export function DataTypeResponseModelFromJSON(json: any): DataTypeResponseModel {
    return DataTypeResponseModelFromJSONTyped(json, false);
}

export function DataTypeResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataTypeResponseModel {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'editorAlias': json['editorAlias'],
        'editorUiAlias': json['editorUiAlias'],
        'values': ((json['values'] as Array<any>).map(CreateDataTypeRequestModelValuesInnerFromJSON)),
        'id': json['id'],
        'isDeletable': json['isDeletable'],
        'canIgnoreStartNodes': json['canIgnoreStartNodes'],
    };
}

export function DataTypeResponseModelToJSON(json: any): DataTypeResponseModel {
    return DataTypeResponseModelToJSONTyped(json, false);
}

export function DataTypeResponseModelToJSONTyped(value?: DataTypeResponseModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'editorAlias': value['editorAlias'],
        'editorUiAlias': value['editorUiAlias'],
        'values': ((value['values'] as Array<any>).map(CreateDataTypeRequestModelValuesInnerToJSON)),
        'id': value['id'],
        'isDeletable': value['isDeletable'],
        'canIgnoreStartNodes': value['canIgnoreStartNodes'],
    };
}

