/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationHeaderModel,
  PagedRedirectUrlResponseModel,
  ProblemDetails,
  RedirectStatusModel,
  RedirectUrlStatusResponseModel,
} from '../models/index';
import {
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedRedirectUrlResponseModelFromJSON,
    PagedRedirectUrlResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RedirectStatusModelFromJSON,
    RedirectStatusModelToJSON,
    RedirectUrlStatusResponseModelFromJSON,
    RedirectUrlStatusResponseModelToJSON,
} from '../models/index';

export interface DeleteRedirectManagementByIdRequest {
    id: string;
}

export interface GetRedirectManagementRequest {
    filter?: string;
    skip?: number;
    take?: number;
}

export interface GetRedirectManagementByIdRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface PostRedirectManagementStatusRequest {
    status?: RedirectStatusModel;
}

/**
 * 
 */
export class RedirectManagementApi extends runtime.BaseAPI {

    /**
     */
    async deleteRedirectManagementByIdRaw(requestParameters: DeleteRedirectManagementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRedirectManagementById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/redirect-management/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRedirectManagementById(requestParameters: DeleteRedirectManagementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRedirectManagementByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getRedirectManagementRaw(requestParameters: GetRedirectManagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedRedirectUrlResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/redirect-management`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedRedirectUrlResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRedirectManagement(requestParameters: GetRedirectManagementRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedRedirectUrlResponseModel> {
        const response = await this.getRedirectManagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRedirectManagementByIdRaw(requestParameters: GetRedirectManagementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedRedirectUrlResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRedirectManagementById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/redirect-management/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedRedirectUrlResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRedirectManagementById(requestParameters: GetRedirectManagementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedRedirectUrlResponseModel> {
        const response = await this.getRedirectManagementByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRedirectManagementStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedirectUrlStatusResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/redirect-management/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectUrlStatusResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRedirectManagementStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedirectUrlStatusResponseModel> {
        const response = await this.getRedirectManagementStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postRedirectManagementStatusRaw(requestParameters: PostRedirectManagementStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/redirect-management/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postRedirectManagementStatus(requestParameters: PostRedirectManagementStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRedirectManagementStatusRaw(requestParameters, initOverrides);
    }

}
