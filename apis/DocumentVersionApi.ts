/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentVersionResponseModel,
  NotificationHeaderModel,
  PagedDocumentVersionItemResponseModel,
  ProblemDetails,
} from '../models/index';
import {
    DocumentVersionResponseModelFromJSON,
    DocumentVersionResponseModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedDocumentVersionItemResponseModelFromJSON,
    PagedDocumentVersionItemResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface GetDocumentVersionRequest {
    documentId: string;
    culture?: string;
    skip?: number;
    take?: number;
}

export interface GetDocumentVersionByIdRequest {
    id: string;
}

export interface PostDocumentVersionByIdRollbackRequest {
    id: string;
    culture?: string;
}

export interface PutDocumentVersionByIdPreventCleanupRequest {
    id: string;
    preventCleanup?: boolean;
}

/**
 * 
 */
export class DocumentVersionApi extends runtime.BaseAPI {

    /**
     */
    async getDocumentVersionRaw(requestParameters: GetDocumentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentVersionItemResponseModel>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getDocumentVersion().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['documentId'] != null) {
            queryParameters['documentId'] = requestParameters['documentId'];
        }

        if (requestParameters['culture'] != null) {
            queryParameters['culture'] = requestParameters['culture'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentVersionItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentVersion(requestParameters: GetDocumentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentVersionItemResponseModel> {
        const response = await this.getDocumentVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentVersionByIdRaw(requestParameters: GetDocumentVersionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentVersionResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentVersionById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-version/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentVersionResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentVersionById(requestParameters: GetDocumentVersionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentVersionResponseModel> {
        const response = await this.getDocumentVersionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDocumentVersionByIdRollbackRaw(requestParameters: PostDocumentVersionByIdRollbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDocumentVersionByIdRollback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['culture'] != null) {
            queryParameters['culture'] = requestParameters['culture'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-version/{id}/rollback`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentVersionByIdRollback(requestParameters: PostDocumentVersionByIdRollbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentVersionByIdRollbackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentVersionByIdPreventCleanupRaw(requestParameters: PutDocumentVersionByIdPreventCleanupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentVersionByIdPreventCleanup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['preventCleanup'] != null) {
            queryParameters['preventCleanup'] = requestParameters['preventCleanup'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-version/{id}/prevent-cleanup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentVersionByIdPreventCleanup(requestParameters: PutDocumentVersionByIdPreventCleanupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentVersionByIdPreventCleanupRaw(requestParameters, initOverrides);
    }

}
