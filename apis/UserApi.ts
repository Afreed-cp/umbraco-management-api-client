/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CalculatedUserStartNodesResponseModel,
  ChangePasswordCurrentUserRequestModel,
  ChangePasswordUserRequestModel,
  CreateInitialPasswordUserRequestModel,
  CreateUserClientCredentialsRequestModel,
  CreateUserRequestModel,
  CurrentUserConfigurationResponseModel,
  CurrentUserResponseModel,
  DeleteUsersRequestModel,
  DirectionModel,
  DisableUserRequestModel,
  EnableTwoFactorRequestModel,
  EnableUserRequestModel,
  GetItemUser200ResponseInner,
  GetUserById2fa200ResponseInner,
  GetUserCurrentLoginProviders200ResponseInner,
  GetUserCurrentPermissionsDocument200ResponseInner,
  InviteUserRequestModel,
  NotificationHeaderModel,
  PagedUserResponseModel,
  ProblemDetails,
  ResendInviteUserRequestModel,
  ResetPasswordUserResponseModel,
  SetAvatarRequestModel,
  UnlockUsersRequestModel,
  UpdateUserGroupsOnUserRequestModel,
  UpdateUserRequestModel,
  UserConfigurationResponseModel,
  UserOrderModel,
  UserPermissionsResponseModel,
  UserResponseModel,
  UserStateModel,
  VerifyInviteUserRequestModel,
  VerifyInviteUserResponseModel,
} from '../models/index';
import {
    CalculatedUserStartNodesResponseModelFromJSON,
    CalculatedUserStartNodesResponseModelToJSON,
    ChangePasswordCurrentUserRequestModelFromJSON,
    ChangePasswordCurrentUserRequestModelToJSON,
    ChangePasswordUserRequestModelFromJSON,
    ChangePasswordUserRequestModelToJSON,
    CreateInitialPasswordUserRequestModelFromJSON,
    CreateInitialPasswordUserRequestModelToJSON,
    CreateUserClientCredentialsRequestModelFromJSON,
    CreateUserClientCredentialsRequestModelToJSON,
    CreateUserRequestModelFromJSON,
    CreateUserRequestModelToJSON,
    CurrentUserConfigurationResponseModelFromJSON,
    CurrentUserConfigurationResponseModelToJSON,
    CurrentUserResponseModelFromJSON,
    CurrentUserResponseModelToJSON,
    DeleteUsersRequestModelFromJSON,
    DeleteUsersRequestModelToJSON,
    DirectionModelFromJSON,
    DirectionModelToJSON,
    DisableUserRequestModelFromJSON,
    DisableUserRequestModelToJSON,
    EnableTwoFactorRequestModelFromJSON,
    EnableTwoFactorRequestModelToJSON,
    EnableUserRequestModelFromJSON,
    EnableUserRequestModelToJSON,
    GetItemUser200ResponseInnerFromJSON,
    GetItemUser200ResponseInnerToJSON,
    GetUserById2fa200ResponseInnerFromJSON,
    GetUserById2fa200ResponseInnerToJSON,
    GetUserCurrentLoginProviders200ResponseInnerFromJSON,
    GetUserCurrentLoginProviders200ResponseInnerToJSON,
    GetUserCurrentPermissionsDocument200ResponseInnerFromJSON,
    GetUserCurrentPermissionsDocument200ResponseInnerToJSON,
    InviteUserRequestModelFromJSON,
    InviteUserRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedUserResponseModelFromJSON,
    PagedUserResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ResendInviteUserRequestModelFromJSON,
    ResendInviteUserRequestModelToJSON,
    ResetPasswordUserResponseModelFromJSON,
    ResetPasswordUserResponseModelToJSON,
    SetAvatarRequestModelFromJSON,
    SetAvatarRequestModelToJSON,
    UnlockUsersRequestModelFromJSON,
    UnlockUsersRequestModelToJSON,
    UpdateUserGroupsOnUserRequestModelFromJSON,
    UpdateUserGroupsOnUserRequestModelToJSON,
    UpdateUserRequestModelFromJSON,
    UpdateUserRequestModelToJSON,
    UserConfigurationResponseModelFromJSON,
    UserConfigurationResponseModelToJSON,
    UserOrderModelFromJSON,
    UserOrderModelToJSON,
    UserPermissionsResponseModelFromJSON,
    UserPermissionsResponseModelToJSON,
    UserResponseModelFromJSON,
    UserResponseModelToJSON,
    UserStateModelFromJSON,
    UserStateModelToJSON,
    VerifyInviteUserRequestModelFromJSON,
    VerifyInviteUserRequestModelToJSON,
    VerifyInviteUserResponseModelFromJSON,
    VerifyInviteUserResponseModelToJSON,
} from '../models/index';

export interface DeleteUserRequest {
    deleteUsersRequestModel?: DeleteUsersRequestModel;
}

export interface DeleteUserAvatarByIdRequest {
    id: string;
}

export interface DeleteUserByIdRequest {
    id: string;
}

export interface DeleteUserById2faByProviderNameRequest {
    id: string;
    providerName: string;
}

export interface DeleteUserByIdClientCredentialsByClientIdRequest {
    id: string;
    clientId: string;
}

export interface DeleteUserCurrent2faByProviderNameRequest {
    providerName: string;
    code?: string;
}

export interface GetFilterUserRequest {
    skip?: number;
    take?: number;
    orderBy?: UserOrderModel;
    orderDirection?: DirectionModel;
    userGroupIds?: Set<string>;
    userStates?: Set<UserStateModel>;
    filter?: string;
}

export interface GetItemUserRequest {
    id?: Set<string>;
}

export interface GetUserRequest {
    skip?: number;
    take?: number;
}

export interface GetUserByIdRequest {
    id: string;
}

export interface GetUserById2faRequest {
    id: string;
}

export interface GetUserByIdCalculateStartNodesRequest {
    id: string;
}

export interface GetUserByIdClientCredentialsRequest {
    id: string;
}

export interface GetUserCurrent2faByProviderNameRequest {
    providerName: string;
}

export interface GetUserCurrentPermissionsRequest {
    id?: Set<string>;
}

export interface GetUserCurrentPermissionsDocumentRequest {
    id?: Set<string>;
}

export interface GetUserCurrentPermissionsMediaRequest {
    id?: Set<string>;
}

export interface PostUserRequest {
    createUserRequestModel?: CreateUserRequestModel;
}

export interface PostUserAvatarByIdRequest {
    id: string;
    setAvatarRequestModel?: SetAvatarRequestModel;
}

export interface PostUserByIdChangePasswordRequest {
    id: string;
    changePasswordUserRequestModel?: ChangePasswordUserRequestModel;
}

export interface PostUserByIdClientCredentialsRequest {
    id: string;
    createUserClientCredentialsRequestModel?: CreateUserClientCredentialsRequestModel;
}

export interface PostUserByIdResetPasswordRequest {
    id: string;
}

export interface PostUserCurrent2faByProviderNameRequest {
    providerName: string;
    enableTwoFactorRequestModel?: EnableTwoFactorRequestModel;
}

export interface PostUserCurrentAvatarRequest {
    setAvatarRequestModel?: SetAvatarRequestModel;
}

export interface PostUserCurrentChangePasswordRequest {
    changePasswordCurrentUserRequestModel?: ChangePasswordCurrentUserRequestModel;
}

export interface PostUserDisableRequest {
    disableUserRequestModel?: DisableUserRequestModel;
}

export interface PostUserEnableRequest {
    enableUserRequestModel?: EnableUserRequestModel;
}

export interface PostUserInviteRequest {
    inviteUserRequestModel?: InviteUserRequestModel;
}

export interface PostUserInviteCreatePasswordRequest {
    createInitialPasswordUserRequestModel?: CreateInitialPasswordUserRequestModel;
}

export interface PostUserInviteResendRequest {
    resendInviteUserRequestModel?: ResendInviteUserRequestModel;
}

export interface PostUserInviteVerifyRequest {
    verifyInviteUserRequestModel?: VerifyInviteUserRequestModel;
}

export interface PostUserSetUserGroupsRequest {
    updateUserGroupsOnUserRequestModel?: UpdateUserGroupsOnUserRequestModel;
}

export interface PostUserUnlockRequest {
    unlockUsersRequestModel?: UnlockUsersRequestModel;
}

export interface PutUserByIdRequest {
    id: string;
    updateUserRequestModel?: UpdateUserRequestModel;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUsersRequestModelToJSON(requestParameters['deleteUsersRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUser(requestParameters: DeleteUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserAvatarByIdRaw(requestParameters: DeleteUserAvatarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserAvatarById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/avatar/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserAvatarById(requestParameters: DeleteUserAvatarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserAvatarByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserByIdRaw(requestParameters: DeleteUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserById(requestParameters: DeleteUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserById2faByProviderNameRaw(requestParameters: DeleteUserById2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserById2faByProviderName().'
            );
        }

        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling deleteUserById2faByProviderName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/2fa/{providerName}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserById2faByProviderName(requestParameters: DeleteUserById2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserById2faByProviderNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserByIdClientCredentialsByClientIdRaw(requestParameters: DeleteUserByIdClientCredentialsByClientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserByIdClientCredentialsByClientId().'
            );
        }

        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling deleteUserByIdClientCredentialsByClientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/client-credentials/{clientId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserByIdClientCredentialsByClientId(requestParameters: DeleteUserByIdClientCredentialsByClientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserByIdClientCredentialsByClientIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserCurrent2faByProviderNameRaw(requestParameters: DeleteUserCurrent2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling deleteUserCurrent2faByProviderName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/2fa/{providerName}`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserCurrent2faByProviderName(requestParameters: DeleteUserCurrent2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserCurrent2faByProviderNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getFilterUserRaw(requestParameters: GetFilterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedUserResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['userGroupIds'] != null) {
            queryParameters['userGroupIds'] = requestParameters['userGroupIds'];
        }

        if (requestParameters['userStates'] != null) {
            queryParameters['userStates'] = requestParameters['userStates'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/filter/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedUserResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getFilterUser(requestParameters: GetFilterUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedUserResponseModel> {
        const response = await this.getFilterUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemUserRaw(requestParameters: GetItemUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemUser200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemUser200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemUser(requestParameters: GetItemUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemUser200ResponseInner>> {
        const response = await this.getItemUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedUserResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedUserResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUser(requestParameters: GetUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedUserResponseModel> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseModel> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserById2faRaw(requestParameters: GetUserById2faRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetUserById2fa200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserById2fa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/2fa`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetUserById2fa200ResponseInnerFromJSON));
    }

    /**
     */
    async getUserById2fa(requestParameters: GetUserById2faRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetUserById2fa200ResponseInner>> {
        const response = await this.getUserById2faRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserByIdCalculateStartNodesRaw(requestParameters: GetUserByIdCalculateStartNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedUserStartNodesResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserByIdCalculateStartNodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/calculate-start-nodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculatedUserStartNodesResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserByIdCalculateStartNodes(requestParameters: GetUserByIdCalculateStartNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedUserStartNodesResponseModel> {
        const response = await this.getUserByIdCalculateStartNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserByIdClientCredentialsRaw(requestParameters: GetUserByIdClientCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserByIdClientCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/client-credentials`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getUserByIdClientCredentials(requestParameters: GetUserByIdClientCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getUserByIdClientCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserConfigurationResponseModel> {
        const response = await this.getUserConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUserResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserCurrent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUserResponseModel> {
        const response = await this.getUserCurrentRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrent2faRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetUserById2fa200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/2fa`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetUserById2fa200ResponseInnerFromJSON));
    }

    /**
     */
    async getUserCurrent2fa(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetUserById2fa200ResponseInner>> {
        const response = await this.getUserCurrent2faRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrent2faByProviderNameRaw(requestParameters: GetUserCurrent2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling getUserCurrent2faByProviderName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/2fa/{providerName}`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getUserCurrent2faByProviderName(requestParameters: GetUserCurrent2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getUserCurrent2faByProviderNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrentConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUserConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserCurrentConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUserConfigurationResponseModel> {
        const response = await this.getUserCurrentConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrentLoginProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetUserCurrentLoginProviders200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/login-providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetUserCurrentLoginProviders200ResponseInnerFromJSON));
    }

    /**
     */
    async getUserCurrentLoginProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetUserCurrentLoginProviders200ResponseInner>> {
        const response = await this.getUserCurrentLoginProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrentPermissionsRaw(requestParameters: GetUserCurrentPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPermissionsResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPermissionsResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserCurrentPermissions(requestParameters: GetUserCurrentPermissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPermissionsResponseModel> {
        const response = await this.getUserCurrentPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrentPermissionsDocumentRaw(requestParameters: GetUserCurrentPermissionsDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetUserCurrentPermissionsDocument200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/permissions/document`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetUserCurrentPermissionsDocument200ResponseInnerFromJSON));
    }

    /**
     */
    async getUserCurrentPermissionsDocument(requestParameters: GetUserCurrentPermissionsDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetUserCurrentPermissionsDocument200ResponseInner>> {
        const response = await this.getUserCurrentPermissionsDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserCurrentPermissionsMediaRaw(requestParameters: GetUserCurrentPermissionsMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPermissionsResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/permissions/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPermissionsResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserCurrentPermissionsMedia(requestParameters: GetUserCurrentPermissionsMediaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPermissionsResponseModel> {
        const response = await this.getUserCurrentPermissionsMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postUserRaw(requestParameters: PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestModelToJSON(requestParameters['createUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUser(requestParameters: PostUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserAvatarByIdRaw(requestParameters: PostUserAvatarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUserAvatarById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/avatar/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetAvatarRequestModelToJSON(requestParameters['setAvatarRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserAvatarById(requestParameters: PostUserAvatarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserAvatarByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserByIdChangePasswordRaw(requestParameters: PostUserByIdChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUserByIdChangePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/change-password`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordUserRequestModelToJSON(requestParameters['changePasswordUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserByIdChangePassword(requestParameters: PostUserByIdChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserByIdChangePasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserByIdClientCredentialsRaw(requestParameters: PostUserByIdClientCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUserByIdClientCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/client-credentials`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserClientCredentialsRequestModelToJSON(requestParameters['createUserClientCredentialsRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserByIdClientCredentials(requestParameters: PostUserByIdClientCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserByIdClientCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserByIdResetPasswordRaw(requestParameters: PostUserByIdResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetPasswordUserResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUserByIdResetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}/reset-password`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetPasswordUserResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async postUserByIdResetPassword(requestParameters: PostUserByIdResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetPasswordUserResponseModel> {
        const response = await this.postUserByIdResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postUserCurrent2faByProviderNameRaw(requestParameters: PostUserCurrent2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling postUserCurrent2faByProviderName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/2fa/{providerName}`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnableTwoFactorRequestModelToJSON(requestParameters['enableTwoFactorRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async postUserCurrent2faByProviderName(requestParameters: PostUserCurrent2faByProviderNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.postUserCurrent2faByProviderNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postUserCurrentAvatarRaw(requestParameters: PostUserCurrentAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/avatar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetAvatarRequestModelToJSON(requestParameters['setAvatarRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserCurrentAvatar(requestParameters: PostUserCurrentAvatarRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserCurrentAvatarRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserCurrentChangePasswordRaw(requestParameters: PostUserCurrentChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/current/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordCurrentUserRequestModelToJSON(requestParameters['changePasswordCurrentUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserCurrentChangePassword(requestParameters: PostUserCurrentChangePasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserCurrentChangePasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserDisableRaw(requestParameters: PostUserDisableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/disable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisableUserRequestModelToJSON(requestParameters['disableUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserDisable(requestParameters: PostUserDisableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserDisableRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserEnableRaw(requestParameters: PostUserEnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnableUserRequestModelToJSON(requestParameters['enableUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserEnable(requestParameters: PostUserEnableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserEnableRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserInviteRaw(requestParameters: PostUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/invite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteUserRequestModelToJSON(requestParameters['inviteUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserInvite(requestParameters: PostUserInviteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserInviteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserInviteCreatePasswordRaw(requestParameters: PostUserInviteCreatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/invite/create-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInitialPasswordUserRequestModelToJSON(requestParameters['createInitialPasswordUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserInviteCreatePassword(requestParameters: PostUserInviteCreatePasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserInviteCreatePasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserInviteResendRaw(requestParameters: PostUserInviteResendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/invite/resend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendInviteUserRequestModelToJSON(requestParameters['resendInviteUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserInviteResend(requestParameters: PostUserInviteResendRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserInviteResendRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserInviteVerifyRaw(requestParameters: PostUserInviteVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyInviteUserResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/invite/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyInviteUserRequestModelToJSON(requestParameters['verifyInviteUserRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyInviteUserResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async postUserInviteVerify(requestParameters: PostUserInviteVerifyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyInviteUserResponseModel> {
        const response = await this.postUserInviteVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postUserSetUserGroupsRaw(requestParameters: PostUserSetUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/set-user-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserGroupsOnUserRequestModelToJSON(requestParameters['updateUserGroupsOnUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserSetUserGroups(requestParameters: PostUserSetUserGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserSetUserGroupsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserUnlockRaw(requestParameters: PostUserUnlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/unlock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlockUsersRequestModelToJSON(requestParameters['unlockUsersRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserUnlock(requestParameters: PostUserUnlockRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserUnlockRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putUserByIdRaw(requestParameters: PutUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestModelToJSON(requestParameters['updateUserRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putUserById(requestParameters: PutUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putUserByIdRaw(requestParameters, initOverrides);
    }

}
