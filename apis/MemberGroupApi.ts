/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMemberGroupRequestModel,
  GetItemMemberGroup200ResponseInner,
  MemberGroupResponseModel,
  NotificationHeaderModel,
  PagedMemberGroupResponseModel,
  PagedNamedEntityTreeItemResponseModel,
  ProblemDetails,
  UpdateMemberGroupRequestModel,
} from '../models/index';
import {
    CreateMemberGroupRequestModelFromJSON,
    CreateMemberGroupRequestModelToJSON,
    GetItemMemberGroup200ResponseInnerFromJSON,
    GetItemMemberGroup200ResponseInnerToJSON,
    MemberGroupResponseModelFromJSON,
    MemberGroupResponseModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedMemberGroupResponseModelFromJSON,
    PagedMemberGroupResponseModelToJSON,
    PagedNamedEntityTreeItemResponseModelFromJSON,
    PagedNamedEntityTreeItemResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateMemberGroupRequestModelFromJSON,
    UpdateMemberGroupRequestModelToJSON,
} from '../models/index';

export interface DeleteMemberGroupByIdRequest {
    id: string;
}

export interface GetItemMemberGroupRequest {
    id?: Set<string>;
}

export interface GetMemberGroupRequest {
    skip?: number;
    take?: number;
}

export interface GetMemberGroupByIdRequest {
    id: string;
}

export interface GetTreeMemberGroupRootRequest {
    skip?: number;
    take?: number;
}

export interface PostMemberGroupRequest {
    createMemberGroupRequestModel?: CreateMemberGroupRequestModel;
}

export interface PutMemberGroupByIdRequest {
    id: string;
    updateMemberGroupRequestModel?: UpdateMemberGroupRequestModel;
}

/**
 * 
 */
export class MemberGroupApi extends runtime.BaseAPI {

    /**
     */
    async deleteMemberGroupByIdRaw(requestParameters: DeleteMemberGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMemberGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMemberGroupById(requestParameters: DeleteMemberGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMemberGroupByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemMemberGroupRaw(requestParameters: GetItemMemberGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemMemberGroup200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/member-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemMemberGroup200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemMemberGroup(requestParameters: GetItemMemberGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemMemberGroup200ResponseInner>> {
        const response = await this.getItemMemberGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberGroupRaw(requestParameters: GetMemberGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMemberGroupResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMemberGroupResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberGroup(requestParameters: GetMemberGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMemberGroupResponseModel> {
        const response = await this.getMemberGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberGroupByIdRaw(requestParameters: GetMemberGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberGroupResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMemberGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberGroupResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberGroupById(requestParameters: GetMemberGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberGroupResponseModel> {
        const response = await this.getMemberGroupByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMemberGroupRootRaw(requestParameters: GetTreeMemberGroupRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedNamedEntityTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/member-group/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedNamedEntityTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeMemberGroupRoot(requestParameters: GetTreeMemberGroupRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedNamedEntityTreeItemResponseModel> {
        const response = await this.getTreeMemberGroupRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postMemberGroupRaw(requestParameters: PostMemberGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemberGroupRequestModelToJSON(requestParameters['createMemberGroupRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMemberGroup(requestParameters: PostMemberGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMemberGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMemberGroupByIdRaw(requestParameters: PutMemberGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMemberGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberGroupRequestModelToJSON(requestParameters['updateMemberGroupRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMemberGroupById(requestParameters: PutMemberGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMemberGroupByIdRaw(requestParameters, initOverrides);
    }

}
