/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMemberRequestModel,
  DirectionModel,
  GetItemMember200ResponseInner,
  MemberResponseModel,
  NotificationHeaderModel,
  PagedIReferenceResponseModel,
  PagedMemberResponseModel,
  PagedModelMemberItemResponseModel,
  PagedReferenceByIdModel,
  ProblemDetails,
  UpdateMemberRequestModel,
} from '../models/index';
import {
    CreateMemberRequestModelFromJSON,
    CreateMemberRequestModelToJSON,
    DirectionModelFromJSON,
    DirectionModelToJSON,
    GetItemMember200ResponseInnerFromJSON,
    GetItemMember200ResponseInnerToJSON,
    MemberResponseModelFromJSON,
    MemberResponseModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedIReferenceResponseModelFromJSON,
    PagedIReferenceResponseModelToJSON,
    PagedMemberResponseModelFromJSON,
    PagedMemberResponseModelToJSON,
    PagedModelMemberItemResponseModelFromJSON,
    PagedModelMemberItemResponseModelToJSON,
    PagedReferenceByIdModelFromJSON,
    PagedReferenceByIdModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateMemberRequestModelFromJSON,
    UpdateMemberRequestModelToJSON,
} from '../models/index';

export interface DeleteMemberByIdRequest {
    id: string;
}

export interface GetFilterMemberRequest {
    memberTypeId?: string;
    memberGroupName?: string;
    isApproved?: boolean;
    isLockedOut?: boolean;
    orderBy?: string;
    orderDirection?: DirectionModel;
    filter?: string;
    skip?: number;
    take?: number;
}

export interface GetItemMemberRequest {
    id?: Set<string>;
}

export interface GetItemMemberSearchRequest {
    query?: string;
    skip?: number;
    take?: number;
    allowedMemberTypes?: Array<string>;
}

export interface GetMemberAreReferencedRequest {
    id?: Set<string>;
    skip?: number;
    take?: number;
}

export interface GetMemberByIdRequest {
    id: string;
}

export interface GetMemberByIdReferencedByRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetMemberByIdReferencedDescendantsRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface PostMemberRequest {
    createMemberRequestModel?: CreateMemberRequestModel;
}

export interface PostMemberValidateRequest {
    createMemberRequestModel?: CreateMemberRequestModel;
}

export interface PutMemberByIdRequest {
    id: string;
    updateMemberRequestModel?: UpdateMemberRequestModel;
}

export interface PutMemberByIdValidateRequest {
    id: string;
    updateMemberRequestModel?: UpdateMemberRequestModel;
}

/**
 * 
 */
export class MemberApi extends runtime.BaseAPI {

    /**
     */
    async deleteMemberByIdRaw(requestParameters: DeleteMemberByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMemberById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMemberById(requestParameters: DeleteMemberByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMemberByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getFilterMemberRaw(requestParameters: GetFilterMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMemberResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['memberTypeId'] != null) {
            queryParameters['memberTypeId'] = requestParameters['memberTypeId'];
        }

        if (requestParameters['memberGroupName'] != null) {
            queryParameters['memberGroupName'] = requestParameters['memberGroupName'];
        }

        if (requestParameters['isApproved'] != null) {
            queryParameters['isApproved'] = requestParameters['isApproved'];
        }

        if (requestParameters['isLockedOut'] != null) {
            queryParameters['isLockedOut'] = requestParameters['isLockedOut'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/filter/member`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMemberResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getFilterMember(requestParameters: GetFilterMemberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMemberResponseModel> {
        const response = await this.getFilterMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMemberRaw(requestParameters: GetItemMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemMember200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/member`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemMember200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemMember(requestParameters: GetItemMemberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemMember200ResponseInner>> {
        const response = await this.getItemMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMemberSearchRaw(requestParameters: GetItemMemberSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelMemberItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['allowedMemberTypes'] != null) {
            queryParameters['allowedMemberTypes'] = requestParameters['allowedMemberTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/member/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelMemberItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemMemberSearch(requestParameters: GetItemMemberSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelMemberItemResponseModel> {
        const response = await this.getItemMemberSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberAreReferencedRaw(requestParameters: GetMemberAreReferencedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReferenceByIdModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/are-referenced`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberAreReferenced(requestParameters: GetMemberAreReferencedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReferenceByIdModel> {
        const response = await this.getMemberAreReferencedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberByIdRaw(requestParameters: GetMemberByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMemberById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberById(requestParameters: GetMemberByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberResponseModel> {
        const response = await this.getMemberByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberByIdReferencedByRaw(requestParameters: GetMemberByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedIReferenceResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMemberByIdReferencedBy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/{id}/referenced-by`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedIReferenceResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberByIdReferencedBy(requestParameters: GetMemberByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedIReferenceResponseModel> {
        const response = await this.getMemberByIdReferencedByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberByIdReferencedDescendantsRaw(requestParameters: GetMemberByIdReferencedDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReferenceByIdModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMemberByIdReferencedDescendants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/{id}/referenced-descendants`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberByIdReferencedDescendants(requestParameters: GetMemberByIdReferencedDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReferenceByIdModel> {
        const response = await this.getMemberByIdReferencedDescendantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getMemberConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getMemberConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postMemberRaw(requestParameters: PostMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemberRequestModelToJSON(requestParameters['createMemberRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMember(requestParameters: PostMemberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postMemberValidateRaw(requestParameters: PostMemberValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemberRequestModelToJSON(requestParameters['createMemberRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMemberValidate(requestParameters: PostMemberValidateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMemberValidateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMemberByIdRaw(requestParameters: PutMemberByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMemberById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberRequestModelToJSON(requestParameters['updateMemberRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMemberById(requestParameters: PutMemberByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMemberByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMemberByIdValidateRaw(requestParameters: PutMemberByIdValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMemberByIdValidate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member/{id}/validate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberRequestModelToJSON(requestParameters['updateMemberRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMemberByIdValidate(requestParameters: PutMemberByIdValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMemberByIdValidateRaw(requestParameters, initOverrides);
    }

}
