/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDocumentBlueprintFromDocumentRequestModel,
  CreateDocumentBlueprintRequestModel,
  CreateFolderRequestModel,
  DocumentBlueprintResponseModel,
  FolderResponseModel,
  GetItemDocumentBlueprint200ResponseInner,
  GetTreeDocumentBlueprintAncestors200ResponseInner,
  MoveDocumentBlueprintRequestModel,
  NotificationHeaderModel,
  PagedDocumentBlueprintTreeItemResponseModel,
  ProblemDetails,
  UpdateDocumentBlueprintRequestModel,
  UpdateFolderResponseModel,
} from '../models/index';
import {
    CreateDocumentBlueprintFromDocumentRequestModelFromJSON,
    CreateDocumentBlueprintFromDocumentRequestModelToJSON,
    CreateDocumentBlueprintRequestModelFromJSON,
    CreateDocumentBlueprintRequestModelToJSON,
    CreateFolderRequestModelFromJSON,
    CreateFolderRequestModelToJSON,
    DocumentBlueprintResponseModelFromJSON,
    DocumentBlueprintResponseModelToJSON,
    FolderResponseModelFromJSON,
    FolderResponseModelToJSON,
    GetItemDocumentBlueprint200ResponseInnerFromJSON,
    GetItemDocumentBlueprint200ResponseInnerToJSON,
    GetTreeDocumentBlueprintAncestors200ResponseInnerFromJSON,
    GetTreeDocumentBlueprintAncestors200ResponseInnerToJSON,
    MoveDocumentBlueprintRequestModelFromJSON,
    MoveDocumentBlueprintRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedDocumentBlueprintTreeItemResponseModelFromJSON,
    PagedDocumentBlueprintTreeItemResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateDocumentBlueprintRequestModelFromJSON,
    UpdateDocumentBlueprintRequestModelToJSON,
    UpdateFolderResponseModelFromJSON,
    UpdateFolderResponseModelToJSON,
} from '../models/index';

export interface DeleteDocumentBlueprintByIdRequest {
    id: string;
}

export interface DeleteDocumentBlueprintFolderByIdRequest {
    id: string;
}

export interface GetDocumentBlueprintByIdRequest {
    id: string;
}

export interface GetDocumentBlueprintByIdScaffoldRequest {
    id: string;
}

export interface GetDocumentBlueprintFolderByIdRequest {
    id: string;
}

export interface GetItemDocumentBlueprintRequest {
    id?: Set<string>;
}

export interface GetTreeDocumentBlueprintAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeDocumentBlueprintChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface GetTreeDocumentBlueprintRootRequest {
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface PostDocumentBlueprintRequest {
    createDocumentBlueprintRequestModel?: CreateDocumentBlueprintRequestModel;
}

export interface PostDocumentBlueprintFolderRequest {
    createFolderRequestModel?: CreateFolderRequestModel;
}

export interface PostDocumentBlueprintFromDocumentRequest {
    createDocumentBlueprintFromDocumentRequestModel?: CreateDocumentBlueprintFromDocumentRequestModel;
}

export interface PutDocumentBlueprintByIdRequest {
    id: string;
    updateDocumentBlueprintRequestModel?: UpdateDocumentBlueprintRequestModel;
}

export interface PutDocumentBlueprintByIdMoveRequest {
    id: string;
    moveDocumentBlueprintRequestModel?: MoveDocumentBlueprintRequestModel;
}

export interface PutDocumentBlueprintFolderByIdRequest {
    id: string;
    updateFolderResponseModel?: UpdateFolderResponseModel;
}

/**
 * 
 */
export class DocumentBlueprintApi extends runtime.BaseAPI {

    /**
     */
    async deleteDocumentBlueprintByIdRaw(requestParameters: DeleteDocumentBlueprintByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDocumentBlueprintById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDocumentBlueprintById(requestParameters: DeleteDocumentBlueprintByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentBlueprintByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteDocumentBlueprintFolderByIdRaw(requestParameters: DeleteDocumentBlueprintFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDocumentBlueprintFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDocumentBlueprintFolderById(requestParameters: DeleteDocumentBlueprintFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentBlueprintFolderByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getDocumentBlueprintByIdRaw(requestParameters: GetDocumentBlueprintByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentBlueprintResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentBlueprintById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentBlueprintResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentBlueprintById(requestParameters: GetDocumentBlueprintByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentBlueprintResponseModel> {
        const response = await this.getDocumentBlueprintByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentBlueprintByIdScaffoldRaw(requestParameters: GetDocumentBlueprintByIdScaffoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentBlueprintResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentBlueprintByIdScaffold().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/{id}/scaffold`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentBlueprintResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentBlueprintByIdScaffold(requestParameters: GetDocumentBlueprintByIdScaffoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentBlueprintResponseModel> {
        const response = await this.getDocumentBlueprintByIdScaffoldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentBlueprintFolderByIdRaw(requestParameters: GetDocumentBlueprintFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentBlueprintFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentBlueprintFolderById(requestParameters: GetDocumentBlueprintFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderResponseModel> {
        const response = await this.getDocumentBlueprintFolderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDocumentBlueprintRaw(requestParameters: GetItemDocumentBlueprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemDocumentBlueprint200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/document-blueprint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemDocumentBlueprint200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemDocumentBlueprint(requestParameters: GetItemDocumentBlueprintRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemDocumentBlueprint200ResponseInner>> {
        const response = await this.getItemDocumentBlueprintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentBlueprintAncestorsRaw(requestParameters: GetTreeDocumentBlueprintAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeDocumentBlueprintAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document-blueprint/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeDocumentBlueprintAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeDocumentBlueprintAncestors(requestParameters: GetTreeDocumentBlueprintAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeDocumentBlueprintAncestors200ResponseInner>> {
        const response = await this.getTreeDocumentBlueprintAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentBlueprintChildrenRaw(requestParameters: GetTreeDocumentBlueprintChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentBlueprintTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document-blueprint/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentBlueprintTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDocumentBlueprintChildren(requestParameters: GetTreeDocumentBlueprintChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentBlueprintTreeItemResponseModel> {
        const response = await this.getTreeDocumentBlueprintChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentBlueprintRootRaw(requestParameters: GetTreeDocumentBlueprintRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentBlueprintTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document-blueprint/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentBlueprintTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDocumentBlueprintRoot(requestParameters: GetTreeDocumentBlueprintRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentBlueprintTreeItemResponseModel> {
        const response = await this.getTreeDocumentBlueprintRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDocumentBlueprintRaw(requestParameters: PostDocumentBlueprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentBlueprintRequestModelToJSON(requestParameters['createDocumentBlueprintRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentBlueprint(requestParameters: PostDocumentBlueprintRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentBlueprintRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentBlueprintFolderRaw(requestParameters: PostDocumentBlueprintFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/folder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestModelToJSON(requestParameters['createFolderRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentBlueprintFolder(requestParameters: PostDocumentBlueprintFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentBlueprintFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentBlueprintFromDocumentRaw(requestParameters: PostDocumentBlueprintFromDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/from-document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentBlueprintFromDocumentRequestModelToJSON(requestParameters['createDocumentBlueprintFromDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentBlueprintFromDocument(requestParameters: PostDocumentBlueprintFromDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentBlueprintFromDocumentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentBlueprintByIdRaw(requestParameters: PutDocumentBlueprintByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentBlueprintById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDocumentBlueprintRequestModelToJSON(requestParameters['updateDocumentBlueprintRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentBlueprintById(requestParameters: PutDocumentBlueprintByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentBlueprintByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentBlueprintByIdMoveRaw(requestParameters: PutDocumentBlueprintByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentBlueprintByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveDocumentBlueprintRequestModelToJSON(requestParameters['moveDocumentBlueprintRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentBlueprintByIdMove(requestParameters: PutDocumentBlueprintByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentBlueprintByIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentBlueprintFolderByIdRaw(requestParameters: PutDocumentBlueprintFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentBlueprintFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-blueprint/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFolderResponseModelToJSON(requestParameters['updateFolderResponseModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentBlueprintFolderById(requestParameters: PutDocumentBlueprintFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentBlueprintFolderByIdRaw(requestParameters, initOverrides);
    }

}
