/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMemberTypeRequestModel,
  GetItemMemberType200ResponseInner,
  GetMemberTypeByIdCompositionReferences200ResponseInner,
  MemberTypeCompositionRequestModel,
  MemberTypeConfigurationResponseModel,
  MemberTypeResponseModel,
  NotificationHeaderModel,
  PagedMemberTypeTreeItemResponseModel,
  PagedModelMemberTypeItemResponseModel,
  PostMemberTypeAvailableCompositions200ResponseInner,
  ProblemDetails,
  UpdateMemberTypeRequestModel,
} from '../models/index';
import {
    CreateMemberTypeRequestModelFromJSON,
    CreateMemberTypeRequestModelToJSON,
    GetItemMemberType200ResponseInnerFromJSON,
    GetItemMemberType200ResponseInnerToJSON,
    GetMemberTypeByIdCompositionReferences200ResponseInnerFromJSON,
    GetMemberTypeByIdCompositionReferences200ResponseInnerToJSON,
    MemberTypeCompositionRequestModelFromJSON,
    MemberTypeCompositionRequestModelToJSON,
    MemberTypeConfigurationResponseModelFromJSON,
    MemberTypeConfigurationResponseModelToJSON,
    MemberTypeResponseModelFromJSON,
    MemberTypeResponseModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedMemberTypeTreeItemResponseModelFromJSON,
    PagedMemberTypeTreeItemResponseModelToJSON,
    PagedModelMemberTypeItemResponseModelFromJSON,
    PagedModelMemberTypeItemResponseModelToJSON,
    PostMemberTypeAvailableCompositions200ResponseInnerFromJSON,
    PostMemberTypeAvailableCompositions200ResponseInnerToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateMemberTypeRequestModelFromJSON,
    UpdateMemberTypeRequestModelToJSON,
} from '../models/index';

export interface DeleteMemberTypeByIdRequest {
    id: string;
}

export interface GetItemMemberTypeRequest {
    id?: Set<string>;
}

export interface GetItemMemberTypeSearchRequest {
    query?: string;
    skip?: number;
    take?: number;
}

export interface GetMemberTypeByIdRequest {
    id: string;
}

export interface GetMemberTypeByIdCompositionReferencesRequest {
    id: string;
}

export interface GetTreeMemberTypeRootRequest {
    skip?: number;
    take?: number;
}

export interface PostMemberTypeRequest {
    createMemberTypeRequestModel?: CreateMemberTypeRequestModel;
}

export interface PostMemberTypeAvailableCompositionsRequest {
    memberTypeCompositionRequestModel?: MemberTypeCompositionRequestModel;
}

export interface PostMemberTypeByIdCopyRequest {
    id: string;
}

export interface PutMemberTypeByIdRequest {
    id: string;
    updateMemberTypeRequestModel?: UpdateMemberTypeRequestModel;
}

/**
 * 
 */
export class MemberTypeApi extends runtime.BaseAPI {

    /**
     */
    async deleteMemberTypeByIdRaw(requestParameters: DeleteMemberTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMemberTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMemberTypeById(requestParameters: DeleteMemberTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMemberTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemMemberTypeRaw(requestParameters: GetItemMemberTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemMemberType200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/member-type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemMemberType200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemMemberType(requestParameters: GetItemMemberTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemMemberType200ResponseInner>> {
        const response = await this.getItemMemberTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMemberTypeSearchRaw(requestParameters: GetItemMemberTypeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelMemberTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/member-type/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelMemberTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemMemberTypeSearch(requestParameters: GetItemMemberTypeSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelMemberTypeItemResponseModel> {
        const response = await this.getItemMemberTypeSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberTypeByIdRaw(requestParameters: GetMemberTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberTypeResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMemberTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberTypeResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberTypeById(requestParameters: GetMemberTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberTypeResponseModel> {
        const response = await this.getMemberTypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberTypeByIdCompositionReferencesRaw(requestParameters: GetMemberTypeByIdCompositionReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetMemberTypeByIdCompositionReferences200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMemberTypeByIdCompositionReferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/{id}/composition-references`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetMemberTypeByIdCompositionReferences200ResponseInnerFromJSON));
    }

    /**
     */
    async getMemberTypeByIdCompositionReferences(requestParameters: GetMemberTypeByIdCompositionReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetMemberTypeByIdCompositionReferences200ResponseInner>> {
        const response = await this.getMemberTypeByIdCompositionReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberTypeConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberTypeConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberTypeConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMemberTypeConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberTypeConfigurationResponseModel> {
        const response = await this.getMemberTypeConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMemberTypeRootRaw(requestParameters: GetTreeMemberTypeRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMemberTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/member-type/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMemberTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeMemberTypeRoot(requestParameters: GetTreeMemberTypeRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMemberTypeTreeItemResponseModel> {
        const response = await this.getTreeMemberTypeRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postMemberTypeRaw(requestParameters: PostMemberTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemberTypeRequestModelToJSON(requestParameters['createMemberTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMemberType(requestParameters: PostMemberTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMemberTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postMemberTypeAvailableCompositionsRaw(requestParameters: PostMemberTypeAvailableCompositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostMemberTypeAvailableCompositions200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/available-compositions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberTypeCompositionRequestModelToJSON(requestParameters['memberTypeCompositionRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostMemberTypeAvailableCompositions200ResponseInnerFromJSON));
    }

    /**
     */
    async postMemberTypeAvailableCompositions(requestParameters: PostMemberTypeAvailableCompositionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostMemberTypeAvailableCompositions200ResponseInner>> {
        const response = await this.postMemberTypeAvailableCompositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postMemberTypeByIdCopyRaw(requestParameters: PostMemberTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postMemberTypeByIdCopy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/{id}/copy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMemberTypeByIdCopy(requestParameters: PostMemberTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMemberTypeByIdCopyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMemberTypeByIdRaw(requestParameters: PutMemberTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMemberTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/member-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberTypeRequestModelToJSON(requestParameters['updateMemberTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMemberTypeById(requestParameters: PutMemberTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMemberTypeByIdRaw(requestParameters, initOverrides);
    }

}
