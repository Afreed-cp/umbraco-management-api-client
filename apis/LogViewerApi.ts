/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DirectionModel,
  LogLevelCountsReponseModel,
  LogLevelModel,
  NotificationHeaderModel,
  PagedLogMessageResponseModel,
  PagedLogTemplateResponseModel,
  PagedLoggerResponseModel,
  PagedSavedLogSearchResponseModel,
  ProblemDetails,
  SavedLogSearchRequestModel,
  SavedLogSearchResponseModel,
} from '../models/index';
import {
    DirectionModelFromJSON,
    DirectionModelToJSON,
    LogLevelCountsReponseModelFromJSON,
    LogLevelCountsReponseModelToJSON,
    LogLevelModelFromJSON,
    LogLevelModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedLogMessageResponseModelFromJSON,
    PagedLogMessageResponseModelToJSON,
    PagedLogTemplateResponseModelFromJSON,
    PagedLogTemplateResponseModelToJSON,
    PagedLoggerResponseModelFromJSON,
    PagedLoggerResponseModelToJSON,
    PagedSavedLogSearchResponseModelFromJSON,
    PagedSavedLogSearchResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SavedLogSearchRequestModelFromJSON,
    SavedLogSearchRequestModelToJSON,
    SavedLogSearchResponseModelFromJSON,
    SavedLogSearchResponseModelToJSON,
} from '../models/index';

export interface DeleteLogViewerSavedSearchByNameRequest {
    name: string;
}

export interface GetLogViewerLevelRequest {
    skip?: number;
    take?: number;
}

export interface GetLogViewerLevelCountRequest {
    startDate?: Date;
    endDate?: Date;
}

export interface GetLogViewerLogRequest {
    skip?: number;
    take?: number;
    orderDirection?: DirectionModel;
    filterExpression?: string;
    logLevel?: Array<LogLevelModel>;
    startDate?: Date;
    endDate?: Date;
}

export interface GetLogViewerMessageTemplateRequest {
    skip?: number;
    take?: number;
    startDate?: Date;
    endDate?: Date;
}

export interface GetLogViewerSavedSearchRequest {
    skip?: number;
    take?: number;
}

export interface GetLogViewerSavedSearchByNameRequest {
    name: string;
}

export interface GetLogViewerValidateLogsSizeRequest {
    startDate?: Date;
    endDate?: Date;
}

export interface PostLogViewerSavedSearchRequest {
    savedLogSearchRequestModel?: SavedLogSearchRequestModel;
}

/**
 * 
 */
export class LogViewerApi extends runtime.BaseAPI {

    /**
     */
    async deleteLogViewerSavedSearchByNameRaw(requestParameters: DeleteLogViewerSavedSearchByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteLogViewerSavedSearchByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/saved-search/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteLogViewerSavedSearchByName(requestParameters: DeleteLogViewerSavedSearchByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLogViewerSavedSearchByNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getLogViewerLevelRaw(requestParameters: GetLogViewerLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedLoggerResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/level`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedLoggerResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getLogViewerLevel(requestParameters: GetLogViewerLevelRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedLoggerResponseModel> {
        const response = await this.getLogViewerLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogViewerLevelCountRaw(requestParameters: GetLogViewerLevelCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogLevelCountsReponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/level-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogLevelCountsReponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getLogViewerLevelCount(requestParameters: GetLogViewerLevelCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogLevelCountsReponseModel> {
        const response = await this.getLogViewerLevelCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogViewerLogRaw(requestParameters: GetLogViewerLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedLogMessageResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['filterExpression'] != null) {
            queryParameters['filterExpression'] = requestParameters['filterExpression'];
        }

        if (requestParameters['logLevel'] != null) {
            queryParameters['logLevel'] = requestParameters['logLevel'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedLogMessageResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getLogViewerLog(requestParameters: GetLogViewerLogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedLogMessageResponseModel> {
        const response = await this.getLogViewerLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogViewerMessageTemplateRaw(requestParameters: GetLogViewerMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedLogTemplateResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/message-template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedLogTemplateResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getLogViewerMessageTemplate(requestParameters: GetLogViewerMessageTemplateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedLogTemplateResponseModel> {
        const response = await this.getLogViewerMessageTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogViewerSavedSearchRaw(requestParameters: GetLogViewerSavedSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedSavedLogSearchResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/saved-search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedSavedLogSearchResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getLogViewerSavedSearch(requestParameters: GetLogViewerSavedSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedSavedLogSearchResponseModel> {
        const response = await this.getLogViewerSavedSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogViewerSavedSearchByNameRaw(requestParameters: GetLogViewerSavedSearchByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedLogSearchResponseModel>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getLogViewerSavedSearchByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/saved-search/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedLogSearchResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getLogViewerSavedSearchByName(requestParameters: GetLogViewerSavedSearchByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedLogSearchResponseModel> {
        const response = await this.getLogViewerSavedSearchByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogViewerValidateLogsSizeRaw(requestParameters: GetLogViewerValidateLogsSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/validate-logs-size`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getLogViewerValidateLogsSize(requestParameters: GetLogViewerValidateLogsSizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getLogViewerValidateLogsSizeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postLogViewerSavedSearchRaw(requestParameters: PostLogViewerSavedSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/log-viewer/saved-search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SavedLogSearchRequestModelToJSON(requestParameters['savedLogSearchRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postLogViewerSavedSearch(requestParameters: PostLogViewerSavedSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postLogViewerSavedSearchRaw(requestParameters, initOverrides);
    }

}
