/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDataRequestModel,
  NotificationHeaderModel,
  PagedUserDataResponseModel,
  UpdateUserDataRequestModel,
  UserDataModel,
  UserDataOperationStatusModel,
} from '../models/index';
import {
    CreateUserDataRequestModelFromJSON,
    CreateUserDataRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedUserDataResponseModelFromJSON,
    PagedUserDataResponseModelToJSON,
    UpdateUserDataRequestModelFromJSON,
    UpdateUserDataRequestModelToJSON,
    UserDataModelFromJSON,
    UserDataModelToJSON,
    UserDataOperationStatusModelFromJSON,
    UserDataOperationStatusModelToJSON,
} from '../models/index';

export interface GetUserDataRequest {
    groups?: Array<string>;
    identifiers?: Array<string>;
    skip?: number;
    take?: number;
}

export interface GetUserDataByIdRequest {
    id: string;
}

export interface PostUserDataRequest {
    createUserDataRequestModel?: CreateUserDataRequestModel;
}

export interface PutUserDataRequest {
    updateUserDataRequestModel?: UpdateUserDataRequestModel;
}

/**
 * 
 */
export class UserDataApi extends runtime.BaseAPI {

    /**
     */
    async getUserDataRaw(requestParameters: GetUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedUserDataResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['groups'] != null) {
            queryParameters['groups'] = requestParameters['groups'];
        }

        if (requestParameters['identifiers'] != null) {
            queryParameters['identifiers'] = requestParameters['identifiers'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedUserDataResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserData(requestParameters: GetUserDataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedUserDataResponseModel> {
        const response = await this.getUserDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserDataByIdRaw(requestParameters: GetUserDataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDataModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserDataById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-data/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDataModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserDataById(requestParameters: GetUserDataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDataModel> {
        const response = await this.getUserDataByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postUserDataRaw(requestParameters: PostUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDataRequestModelToJSON(requestParameters['createUserDataRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserData(requestParameters: PostUserDataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserDataRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putUserDataRaw(requestParameters: PutUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-data`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDataRequestModelToJSON(requestParameters['updateUserDataRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putUserData(requestParameters: PutUserDataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putUserDataRaw(requestParameters, initOverrides);
    }

}
