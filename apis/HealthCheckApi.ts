/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthCheckActionRequestModel,
  HealthCheckGroupPresentationModel,
  HealthCheckGroupWithResultResponseModel,
  HealthCheckResultResponseModel,
  NotificationHeaderModel,
  PagedHealthCheckGroupResponseModel,
  ProblemDetails,
} from '../models/index';
import {
    HealthCheckActionRequestModelFromJSON,
    HealthCheckActionRequestModelToJSON,
    HealthCheckGroupPresentationModelFromJSON,
    HealthCheckGroupPresentationModelToJSON,
    HealthCheckGroupWithResultResponseModelFromJSON,
    HealthCheckGroupWithResultResponseModelToJSON,
    HealthCheckResultResponseModelFromJSON,
    HealthCheckResultResponseModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedHealthCheckGroupResponseModelFromJSON,
    PagedHealthCheckGroupResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface GetHealthCheckGroupRequest {
    skip?: number;
    take?: number;
}

export interface GetHealthCheckGroupByNameRequest {
    name: string;
}

export interface PostHealthCheckExecuteActionRequest {
    healthCheckActionRequestModel?: HealthCheckActionRequestModel;
}

export interface PostHealthCheckGroupByNameCheckRequest {
    name: string;
}

/**
 * 
 */
export class HealthCheckApi extends runtime.BaseAPI {

    /**
     */
    async getHealthCheckGroupRaw(requestParameters: GetHealthCheckGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedHealthCheckGroupResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/health-check-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedHealthCheckGroupResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getHealthCheckGroup(requestParameters: GetHealthCheckGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedHealthCheckGroupResponseModel> {
        const response = await this.getHealthCheckGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getHealthCheckGroupByNameRaw(requestParameters: GetHealthCheckGroupByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckGroupPresentationModel>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getHealthCheckGroupByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/health-check-group/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckGroupPresentationModelFromJSON(jsonValue));
    }

    /**
     */
    async getHealthCheckGroupByName(requestParameters: GetHealthCheckGroupByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckGroupPresentationModel> {
        const response = await this.getHealthCheckGroupByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postHealthCheckExecuteActionRaw(requestParameters: PostHealthCheckExecuteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResultResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/health-check/execute-action`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HealthCheckActionRequestModelToJSON(requestParameters['healthCheckActionRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResultResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async postHealthCheckExecuteAction(requestParameters: PostHealthCheckExecuteActionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResultResponseModel> {
        const response = await this.postHealthCheckExecuteActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postHealthCheckGroupByNameCheckRaw(requestParameters: PostHealthCheckGroupByNameCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckGroupWithResultResponseModel>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling postHealthCheckGroupByNameCheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/health-check-group/{name}/check`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckGroupWithResultResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async postHealthCheckGroupByNameCheck(requestParameters: PostHealthCheckGroupByNameCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckGroupWithResultResponseModel> {
        const response = await this.postHealthCheckGroupByNameCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
