/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopyDocumentTypeRequestModel,
  CreateDocumentTypeRequestModel,
  CreateFolderRequestModel,
  DocumentTypeCompositionRequestModel,
  DocumentTypeConfigurationResponseModel,
  DocumentTypeResponseModel,
  FolderResponseModel,
  GetDocumentTypeByIdCompositionReferences200ResponseInner,
  GetItemDocumentType200ResponseInner,
  GetTreeDocumentTypeAncestors200ResponseInner,
  ImportDocumentTypeRequestModel,
  MoveDocumentTypeRequestModel,
  NotificationHeaderModel,
  PagedAllowedDocumentTypeModel,
  PagedDocumentTypeBlueprintItemResponseModel,
  PagedDocumentTypeTreeItemResponseModel,
  PagedModelDocumentTypeItemResponseModel,
  PostDocumentTypeAvailableCompositions200ResponseInner,
  ProblemDetails,
  UpdateDocumentTypeRequestModel,
  UpdateFolderResponseModel,
} from '../models/index';
import {
    CopyDocumentTypeRequestModelFromJSON,
    CopyDocumentTypeRequestModelToJSON,
    CreateDocumentTypeRequestModelFromJSON,
    CreateDocumentTypeRequestModelToJSON,
    CreateFolderRequestModelFromJSON,
    CreateFolderRequestModelToJSON,
    DocumentTypeCompositionRequestModelFromJSON,
    DocumentTypeCompositionRequestModelToJSON,
    DocumentTypeConfigurationResponseModelFromJSON,
    DocumentTypeConfigurationResponseModelToJSON,
    DocumentTypeResponseModelFromJSON,
    DocumentTypeResponseModelToJSON,
    FolderResponseModelFromJSON,
    FolderResponseModelToJSON,
    GetDocumentTypeByIdCompositionReferences200ResponseInnerFromJSON,
    GetDocumentTypeByIdCompositionReferences200ResponseInnerToJSON,
    GetItemDocumentType200ResponseInnerFromJSON,
    GetItemDocumentType200ResponseInnerToJSON,
    GetTreeDocumentTypeAncestors200ResponseInnerFromJSON,
    GetTreeDocumentTypeAncestors200ResponseInnerToJSON,
    ImportDocumentTypeRequestModelFromJSON,
    ImportDocumentTypeRequestModelToJSON,
    MoveDocumentTypeRequestModelFromJSON,
    MoveDocumentTypeRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedAllowedDocumentTypeModelFromJSON,
    PagedAllowedDocumentTypeModelToJSON,
    PagedDocumentTypeBlueprintItemResponseModelFromJSON,
    PagedDocumentTypeBlueprintItemResponseModelToJSON,
    PagedDocumentTypeTreeItemResponseModelFromJSON,
    PagedDocumentTypeTreeItemResponseModelToJSON,
    PagedModelDocumentTypeItemResponseModelFromJSON,
    PagedModelDocumentTypeItemResponseModelToJSON,
    PostDocumentTypeAvailableCompositions200ResponseInnerFromJSON,
    PostDocumentTypeAvailableCompositions200ResponseInnerToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateDocumentTypeRequestModelFromJSON,
    UpdateDocumentTypeRequestModelToJSON,
    UpdateFolderResponseModelFromJSON,
    UpdateFolderResponseModelToJSON,
} from '../models/index';

export interface DeleteDocumentTypeByIdRequest {
    id: string;
}

export interface DeleteDocumentTypeFolderByIdRequest {
    id: string;
}

export interface GetDocumentTypeAllowedAtRootRequest {
    skip?: number;
    take?: number;
}

export interface GetDocumentTypeByIdRequest {
    id: string;
}

export interface GetDocumentTypeByIdAllowedChildrenRequest {
    id: string;
    parentContentKey?: string;
    skip?: number;
    take?: number;
}

export interface GetDocumentTypeByIdBlueprintRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetDocumentTypeByIdCompositionReferencesRequest {
    id: string;
}

export interface GetDocumentTypeByIdExportRequest {
    id: string;
}

export interface GetDocumentTypeFolderByIdRequest {
    id: string;
}

export interface GetItemDocumentTypeRequest {
    id?: Set<string>;
}

export interface GetItemDocumentTypeSearchRequest {
    query?: string;
    isElement?: boolean;
    skip?: number;
    take?: number;
}

export interface GetTreeDocumentTypeAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeDocumentTypeChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface GetTreeDocumentTypeRootRequest {
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface PostDocumentTypeRequest {
    createDocumentTypeRequestModel?: CreateDocumentTypeRequestModel;
}

export interface PostDocumentTypeAvailableCompositionsRequest {
    documentTypeCompositionRequestModel?: DocumentTypeCompositionRequestModel;
}

export interface PostDocumentTypeByIdCopyRequest {
    id: string;
    copyDocumentTypeRequestModel?: CopyDocumentTypeRequestModel;
}

export interface PostDocumentTypeFolderRequest {
    createFolderRequestModel?: CreateFolderRequestModel;
}

export interface PostDocumentTypeImportRequest {
    importDocumentTypeRequestModel?: ImportDocumentTypeRequestModel;
}

export interface PutDocumentTypeByIdRequest {
    id: string;
    updateDocumentTypeRequestModel?: UpdateDocumentTypeRequestModel;
}

export interface PutDocumentTypeByIdImportRequest {
    id: string;
    importDocumentTypeRequestModel?: ImportDocumentTypeRequestModel;
}

export interface PutDocumentTypeByIdMoveRequest {
    id: string;
    moveDocumentTypeRequestModel?: MoveDocumentTypeRequestModel;
}

export interface PutDocumentTypeFolderByIdRequest {
    id: string;
    updateFolderResponseModel?: UpdateFolderResponseModel;
}

/**
 * 
 */
export class DocumentTypeApi extends runtime.BaseAPI {

    /**
     */
    async deleteDocumentTypeByIdRaw(requestParameters: DeleteDocumentTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDocumentTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDocumentTypeById(requestParameters: DeleteDocumentTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteDocumentTypeFolderByIdRaw(requestParameters: DeleteDocumentTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDocumentTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDocumentTypeFolderById(requestParameters: DeleteDocumentTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentTypeFolderByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getDocumentTypeAllowedAtRootRaw(requestParameters: GetDocumentTypeAllowedAtRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAllowedDocumentTypeModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/allowed-at-root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAllowedDocumentTypeModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentTypeAllowedAtRoot(requestParameters: GetDocumentTypeAllowedAtRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAllowedDocumentTypeModel> {
        const response = await this.getDocumentTypeAllowedAtRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeByIdRaw(requestParameters: GetDocumentTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypeResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypeResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentTypeById(requestParameters: GetDocumentTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypeResponseModel> {
        const response = await this.getDocumentTypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeByIdAllowedChildrenRaw(requestParameters: GetDocumentTypeByIdAllowedChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAllowedDocumentTypeModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentTypeByIdAllowedChildren().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['parentContentKey'] != null) {
            queryParameters['parentContentKey'] = requestParameters['parentContentKey'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/allowed-children`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAllowedDocumentTypeModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentTypeByIdAllowedChildren(requestParameters: GetDocumentTypeByIdAllowedChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAllowedDocumentTypeModel> {
        const response = await this.getDocumentTypeByIdAllowedChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeByIdBlueprintRaw(requestParameters: GetDocumentTypeByIdBlueprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentTypeBlueprintItemResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentTypeByIdBlueprint().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/blueprint`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentTypeBlueprintItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentTypeByIdBlueprint(requestParameters: GetDocumentTypeByIdBlueprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentTypeBlueprintItemResponseModel> {
        const response = await this.getDocumentTypeByIdBlueprintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeByIdCompositionReferencesRaw(requestParameters: GetDocumentTypeByIdCompositionReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetDocumentTypeByIdCompositionReferences200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentTypeByIdCompositionReferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/composition-references`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetDocumentTypeByIdCompositionReferences200ResponseInnerFromJSON));
    }

    /**
     */
    async getDocumentTypeByIdCompositionReferences(requestParameters: GetDocumentTypeByIdCompositionReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetDocumentTypeByIdCompositionReferences200ResponseInner>> {
        const response = await this.getDocumentTypeByIdCompositionReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeByIdExportRaw(requestParameters: GetDocumentTypeByIdExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentTypeByIdExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getDocumentTypeByIdExport(requestParameters: GetDocumentTypeByIdExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getDocumentTypeByIdExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypeConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypeConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentTypeConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypeConfigurationResponseModel> {
        const response = await this.getDocumentTypeConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentTypeFolderByIdRaw(requestParameters: GetDocumentTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentTypeFolderById(requestParameters: GetDocumentTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderResponseModel> {
        const response = await this.getDocumentTypeFolderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDocumentTypeRaw(requestParameters: GetItemDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemDocumentType200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/document-type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemDocumentType200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemDocumentType(requestParameters: GetItemDocumentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemDocumentType200ResponseInner>> {
        const response = await this.getItemDocumentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDocumentTypeSearchRaw(requestParameters: GetItemDocumentTypeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelDocumentTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['isElement'] != null) {
            queryParameters['isElement'] = requestParameters['isElement'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/document-type/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelDocumentTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemDocumentTypeSearch(requestParameters: GetItemDocumentTypeSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelDocumentTypeItemResponseModel> {
        const response = await this.getItemDocumentTypeSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentTypeAncestorsRaw(requestParameters: GetTreeDocumentTypeAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeDocumentTypeAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document-type/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeDocumentTypeAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeDocumentTypeAncestors(requestParameters: GetTreeDocumentTypeAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeDocumentTypeAncestors200ResponseInner>> {
        const response = await this.getTreeDocumentTypeAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentTypeChildrenRaw(requestParameters: GetTreeDocumentTypeChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document-type/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDocumentTypeChildren(requestParameters: GetTreeDocumentTypeChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentTypeTreeItemResponseModel> {
        const response = await this.getTreeDocumentTypeChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentTypeRootRaw(requestParameters: GetTreeDocumentTypeRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document-type/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDocumentTypeRoot(requestParameters: GetTreeDocumentTypeRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentTypeTreeItemResponseModel> {
        const response = await this.getTreeDocumentTypeRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDocumentTypeRaw(requestParameters: PostDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentTypeRequestModelToJSON(requestParameters['createDocumentTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentType(requestParameters: PostDocumentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentTypeAvailableCompositionsRaw(requestParameters: PostDocumentTypeAvailableCompositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostDocumentTypeAvailableCompositions200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/available-compositions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentTypeCompositionRequestModelToJSON(requestParameters['documentTypeCompositionRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostDocumentTypeAvailableCompositions200ResponseInnerFromJSON));
    }

    /**
     */
    async postDocumentTypeAvailableCompositions(requestParameters: PostDocumentTypeAvailableCompositionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostDocumentTypeAvailableCompositions200ResponseInner>> {
        const response = await this.postDocumentTypeAvailableCompositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDocumentTypeByIdCopyRaw(requestParameters: PostDocumentTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDocumentTypeByIdCopy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/copy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyDocumentTypeRequestModelToJSON(requestParameters['copyDocumentTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentTypeByIdCopy(requestParameters: PostDocumentTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentTypeByIdCopyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentTypeFolderRaw(requestParameters: PostDocumentTypeFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/folder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestModelToJSON(requestParameters['createFolderRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentTypeFolder(requestParameters: PostDocumentTypeFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentTypeFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentTypeImportRaw(requestParameters: PostDocumentTypeImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportDocumentTypeRequestModelToJSON(requestParameters['importDocumentTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentTypeImport(requestParameters: PostDocumentTypeImportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentTypeImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentTypeByIdRaw(requestParameters: PutDocumentTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDocumentTypeRequestModelToJSON(requestParameters['updateDocumentTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentTypeById(requestParameters: PutDocumentTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentTypeByIdImportRaw(requestParameters: PutDocumentTypeByIdImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentTypeByIdImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/import`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportDocumentTypeRequestModelToJSON(requestParameters['importDocumentTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentTypeByIdImport(requestParameters: PutDocumentTypeByIdImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentTypeByIdImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentTypeByIdMoveRaw(requestParameters: PutDocumentTypeByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentTypeByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveDocumentTypeRequestModelToJSON(requestParameters['moveDocumentTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentTypeByIdMove(requestParameters: PutDocumentTypeByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentTypeByIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentTypeFolderByIdRaw(requestParameters: PutDocumentTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFolderResponseModelToJSON(requestParameters['updateFolderResponseModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentTypeFolderById(requestParameters: PutDocumentTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentTypeFolderByIdRaw(requestParameters, initOverrides);
    }

}
