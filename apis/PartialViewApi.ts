/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePartialViewFolderRequestModel,
  CreatePartialViewRequestModel,
  GetItemPartialView200ResponseInner,
  GetTreePartialViewAncestors200ResponseInner,
  NotificationHeaderModel,
  PagedFileSystemTreeItemPresentationModel,
  PagedPartialViewSnippetItemResponseModel,
  PartialViewFolderResponseModel,
  PartialViewResponseModel,
  PartialViewSnippetResponseModel,
  ProblemDetails,
  RenamePartialViewRequestModel,
  UpdatePartialViewRequestModel,
} from '../models/index';
import {
    CreatePartialViewFolderRequestModelFromJSON,
    CreatePartialViewFolderRequestModelToJSON,
    CreatePartialViewRequestModelFromJSON,
    CreatePartialViewRequestModelToJSON,
    GetItemPartialView200ResponseInnerFromJSON,
    GetItemPartialView200ResponseInnerToJSON,
    GetTreePartialViewAncestors200ResponseInnerFromJSON,
    GetTreePartialViewAncestors200ResponseInnerToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedFileSystemTreeItemPresentationModelFromJSON,
    PagedFileSystemTreeItemPresentationModelToJSON,
    PagedPartialViewSnippetItemResponseModelFromJSON,
    PagedPartialViewSnippetItemResponseModelToJSON,
    PartialViewFolderResponseModelFromJSON,
    PartialViewFolderResponseModelToJSON,
    PartialViewResponseModelFromJSON,
    PartialViewResponseModelToJSON,
    PartialViewSnippetResponseModelFromJSON,
    PartialViewSnippetResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RenamePartialViewRequestModelFromJSON,
    RenamePartialViewRequestModelToJSON,
    UpdatePartialViewRequestModelFromJSON,
    UpdatePartialViewRequestModelToJSON,
} from '../models/index';

export interface DeletePartialViewByPathRequest {
    path: string;
}

export interface DeletePartialViewFolderByPathRequest {
    path: string;
}

export interface GetItemPartialViewRequest {
    path?: Set<string>;
}

export interface GetPartialViewByPathRequest {
    path: string;
}

export interface GetPartialViewFolderByPathRequest {
    path: string;
}

export interface GetPartialViewSnippetRequest {
    skip?: number;
    take?: number;
}

export interface GetPartialViewSnippetByIdRequest {
    id: string;
}

export interface GetTreePartialViewAncestorsRequest {
    descendantPath?: string;
}

export interface GetTreePartialViewChildrenRequest {
    parentPath?: string;
    skip?: number;
    take?: number;
}

export interface GetTreePartialViewRootRequest {
    skip?: number;
    take?: number;
}

export interface PostPartialViewRequest {
    createPartialViewRequestModel?: CreatePartialViewRequestModel;
}

export interface PostPartialViewFolderRequest {
    createPartialViewFolderRequestModel?: CreatePartialViewFolderRequestModel;
}

export interface PutPartialViewByPathRequest {
    path: string;
    updatePartialViewRequestModel?: UpdatePartialViewRequestModel;
}

export interface PutPartialViewByPathRenameRequest {
    path: string;
    renamePartialViewRequestModel?: RenamePartialViewRequestModel;
}

/**
 * 
 */
export class PartialViewApi extends runtime.BaseAPI {

    /**
     */
    async deletePartialViewByPathRaw(requestParameters: DeletePartialViewByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling deletePartialViewByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePartialViewByPath(requestParameters: DeletePartialViewByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePartialViewByPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deletePartialViewFolderByPathRaw(requestParameters: DeletePartialViewFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling deletePartialViewFolderByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/folder/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePartialViewFolderByPath(requestParameters: DeletePartialViewFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePartialViewFolderByPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemPartialViewRaw(requestParameters: GetItemPartialViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemPartialView200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/partial-view`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemPartialView200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemPartialView(requestParameters: GetItemPartialViewRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemPartialView200ResponseInner>> {
        const response = await this.getItemPartialViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPartialViewByPathRaw(requestParameters: GetPartialViewByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartialViewResponseModel>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling getPartialViewByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartialViewResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getPartialViewByPath(requestParameters: GetPartialViewByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartialViewResponseModel> {
        const response = await this.getPartialViewByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPartialViewFolderByPathRaw(requestParameters: GetPartialViewFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartialViewFolderResponseModel>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling getPartialViewFolderByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/folder/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartialViewFolderResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getPartialViewFolderByPath(requestParameters: GetPartialViewFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartialViewFolderResponseModel> {
        const response = await this.getPartialViewFolderByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPartialViewSnippetRaw(requestParameters: GetPartialViewSnippetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPartialViewSnippetItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/snippet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPartialViewSnippetItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getPartialViewSnippet(requestParameters: GetPartialViewSnippetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPartialViewSnippetItemResponseModel> {
        const response = await this.getPartialViewSnippetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPartialViewSnippetByIdRaw(requestParameters: GetPartialViewSnippetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PartialViewSnippetResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPartialViewSnippetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/snippet/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PartialViewSnippetResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getPartialViewSnippetById(requestParameters: GetPartialViewSnippetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PartialViewSnippetResponseModel> {
        const response = await this.getPartialViewSnippetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreePartialViewAncestorsRaw(requestParameters: GetTreePartialViewAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreePartialViewAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantPath'] != null) {
            queryParameters['descendantPath'] = requestParameters['descendantPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/partial-view/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreePartialViewAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreePartialViewAncestors(requestParameters: GetTreePartialViewAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreePartialViewAncestors200ResponseInner>> {
        const response = await this.getTreePartialViewAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreePartialViewChildrenRaw(requestParameters: GetTreePartialViewChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedFileSystemTreeItemPresentationModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentPath'] != null) {
            queryParameters['parentPath'] = requestParameters['parentPath'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/partial-view/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedFileSystemTreeItemPresentationModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreePartialViewChildren(requestParameters: GetTreePartialViewChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedFileSystemTreeItemPresentationModel> {
        const response = await this.getTreePartialViewChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreePartialViewRootRaw(requestParameters: GetTreePartialViewRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedFileSystemTreeItemPresentationModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/partial-view/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedFileSystemTreeItemPresentationModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreePartialViewRoot(requestParameters: GetTreePartialViewRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedFileSystemTreeItemPresentationModel> {
        const response = await this.getTreePartialViewRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postPartialViewRaw(requestParameters: PostPartialViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePartialViewRequestModelToJSON(requestParameters['createPartialViewRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postPartialView(requestParameters: PostPartialViewRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPartialViewRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postPartialViewFolderRaw(requestParameters: PostPartialViewFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/folder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePartialViewFolderRequestModelToJSON(requestParameters['createPartialViewFolderRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postPartialViewFolder(requestParameters: PostPartialViewFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPartialViewFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putPartialViewByPathRaw(requestParameters: PutPartialViewByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling putPartialViewByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePartialViewRequestModelToJSON(requestParameters['updatePartialViewRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putPartialViewByPath(requestParameters: PutPartialViewByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putPartialViewByPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putPartialViewByPathRenameRaw(requestParameters: PutPartialViewByPathRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling putPartialViewByPathRename().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/partial-view/{path}/rename`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenamePartialViewRequestModelToJSON(requestParameters['renamePartialViewRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putPartialViewByPathRename(requestParameters: PutPartialViewByPathRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putPartialViewByPathRenameRaw(requestParameters, initOverrides);
    }

}
