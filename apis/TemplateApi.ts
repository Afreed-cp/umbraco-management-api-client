/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTemplateRequestModel,
  GetItemTemplate200ResponseInner,
  GetTreeDictionaryAncestors200ResponseInner,
  NotificationHeaderModel,
  PagedModelTemplateItemResponseModel,
  PagedNamedEntityTreeItemResponseModel,
  ProblemDetails,
  TemplateConfigurationResponseModel,
  TemplateQueryExecuteModel,
  TemplateQueryResultResponseModel,
  TemplateQuerySettingsResponseModel,
  TemplateResponseModel,
  UpdateTemplateRequestModel,
} from '../models/index';
import {
    CreateTemplateRequestModelFromJSON,
    CreateTemplateRequestModelToJSON,
    GetItemTemplate200ResponseInnerFromJSON,
    GetItemTemplate200ResponseInnerToJSON,
    GetTreeDictionaryAncestors200ResponseInnerFromJSON,
    GetTreeDictionaryAncestors200ResponseInnerToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedModelTemplateItemResponseModelFromJSON,
    PagedModelTemplateItemResponseModelToJSON,
    PagedNamedEntityTreeItemResponseModelFromJSON,
    PagedNamedEntityTreeItemResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TemplateConfigurationResponseModelFromJSON,
    TemplateConfigurationResponseModelToJSON,
    TemplateQueryExecuteModelFromJSON,
    TemplateQueryExecuteModelToJSON,
    TemplateQueryResultResponseModelFromJSON,
    TemplateQueryResultResponseModelToJSON,
    TemplateQuerySettingsResponseModelFromJSON,
    TemplateQuerySettingsResponseModelToJSON,
    TemplateResponseModelFromJSON,
    TemplateResponseModelToJSON,
    UpdateTemplateRequestModelFromJSON,
    UpdateTemplateRequestModelToJSON,
} from '../models/index';

export interface DeleteTemplateByIdRequest {
    id: string;
}

export interface GetItemTemplateRequest {
    id?: Set<string>;
}

export interface GetItemTemplateSearchRequest {
    query?: string;
    skip?: number;
    take?: number;
}

export interface GetTemplateByIdRequest {
    id: string;
}

export interface GetTreeTemplateAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeTemplateChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
}

export interface GetTreeTemplateRootRequest {
    skip?: number;
    take?: number;
}

export interface PostTemplateRequest {
    createTemplateRequestModel?: CreateTemplateRequestModel;
}

export interface PostTemplateQueryExecuteRequest {
    templateQueryExecuteModel?: TemplateQueryExecuteModel;
}

export interface PutTemplateByIdRequest {
    id: string;
    updateTemplateRequestModel?: UpdateTemplateRequestModel;
}

/**
 * 
 */
export class TemplateApi extends runtime.BaseAPI {

    /**
     */
    async deleteTemplateByIdRaw(requestParameters: DeleteTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTemplateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTemplateById(requestParameters: DeleteTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTemplateByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemTemplateRaw(requestParameters: GetItemTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemTemplate200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemTemplate200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemTemplate(requestParameters: GetItemTemplateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemTemplate200ResponseInner>> {
        const response = await this.getItemTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemTemplateSearchRaw(requestParameters: GetItemTemplateSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelTemplateItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/template/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelTemplateItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemTemplateSearch(requestParameters: GetItemTemplateSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelTemplateItemResponseModel> {
        const response = await this.getItemTemplateSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTemplateByIdRaw(requestParameters: GetTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTemplateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTemplateById(requestParameters: GetTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateResponseModel> {
        const response = await this.getTemplateByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTemplateConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTemplateConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateConfigurationResponseModel> {
        const response = await this.getTemplateConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTemplateQuerySettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateQuerySettingsResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template/query/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateQuerySettingsResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTemplateQuerySettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateQuerySettingsResponseModel> {
        const response = await this.getTemplateQuerySettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeTemplateAncestorsRaw(requestParameters: GetTreeTemplateAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeDictionaryAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/template/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeDictionaryAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeTemplateAncestors(requestParameters: GetTreeTemplateAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeDictionaryAncestors200ResponseInner>> {
        const response = await this.getTreeTemplateAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeTemplateChildrenRaw(requestParameters: GetTreeTemplateChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedNamedEntityTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/template/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedNamedEntityTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeTemplateChildren(requestParameters: GetTreeTemplateChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedNamedEntityTreeItemResponseModel> {
        const response = await this.getTreeTemplateChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeTemplateRootRaw(requestParameters: GetTreeTemplateRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedNamedEntityTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/template/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedNamedEntityTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeTemplateRoot(requestParameters: GetTreeTemplateRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedNamedEntityTreeItemResponseModel> {
        const response = await this.getTreeTemplateRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postTemplateRaw(requestParameters: PostTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTemplateRequestModelToJSON(requestParameters['createTemplateRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postTemplate(requestParameters: PostTemplateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postTemplateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postTemplateQueryExecuteRaw(requestParameters: PostTemplateQueryExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateQueryResultResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template/query/execute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateQueryExecuteModelToJSON(requestParameters['templateQueryExecuteModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateQueryResultResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async postTemplateQueryExecute(requestParameters: PostTemplateQueryExecuteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateQueryResultResponseModel> {
        const response = await this.postTemplateQueryExecuteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putTemplateByIdRaw(requestParameters: PutTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putTemplateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTemplateRequestModelToJSON(requestParameters['updateTemplateRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putTemplateById(requestParameters: PutTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putTemplateByIdRaw(requestParameters, initOverrides);
    }

}
