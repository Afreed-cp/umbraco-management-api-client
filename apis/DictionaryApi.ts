/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDictionaryItemRequestModel,
  DictionaryItemResponseModel,
  GetItemDictionary200ResponseInner,
  GetTreeDictionaryAncestors200ResponseInner,
  ImportDictionaryRequestModel,
  MoveDictionaryRequestModel,
  NotificationHeaderModel,
  PagedDictionaryOverviewResponseModel,
  PagedNamedEntityTreeItemResponseModel,
  ProblemDetails,
  UpdateDictionaryItemRequestModel,
} from '../models/index';
import {
    CreateDictionaryItemRequestModelFromJSON,
    CreateDictionaryItemRequestModelToJSON,
    DictionaryItemResponseModelFromJSON,
    DictionaryItemResponseModelToJSON,
    GetItemDictionary200ResponseInnerFromJSON,
    GetItemDictionary200ResponseInnerToJSON,
    GetTreeDictionaryAncestors200ResponseInnerFromJSON,
    GetTreeDictionaryAncestors200ResponseInnerToJSON,
    ImportDictionaryRequestModelFromJSON,
    ImportDictionaryRequestModelToJSON,
    MoveDictionaryRequestModelFromJSON,
    MoveDictionaryRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedDictionaryOverviewResponseModelFromJSON,
    PagedDictionaryOverviewResponseModelToJSON,
    PagedNamedEntityTreeItemResponseModelFromJSON,
    PagedNamedEntityTreeItemResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateDictionaryItemRequestModelFromJSON,
    UpdateDictionaryItemRequestModelToJSON,
} from '../models/index';

export interface DeleteDictionaryByIdRequest {
    id: string;
}

export interface GetDictionaryRequest {
    filter?: string;
    skip?: number;
    take?: number;
}

export interface GetDictionaryByIdRequest {
    id: string;
}

export interface GetDictionaryByIdExportRequest {
    id: string;
    includeChildren?: boolean;
}

export interface GetItemDictionaryRequest {
    id?: Set<string>;
}

export interface GetTreeDictionaryAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeDictionaryChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
}

export interface GetTreeDictionaryRootRequest {
    skip?: number;
    take?: number;
}

export interface PostDictionaryRequest {
    createDictionaryItemRequestModel?: CreateDictionaryItemRequestModel;
}

export interface PostDictionaryImportRequest {
    importDictionaryRequestModel?: ImportDictionaryRequestModel;
}

export interface PutDictionaryByIdRequest {
    id: string;
    updateDictionaryItemRequestModel?: UpdateDictionaryItemRequestModel;
}

export interface PutDictionaryByIdMoveRequest {
    id: string;
    moveDictionaryRequestModel?: MoveDictionaryRequestModel;
}

/**
 * 
 */
export class DictionaryApi extends runtime.BaseAPI {

    /**
     */
    async deleteDictionaryByIdRaw(requestParameters: DeleteDictionaryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDictionaryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDictionaryById(requestParameters: DeleteDictionaryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDictionaryByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getDictionaryRaw(requestParameters: GetDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDictionaryOverviewResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDictionaryOverviewResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDictionary(requestParameters: GetDictionaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDictionaryOverviewResponseModel> {
        const response = await this.getDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDictionaryByIdRaw(requestParameters: GetDictionaryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DictionaryItemResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDictionaryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionaryItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDictionaryById(requestParameters: GetDictionaryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DictionaryItemResponseModel> {
        const response = await this.getDictionaryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDictionaryByIdExportRaw(requestParameters: GetDictionaryByIdExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDictionaryByIdExport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeChildren'] != null) {
            queryParameters['includeChildren'] = requestParameters['includeChildren'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getDictionaryByIdExport(requestParameters: GetDictionaryByIdExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getDictionaryByIdExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDictionaryRaw(requestParameters: GetItemDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemDictionary200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/dictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemDictionary200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemDictionary(requestParameters: GetItemDictionaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemDictionary200ResponseInner>> {
        const response = await this.getItemDictionaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDictionaryAncestorsRaw(requestParameters: GetTreeDictionaryAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeDictionaryAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/dictionary/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeDictionaryAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeDictionaryAncestors(requestParameters: GetTreeDictionaryAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeDictionaryAncestors200ResponseInner>> {
        const response = await this.getTreeDictionaryAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDictionaryChildrenRaw(requestParameters: GetTreeDictionaryChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedNamedEntityTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/dictionary/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedNamedEntityTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDictionaryChildren(requestParameters: GetTreeDictionaryChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedNamedEntityTreeItemResponseModel> {
        const response = await this.getTreeDictionaryChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDictionaryRootRaw(requestParameters: GetTreeDictionaryRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedNamedEntityTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/dictionary/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedNamedEntityTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDictionaryRoot(requestParameters: GetTreeDictionaryRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedNamedEntityTreeItemResponseModel> {
        const response = await this.getTreeDictionaryRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDictionaryRaw(requestParameters: PostDictionaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDictionaryItemRequestModelToJSON(requestParameters['createDictionaryItemRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDictionary(requestParameters: PostDictionaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDictionaryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDictionaryImportRaw(requestParameters: PostDictionaryImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportDictionaryRequestModelToJSON(requestParameters['importDictionaryRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDictionaryImport(requestParameters: PostDictionaryImportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDictionaryImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDictionaryByIdRaw(requestParameters: PutDictionaryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDictionaryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDictionaryItemRequestModelToJSON(requestParameters['updateDictionaryItemRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDictionaryById(requestParameters: PutDictionaryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDictionaryByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDictionaryByIdMoveRaw(requestParameters: PutDictionaryByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDictionaryByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/dictionary/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveDictionaryRequestModelToJSON(requestParameters['moveDictionaryRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDictionaryByIdMove(requestParameters: PutDictionaryByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDictionaryByIdMoveRaw(requestParameters, initOverrides);
    }

}
