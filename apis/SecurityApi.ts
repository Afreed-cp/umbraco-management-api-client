/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationHeaderModel,
  ProblemDetails,
  ResetPasswordRequestModel,
  ResetPasswordTokenRequestModel,
  SecurityConfigurationResponseModel,
  VerifyResetPasswordResponseModel,
  VerifyResetPasswordTokenRequestModel,
} from '../models/index';
import {
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ResetPasswordRequestModelFromJSON,
    ResetPasswordRequestModelToJSON,
    ResetPasswordTokenRequestModelFromJSON,
    ResetPasswordTokenRequestModelToJSON,
    SecurityConfigurationResponseModelFromJSON,
    SecurityConfigurationResponseModelToJSON,
    VerifyResetPasswordResponseModelFromJSON,
    VerifyResetPasswordResponseModelToJSON,
    VerifyResetPasswordTokenRequestModelFromJSON,
    VerifyResetPasswordTokenRequestModelToJSON,
} from '../models/index';

export interface PostSecurityForgotPasswordRequest {
    resetPasswordRequestModel?: ResetPasswordRequestModel;
}

export interface PostSecurityForgotPasswordResetRequest {
    resetPasswordTokenRequestModel?: ResetPasswordTokenRequestModel;
}

export interface PostSecurityForgotPasswordVerifyRequest {
    verifyResetPasswordTokenRequestModel?: VerifyResetPasswordTokenRequestModel;
}

/**
 * 
 */
export class SecurityApi extends runtime.BaseAPI {

    /**
     */
    async getSecurityConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/security/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getSecurityConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityConfigurationResponseModel> {
        const response = await this.getSecurityConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postSecurityForgotPasswordRaw(requestParameters: PostSecurityForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/security/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestModelToJSON(requestParameters['resetPasswordRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postSecurityForgotPassword(requestParameters: PostSecurityForgotPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSecurityForgotPasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postSecurityForgotPasswordResetRaw(requestParameters: PostSecurityForgotPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/security/forgot-password/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordTokenRequestModelToJSON(requestParameters['resetPasswordTokenRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postSecurityForgotPasswordReset(requestParameters: PostSecurityForgotPasswordResetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSecurityForgotPasswordResetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postSecurityForgotPasswordVerifyRaw(requestParameters: PostSecurityForgotPasswordVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyResetPasswordResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/umbraco/management/api/v1/security/forgot-password/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyResetPasswordTokenRequestModelToJSON(requestParameters['verifyResetPasswordTokenRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyResetPasswordResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async postSecurityForgotPasswordVerify(requestParameters: PostSecurityForgotPasswordVerifyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyResetPasswordResponseModel> {
        const response = await this.postSecurityForgotPasswordVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
