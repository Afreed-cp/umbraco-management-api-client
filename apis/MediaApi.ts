/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMediaRequestModel,
  DirectionModel,
  GetImagingResizeUrls200ResponseInner,
  GetItemMedia200ResponseInner,
  GetTreeMediaAncestors200ResponseInner,
  MediaConfigurationResponseModel,
  MediaResponseModel,
  MoveMediaRequestModel,
  NotificationHeaderModel,
  PagedAuditLogResponseModel,
  PagedIReferenceResponseModel,
  PagedMediaCollectionResponseModel,
  PagedMediaRecycleBinItemResponseModel,
  PagedMediaTreeItemResponseModel,
  PagedModelMediaItemResponseModel,
  PagedReferenceByIdModel,
  ProblemDetails,
  ReferenceByIdModel,
  SortingRequestModel,
  UpdateMediaRequestModel,
} from '../models/index';
import {
    CreateMediaRequestModelFromJSON,
    CreateMediaRequestModelToJSON,
    DirectionModelFromJSON,
    DirectionModelToJSON,
    GetImagingResizeUrls200ResponseInnerFromJSON,
    GetImagingResizeUrls200ResponseInnerToJSON,
    GetItemMedia200ResponseInnerFromJSON,
    GetItemMedia200ResponseInnerToJSON,
    GetTreeMediaAncestors200ResponseInnerFromJSON,
    GetTreeMediaAncestors200ResponseInnerToJSON,
    MediaConfigurationResponseModelFromJSON,
    MediaConfigurationResponseModelToJSON,
    MediaResponseModelFromJSON,
    MediaResponseModelToJSON,
    MoveMediaRequestModelFromJSON,
    MoveMediaRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedAuditLogResponseModelFromJSON,
    PagedAuditLogResponseModelToJSON,
    PagedIReferenceResponseModelFromJSON,
    PagedIReferenceResponseModelToJSON,
    PagedMediaCollectionResponseModelFromJSON,
    PagedMediaCollectionResponseModelToJSON,
    PagedMediaRecycleBinItemResponseModelFromJSON,
    PagedMediaRecycleBinItemResponseModelToJSON,
    PagedMediaTreeItemResponseModelFromJSON,
    PagedMediaTreeItemResponseModelToJSON,
    PagedModelMediaItemResponseModelFromJSON,
    PagedModelMediaItemResponseModelToJSON,
    PagedReferenceByIdModelFromJSON,
    PagedReferenceByIdModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelToJSON,
    SortingRequestModelFromJSON,
    SortingRequestModelToJSON,
    UpdateMediaRequestModelFromJSON,
    UpdateMediaRequestModelToJSON,
} from '../models/index';

export interface DeleteMediaByIdRequest {
    id: string;
}

export interface DeleteRecycleBinMediaByIdRequest {
    id: string;
}

export interface GetCollectionMediaRequest {
    id?: string;
    dataTypeId?: string;
    orderBy?: string;
    orderDirection?: DirectionModel;
    filter?: string;
    skip?: number;
    take?: number;
}

export interface GetItemMediaRequest {
    id?: Set<string>;
}

export interface GetItemMediaSearchRequest {
    query?: string;
    trashed?: boolean;
    culture?: string;
    skip?: number;
    take?: number;
    parentId?: string;
    allowedMediaTypes?: Array<string>;
}

export interface GetMediaAreReferencedRequest {
    id?: Set<string>;
    skip?: number;
    take?: number;
}

export interface GetMediaByIdRequest {
    id: string;
}

export interface GetMediaByIdAuditLogRequest {
    id: string;
    orderDirection?: DirectionModel;
    sinceDate?: Date;
    skip?: number;
    take?: number;
}

export interface GetMediaByIdReferencedByRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetMediaByIdReferencedDescendantsRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetMediaUrlsRequest {
    id?: Set<string>;
}

export interface GetRecycleBinMediaByIdOriginalParentRequest {
    id: string;
}

export interface GetRecycleBinMediaChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
}

export interface GetRecycleBinMediaReferencedByRequest {
    skip?: number;
    take?: number;
}

export interface GetRecycleBinMediaRootRequest {
    skip?: number;
    take?: number;
}

export interface GetTreeMediaAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeMediaChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
    dataTypeId?: string;
}

export interface GetTreeMediaRootRequest {
    skip?: number;
    take?: number;
    dataTypeId?: string;
}

export interface PostMediaRequest {
    createMediaRequestModel?: CreateMediaRequestModel;
}

export interface PostMediaValidateRequest {
    createMediaRequestModel?: CreateMediaRequestModel;
}

export interface PutMediaByIdRequest {
    id: string;
    updateMediaRequestModel?: UpdateMediaRequestModel;
}

export interface PutMediaByIdMoveRequest {
    id: string;
    moveMediaRequestModel?: MoveMediaRequestModel;
}

export interface PutMediaByIdMoveToRecycleBinRequest {
    id: string;
}

export interface PutMediaByIdValidateRequest {
    id: string;
    updateMediaRequestModel?: UpdateMediaRequestModel;
}

export interface PutMediaSortRequest {
    sortingRequestModel?: SortingRequestModel;
}

export interface PutRecycleBinMediaByIdRestoreRequest {
    id: string;
    moveMediaRequestModel?: MoveMediaRequestModel;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     */
    async deleteMediaByIdRaw(requestParameters: DeleteMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMediaById(requestParameters: DeleteMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMediaByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteRecycleBinMediaRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecycleBinMedia(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecycleBinMediaRaw(initOverrides);
    }

    /**
     */
    async deleteRecycleBinMediaByIdRaw(requestParameters: DeleteRecycleBinMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRecycleBinMediaById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecycleBinMediaById(requestParameters: DeleteRecycleBinMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecycleBinMediaByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCollectionMediaRaw(requestParameters: GetCollectionMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaCollectionResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['dataTypeId'] != null) {
            queryParameters['dataTypeId'] = requestParameters['dataTypeId'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/collection/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaCollectionResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getCollectionMedia(requestParameters: GetCollectionMediaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaCollectionResponseModel> {
        const response = await this.getCollectionMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMediaRaw(requestParameters: GetItemMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemMedia200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemMedia200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemMedia(requestParameters: GetItemMediaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemMedia200ResponseInner>> {
        const response = await this.getItemMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMediaSearchRaw(requestParameters: GetItemMediaSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelMediaItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['trashed'] != null) {
            queryParameters['trashed'] = requestParameters['trashed'];
        }

        if (requestParameters['culture'] != null) {
            queryParameters['culture'] = requestParameters['culture'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['allowedMediaTypes'] != null) {
            queryParameters['allowedMediaTypes'] = requestParameters['allowedMediaTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/media/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelMediaItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemMediaSearch(requestParameters: GetItemMediaSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelMediaItemResponseModel> {
        const response = await this.getItemMediaSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaAreReferencedRaw(requestParameters: GetMediaAreReferencedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReferenceByIdModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/are-referenced`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaAreReferenced(requestParameters: GetMediaAreReferencedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReferenceByIdModel> {
        const response = await this.getMediaAreReferencedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaByIdRaw(requestParameters: GetMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaById(requestParameters: GetMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaResponseModel> {
        const response = await this.getMediaByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaByIdAuditLogRaw(requestParameters: GetMediaByIdAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAuditLogResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaByIdAuditLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['sinceDate'] != null) {
            queryParameters['sinceDate'] = (requestParameters['sinceDate'] as any).toISOString();
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}/audit-log`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAuditLogResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaByIdAuditLog(requestParameters: GetMediaByIdAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAuditLogResponseModel> {
        const response = await this.getMediaByIdAuditLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaByIdReferencedByRaw(requestParameters: GetMediaByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedIReferenceResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaByIdReferencedBy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}/referenced-by`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedIReferenceResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaByIdReferencedBy(requestParameters: GetMediaByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedIReferenceResponseModel> {
        const response = await this.getMediaByIdReferencedByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaByIdReferencedDescendantsRaw(requestParameters: GetMediaByIdReferencedDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReferenceByIdModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaByIdReferencedDescendants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}/referenced-descendants`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaByIdReferencedDescendants(requestParameters: GetMediaByIdReferencedDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReferenceByIdModel> {
        const response = await this.getMediaByIdReferencedDescendantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated
     */
    async getMediaConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     * @deprecated
     */
    async getMediaConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaConfigurationResponseModel> {
        const response = await this.getMediaConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaUrlsRaw(requestParameters: GetMediaUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetImagingResizeUrls200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/urls`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetImagingResizeUrls200ResponseInnerFromJSON));
    }

    /**
     */
    async getMediaUrls(requestParameters: GetMediaUrlsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetImagingResizeUrls200ResponseInner>> {
        const response = await this.getMediaUrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinMediaByIdOriginalParentRaw(requestParameters: GetRecycleBinMediaByIdOriginalParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceByIdModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRecycleBinMediaByIdOriginalParent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinMediaByIdOriginalParent(requestParameters: GetRecycleBinMediaByIdOriginalParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceByIdModel> {
        const response = await this.getRecycleBinMediaByIdOriginalParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinMediaChildrenRaw(requestParameters: GetRecycleBinMediaChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaRecycleBinItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaRecycleBinItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinMediaChildren(requestParameters: GetRecycleBinMediaChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaRecycleBinItemResponseModel> {
        const response = await this.getRecycleBinMediaChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinMediaReferencedByRaw(requestParameters: GetRecycleBinMediaReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedIReferenceResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media/referenced-by`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedIReferenceResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinMediaReferencedBy(requestParameters: GetRecycleBinMediaReferencedByRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedIReferenceResponseModel> {
        const response = await this.getRecycleBinMediaReferencedByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinMediaRootRaw(requestParameters: GetRecycleBinMediaRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaRecycleBinItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaRecycleBinItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinMediaRoot(requestParameters: GetRecycleBinMediaRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaRecycleBinItemResponseModel> {
        const response = await this.getRecycleBinMediaRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMediaAncestorsRaw(requestParameters: GetTreeMediaAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeMediaAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/media/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeMediaAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeMediaAncestors(requestParameters: GetTreeMediaAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeMediaAncestors200ResponseInner>> {
        const response = await this.getTreeMediaAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMediaChildrenRaw(requestParameters: GetTreeMediaChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['dataTypeId'] != null) {
            queryParameters['dataTypeId'] = requestParameters['dataTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/media/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeMediaChildren(requestParameters: GetTreeMediaChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaTreeItemResponseModel> {
        const response = await this.getTreeMediaChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMediaRootRaw(requestParameters: GetTreeMediaRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['dataTypeId'] != null) {
            queryParameters['dataTypeId'] = requestParameters['dataTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/media/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeMediaRoot(requestParameters: GetTreeMediaRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaTreeItemResponseModel> {
        const response = await this.getTreeMediaRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postMediaRaw(requestParameters: PostMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaRequestModelToJSON(requestParameters['createMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMedia(requestParameters: PostMediaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMediaRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postMediaValidateRaw(requestParameters: PostMediaValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaRequestModelToJSON(requestParameters['createMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMediaValidate(requestParameters: PostMediaValidateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMediaValidateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaByIdRaw(requestParameters: PutMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMediaRequestModelToJSON(requestParameters['updateMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaById(requestParameters: PutMediaByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaByIdMoveRaw(requestParameters: PutMediaByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveMediaRequestModelToJSON(requestParameters['moveMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaByIdMove(requestParameters: PutMediaByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaByIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaByIdMoveToRecycleBinRaw(requestParameters: PutMediaByIdMoveToRecycleBinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaByIdMoveToRecycleBin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}/move-to-recycle-bin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaByIdMoveToRecycleBin(requestParameters: PutMediaByIdMoveToRecycleBinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaByIdMoveToRecycleBinRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaByIdValidateRaw(requestParameters: PutMediaByIdValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaByIdValidate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/{id}/validate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMediaRequestModelToJSON(requestParameters['updateMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaByIdValidate(requestParameters: PutMediaByIdValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaByIdValidateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaSortRaw(requestParameters: PutMediaSortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media/sort`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SortingRequestModelToJSON(requestParameters['sortingRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaSort(requestParameters: PutMediaSortRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaSortRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putRecycleBinMediaByIdRestoreRaw(requestParameters: PutRecycleBinMediaByIdRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putRecycleBinMediaByIdRestore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/media/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveMediaRequestModelToJSON(requestParameters['moveMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putRecycleBinMediaByIdRestore(requestParameters: PutRecycleBinMediaByIdRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putRecycleBinMediaByIdRestoreRaw(requestParameters, initOverrides);
    }

}
