/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopyDataTypeRequestModel,
  CreateDataTypeRequestModel,
  CreateFolderRequestModel,
  DataTypeResponseModel,
  DatatypeConfigurationResponseModel,
  FolderResponseModel,
  GetDataTypeByIdReferences200ResponseInner,
  GetItemDataType200ResponseInner,
  GetTreeDataTypeAncestors200ResponseInner,
  MoveDataTypeRequestModel,
  NotificationHeaderModel,
  PagedDataTypeItemResponseModel,
  PagedDataTypeTreeItemResponseModel,
  PagedIReferenceResponseModel,
  PagedModelDataTypeItemResponseModel,
  ProblemDetails,
  UpdateDataTypeRequestModel,
  UpdateFolderResponseModel,
} from '../models/index';
import {
    CopyDataTypeRequestModelFromJSON,
    CopyDataTypeRequestModelToJSON,
    CreateDataTypeRequestModelFromJSON,
    CreateDataTypeRequestModelToJSON,
    CreateFolderRequestModelFromJSON,
    CreateFolderRequestModelToJSON,
    DataTypeResponseModelFromJSON,
    DataTypeResponseModelToJSON,
    DatatypeConfigurationResponseModelFromJSON,
    DatatypeConfigurationResponseModelToJSON,
    FolderResponseModelFromJSON,
    FolderResponseModelToJSON,
    GetDataTypeByIdReferences200ResponseInnerFromJSON,
    GetDataTypeByIdReferences200ResponseInnerToJSON,
    GetItemDataType200ResponseInnerFromJSON,
    GetItemDataType200ResponseInnerToJSON,
    GetTreeDataTypeAncestors200ResponseInnerFromJSON,
    GetTreeDataTypeAncestors200ResponseInnerToJSON,
    MoveDataTypeRequestModelFromJSON,
    MoveDataTypeRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedDataTypeItemResponseModelFromJSON,
    PagedDataTypeItemResponseModelToJSON,
    PagedDataTypeTreeItemResponseModelFromJSON,
    PagedDataTypeTreeItemResponseModelToJSON,
    PagedIReferenceResponseModelFromJSON,
    PagedIReferenceResponseModelToJSON,
    PagedModelDataTypeItemResponseModelFromJSON,
    PagedModelDataTypeItemResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateDataTypeRequestModelFromJSON,
    UpdateDataTypeRequestModelToJSON,
    UpdateFolderResponseModelFromJSON,
    UpdateFolderResponseModelToJSON,
} from '../models/index';

export interface DeleteDataTypeByIdRequest {
    id: string;
}

export interface DeleteDataTypeFolderByIdRequest {
    id: string;
}

export interface GetDataTypeByIdRequest {
    id: string;
}

export interface GetDataTypeByIdIsUsedRequest {
    id: string;
}

export interface GetDataTypeByIdReferencedByRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetDataTypeByIdReferencesRequest {
    id: string;
}

export interface GetDataTypeFolderByIdRequest {
    id: string;
}

export interface GetFilterDataTypeRequest {
    skip?: number;
    take?: number;
    name?: string;
    editorUiAlias?: string;
    editorAlias?: string;
}

export interface GetItemDataTypeRequest {
    id?: Set<string>;
}

export interface GetItemDataTypeSearchRequest {
    query?: string;
    skip?: number;
    take?: number;
}

export interface GetTreeDataTypeAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeDataTypeChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface GetTreeDataTypeRootRequest {
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface PostDataTypeRequest {
    createDataTypeRequestModel?: CreateDataTypeRequestModel;
}

export interface PostDataTypeByIdCopyRequest {
    id: string;
    copyDataTypeRequestModel?: CopyDataTypeRequestModel;
}

export interface PostDataTypeFolderRequest {
    createFolderRequestModel?: CreateFolderRequestModel;
}

export interface PutDataTypeByIdRequest {
    id: string;
    updateDataTypeRequestModel?: UpdateDataTypeRequestModel;
}

export interface PutDataTypeByIdMoveRequest {
    id: string;
    moveDataTypeRequestModel?: MoveDataTypeRequestModel;
}

export interface PutDataTypeFolderByIdRequest {
    id: string;
    updateFolderResponseModel?: UpdateFolderResponseModel;
}

/**
 * 
 */
export class DataTypeApi extends runtime.BaseAPI {

    /**
     */
    async deleteDataTypeByIdRaw(requestParameters: DeleteDataTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDataTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDataTypeById(requestParameters: DeleteDataTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDataTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteDataTypeFolderByIdRaw(requestParameters: DeleteDataTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDataTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDataTypeFolderById(requestParameters: DeleteDataTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDataTypeFolderByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getDataTypeByIdRaw(requestParameters: GetDataTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataTypeResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDataTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataTypeResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDataTypeById(requestParameters: GetDataTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataTypeResponseModel> {
        const response = await this.getDataTypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDataTypeByIdIsUsedRaw(requestParameters: GetDataTypeByIdIsUsedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDataTypeByIdIsUsed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}/is-used`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getDataTypeByIdIsUsed(requestParameters: GetDataTypeByIdIsUsedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getDataTypeByIdIsUsedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDataTypeByIdReferencedByRaw(requestParameters: GetDataTypeByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedIReferenceResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDataTypeByIdReferencedBy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}/referenced-by`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedIReferenceResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDataTypeByIdReferencedBy(requestParameters: GetDataTypeByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedIReferenceResponseModel> {
        const response = await this.getDataTypeByIdReferencedByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated
     */
    async getDataTypeByIdReferencesRaw(requestParameters: GetDataTypeByIdReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetDataTypeByIdReferences200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDataTypeByIdReferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}/references`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetDataTypeByIdReferences200ResponseInnerFromJSON));
    }

    /**
     * @deprecated
     */
    async getDataTypeByIdReferences(requestParameters: GetDataTypeByIdReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetDataTypeByIdReferences200ResponseInner>> {
        const response = await this.getDataTypeByIdReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDataTypeConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DatatypeConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatatypeConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDataTypeConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DatatypeConfigurationResponseModel> {
        const response = await this.getDataTypeConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDataTypeFolderByIdRaw(requestParameters: GetDataTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDataTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDataTypeFolderById(requestParameters: GetDataTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderResponseModel> {
        const response = await this.getDataTypeFolderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFilterDataTypeRaw(requestParameters: GetFilterDataTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDataTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['editorUiAlias'] != null) {
            queryParameters['editorUiAlias'] = requestParameters['editorUiAlias'];
        }

        if (requestParameters['editorAlias'] != null) {
            queryParameters['editorAlias'] = requestParameters['editorAlias'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/filter/data-type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDataTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getFilterDataType(requestParameters: GetFilterDataTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDataTypeItemResponseModel> {
        const response = await this.getFilterDataTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDataTypeRaw(requestParameters: GetItemDataTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemDataType200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/data-type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemDataType200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemDataType(requestParameters: GetItemDataTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemDataType200ResponseInner>> {
        const response = await this.getItemDataTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDataTypeSearchRaw(requestParameters: GetItemDataTypeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelDataTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/data-type/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelDataTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemDataTypeSearch(requestParameters: GetItemDataTypeSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelDataTypeItemResponseModel> {
        const response = await this.getItemDataTypeSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDataTypeAncestorsRaw(requestParameters: GetTreeDataTypeAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeDataTypeAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/data-type/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeDataTypeAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeDataTypeAncestors(requestParameters: GetTreeDataTypeAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeDataTypeAncestors200ResponseInner>> {
        const response = await this.getTreeDataTypeAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDataTypeChildrenRaw(requestParameters: GetTreeDataTypeChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDataTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/data-type/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDataTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDataTypeChildren(requestParameters: GetTreeDataTypeChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDataTypeTreeItemResponseModel> {
        const response = await this.getTreeDataTypeChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDataTypeRootRaw(requestParameters: GetTreeDataTypeRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDataTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/data-type/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDataTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDataTypeRoot(requestParameters: GetTreeDataTypeRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDataTypeTreeItemResponseModel> {
        const response = await this.getTreeDataTypeRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDataTypeRaw(requestParameters: PostDataTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDataTypeRequestModelToJSON(requestParameters['createDataTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDataType(requestParameters: PostDataTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDataTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDataTypeByIdCopyRaw(requestParameters: PostDataTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDataTypeByIdCopy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}/copy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyDataTypeRequestModelToJSON(requestParameters['copyDataTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDataTypeByIdCopy(requestParameters: PostDataTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDataTypeByIdCopyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDataTypeFolderRaw(requestParameters: PostDataTypeFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/folder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestModelToJSON(requestParameters['createFolderRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDataTypeFolder(requestParameters: PostDataTypeFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDataTypeFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDataTypeByIdRaw(requestParameters: PutDataTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDataTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDataTypeRequestModelToJSON(requestParameters['updateDataTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDataTypeById(requestParameters: PutDataTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDataTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDataTypeByIdMoveRaw(requestParameters: PutDataTypeByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDataTypeByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveDataTypeRequestModelToJSON(requestParameters['moveDataTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDataTypeByIdMove(requestParameters: PutDataTypeByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDataTypeByIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDataTypeFolderByIdRaw(requestParameters: PutDataTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDataTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/data-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFolderResponseModelToJSON(requestParameters['updateFolderResponseModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDataTypeFolderById(requestParameters: PutDataTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDataTypeFolderByIdRaw(requestParameters, initOverrides);
    }

}
