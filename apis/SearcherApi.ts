/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedSearchResultResponseModel,
  PagedSearcherResponseModel,
  ProblemDetails,
} from '../models/index';
import {
    PagedSearchResultResponseModelFromJSON,
    PagedSearchResultResponseModelToJSON,
    PagedSearcherResponseModelFromJSON,
    PagedSearcherResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface GetSearcherRequest {
    skip?: number;
    take?: number;
}

export interface GetSearcherBySearcherNameQueryRequest {
    searcherName: string;
    term?: string;
    skip?: number;
    take?: number;
}

/**
 * 
 */
export class SearcherApi extends runtime.BaseAPI {

    /**
     */
    async getSearcherRaw(requestParameters: GetSearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedSearcherResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/searcher`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedSearcherResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getSearcher(requestParameters: GetSearcherRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedSearcherResponseModel> {
        const response = await this.getSearcherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSearcherBySearcherNameQueryRaw(requestParameters: GetSearcherBySearcherNameQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedSearchResultResponseModel>> {
        if (requestParameters['searcherName'] == null) {
            throw new runtime.RequiredError(
                'searcherName',
                'Required parameter "searcherName" was null or undefined when calling getSearcherBySearcherNameQuery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['term'] != null) {
            queryParameters['term'] = requestParameters['term'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/searcher/{searcherName}/query`.replace(`{${"searcherName"}}`, encodeURIComponent(String(requestParameters['searcherName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedSearchResultResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getSearcherBySearcherNameQuery(requestParameters: GetSearcherBySearcherNameQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedSearchResultResponseModel> {
        const response = await this.getSearcherBySearcherNameQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
