/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationHeaderModel,
  ProblemDetails,
  TemporaryFileConfigurationResponseModel,
  TemporaryFileResponseModel,
} from '../models/index';
import {
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TemporaryFileConfigurationResponseModelFromJSON,
    TemporaryFileConfigurationResponseModelToJSON,
    TemporaryFileResponseModelFromJSON,
    TemporaryFileResponseModelToJSON,
} from '../models/index';

export interface DeleteTemporaryFileByIdRequest {
    id: string;
}

export interface GetTemporaryFileByIdRequest {
    id: string;
}

export interface PostTemporaryFileRequest {
    id: string;
    file: Blob;
}

/**
 * 
 */
export class TemporaryFileApi extends runtime.BaseAPI {

    /**
     */
    async deleteTemporaryFileByIdRaw(requestParameters: DeleteTemporaryFileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTemporaryFileById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/temporary-file/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTemporaryFileById(requestParameters: DeleteTemporaryFileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTemporaryFileByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getTemporaryFileByIdRaw(requestParameters: GetTemporaryFileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryFileResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTemporaryFileById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/temporary-file/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryFileResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTemporaryFileById(requestParameters: GetTemporaryFileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryFileResponseModel> {
        const response = await this.getTemporaryFileByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTemporaryFileConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryFileConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/temporary-file/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryFileConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTemporaryFileConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryFileConfigurationResponseModel> {
        const response = await this.getTemporaryFileConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postTemporaryFileRaw(requestParameters: PostTemporaryFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postTemporaryFile().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postTemporaryFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['id'] != null) {
            formParams.append('Id', requestParameters['id'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/temporary-file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postTemporaryFile(requestParameters: PostTemporaryFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postTemporaryFileRaw(requestParameters, initOverrides);
    }

}
