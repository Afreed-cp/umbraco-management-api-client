/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopyMediaTypeRequestModel,
  CreateFolderRequestModel,
  CreateMediaTypeRequestModel,
  FolderResponseModel,
  GetItemMediaType200ResponseInner,
  GetMediaTypeByIdCompositionReferences200ResponseInner,
  GetTreeMediaTypeAncestors200ResponseInner,
  ImportMediaTypeRequestModel,
  MediaTypeCompositionRequestModel,
  MediaTypeConfigurationResponseModel,
  MediaTypeResponseModel,
  MoveMediaTypeRequestModel,
  NotificationHeaderModel,
  PagedAllowedMediaTypeModel,
  PagedMediaTypeTreeItemResponseModel,
  PagedModelMediaTypeItemResponseModel,
  PostMediaTypeAvailableCompositions200ResponseInner,
  ProblemDetails,
  UpdateFolderResponseModel,
  UpdateMediaTypeRequestModel,
} from '../models/index';
import {
    CopyMediaTypeRequestModelFromJSON,
    CopyMediaTypeRequestModelToJSON,
    CreateFolderRequestModelFromJSON,
    CreateFolderRequestModelToJSON,
    CreateMediaTypeRequestModelFromJSON,
    CreateMediaTypeRequestModelToJSON,
    FolderResponseModelFromJSON,
    FolderResponseModelToJSON,
    GetItemMediaType200ResponseInnerFromJSON,
    GetItemMediaType200ResponseInnerToJSON,
    GetMediaTypeByIdCompositionReferences200ResponseInnerFromJSON,
    GetMediaTypeByIdCompositionReferences200ResponseInnerToJSON,
    GetTreeMediaTypeAncestors200ResponseInnerFromJSON,
    GetTreeMediaTypeAncestors200ResponseInnerToJSON,
    ImportMediaTypeRequestModelFromJSON,
    ImportMediaTypeRequestModelToJSON,
    MediaTypeCompositionRequestModelFromJSON,
    MediaTypeCompositionRequestModelToJSON,
    MediaTypeConfigurationResponseModelFromJSON,
    MediaTypeConfigurationResponseModelToJSON,
    MediaTypeResponseModelFromJSON,
    MediaTypeResponseModelToJSON,
    MoveMediaTypeRequestModelFromJSON,
    MoveMediaTypeRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedAllowedMediaTypeModelFromJSON,
    PagedAllowedMediaTypeModelToJSON,
    PagedMediaTypeTreeItemResponseModelFromJSON,
    PagedMediaTypeTreeItemResponseModelToJSON,
    PagedModelMediaTypeItemResponseModelFromJSON,
    PagedModelMediaTypeItemResponseModelToJSON,
    PostMediaTypeAvailableCompositions200ResponseInnerFromJSON,
    PostMediaTypeAvailableCompositions200ResponseInnerToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateFolderResponseModelFromJSON,
    UpdateFolderResponseModelToJSON,
    UpdateMediaTypeRequestModelFromJSON,
    UpdateMediaTypeRequestModelToJSON,
} from '../models/index';

export interface DeleteMediaTypeByIdRequest {
    id: string;
}

export interface DeleteMediaTypeFolderByIdRequest {
    id: string;
}

export interface GetItemMediaTypeRequest {
    id?: Set<string>;
}

export interface GetItemMediaTypeAllowedRequest {
    fileExtension?: string;
    skip?: number;
    take?: number;
}

export interface GetItemMediaTypeFoldersRequest {
    skip?: number;
    take?: number;
}

export interface GetItemMediaTypeSearchRequest {
    query?: string;
    skip?: number;
    take?: number;
}

export interface GetMediaTypeAllowedAtRootRequest {
    skip?: number;
    take?: number;
}

export interface GetMediaTypeByIdRequest {
    id: string;
}

export interface GetMediaTypeByIdAllowedChildrenRequest {
    id: string;
    parentContentKey?: string;
    skip?: number;
    take?: number;
}

export interface GetMediaTypeByIdCompositionReferencesRequest {
    id: string;
}

export interface GetMediaTypeByIdExportRequest {
    id: string;
}

export interface GetMediaTypeFolderByIdRequest {
    id: string;
}

export interface GetTreeMediaTypeAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeMediaTypeChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface GetTreeMediaTypeRootRequest {
    skip?: number;
    take?: number;
    foldersOnly?: boolean;
}

export interface PostMediaTypeRequest {
    createMediaTypeRequestModel?: CreateMediaTypeRequestModel;
}

export interface PostMediaTypeAvailableCompositionsRequest {
    mediaTypeCompositionRequestModel?: MediaTypeCompositionRequestModel;
}

export interface PostMediaTypeByIdCopyRequest {
    id: string;
    copyMediaTypeRequestModel?: CopyMediaTypeRequestModel;
}

export interface PostMediaTypeFolderRequest {
    createFolderRequestModel?: CreateFolderRequestModel;
}

export interface PostMediaTypeImportRequest {
    importMediaTypeRequestModel?: ImportMediaTypeRequestModel;
}

export interface PutMediaTypeByIdRequest {
    id: string;
    updateMediaTypeRequestModel?: UpdateMediaTypeRequestModel;
}

export interface PutMediaTypeByIdImportRequest {
    id: string;
    importMediaTypeRequestModel?: ImportMediaTypeRequestModel;
}

export interface PutMediaTypeByIdMoveRequest {
    id: string;
    moveMediaTypeRequestModel?: MoveMediaTypeRequestModel;
}

export interface PutMediaTypeFolderByIdRequest {
    id: string;
    updateFolderResponseModel?: UpdateFolderResponseModel;
}

/**
 * 
 */
export class MediaTypeApi extends runtime.BaseAPI {

    /**
     */
    async deleteMediaTypeByIdRaw(requestParameters: DeleteMediaTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMediaTypeById(requestParameters: DeleteMediaTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMediaTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteMediaTypeFolderByIdRaw(requestParameters: DeleteMediaTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMediaTypeFolderById(requestParameters: DeleteMediaTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMediaTypeFolderByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemMediaTypeRaw(requestParameters: GetItemMediaTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemMediaType200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/media-type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemMediaType200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemMediaType(requestParameters: GetItemMediaTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemMediaType200ResponseInner>> {
        const response = await this.getItemMediaTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMediaTypeAllowedRaw(requestParameters: GetItemMediaTypeAllowedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelMediaTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['fileExtension'] != null) {
            queryParameters['fileExtension'] = requestParameters['fileExtension'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/media-type/allowed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelMediaTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemMediaTypeAllowed(requestParameters: GetItemMediaTypeAllowedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelMediaTypeItemResponseModel> {
        const response = await this.getItemMediaTypeAllowedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMediaTypeFoldersRaw(requestParameters: GetItemMediaTypeFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelMediaTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/media-type/folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelMediaTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemMediaTypeFolders(requestParameters: GetItemMediaTypeFoldersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelMediaTypeItemResponseModel> {
        const response = await this.getItemMediaTypeFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemMediaTypeSearchRaw(requestParameters: GetItemMediaTypeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelMediaTypeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/media-type/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelMediaTypeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemMediaTypeSearch(requestParameters: GetItemMediaTypeSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelMediaTypeItemResponseModel> {
        const response = await this.getItemMediaTypeSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeAllowedAtRootRaw(requestParameters: GetMediaTypeAllowedAtRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAllowedMediaTypeModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/allowed-at-root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAllowedMediaTypeModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaTypeAllowedAtRoot(requestParameters: GetMediaTypeAllowedAtRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAllowedMediaTypeModel> {
        const response = await this.getMediaTypeAllowedAtRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeByIdRaw(requestParameters: GetMediaTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaTypeResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaTypeResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaTypeById(requestParameters: GetMediaTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaTypeResponseModel> {
        const response = await this.getMediaTypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeByIdAllowedChildrenRaw(requestParameters: GetMediaTypeByIdAllowedChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAllowedMediaTypeModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaTypeByIdAllowedChildren().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['parentContentKey'] != null) {
            queryParameters['parentContentKey'] = requestParameters['parentContentKey'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}/allowed-children`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAllowedMediaTypeModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaTypeByIdAllowedChildren(requestParameters: GetMediaTypeByIdAllowedChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAllowedMediaTypeModel> {
        const response = await this.getMediaTypeByIdAllowedChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeByIdCompositionReferencesRaw(requestParameters: GetMediaTypeByIdCompositionReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetMediaTypeByIdCompositionReferences200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaTypeByIdCompositionReferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}/composition-references`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetMediaTypeByIdCompositionReferences200ResponseInnerFromJSON));
    }

    /**
     */
    async getMediaTypeByIdCompositionReferences(requestParameters: GetMediaTypeByIdCompositionReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetMediaTypeByIdCompositionReferences200ResponseInner>> {
        const response = await this.getMediaTypeByIdCompositionReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeByIdExportRaw(requestParameters: GetMediaTypeByIdExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaTypeByIdExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getMediaTypeByIdExport(requestParameters: GetMediaTypeByIdExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getMediaTypeByIdExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaTypeConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaTypeConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaTypeConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaTypeConfigurationResponseModel> {
        const response = await this.getMediaTypeConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMediaTypeFolderByIdRaw(requestParameters: GetMediaTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getMediaTypeFolderById(requestParameters: GetMediaTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderResponseModel> {
        const response = await this.getMediaTypeFolderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMediaTypeAncestorsRaw(requestParameters: GetTreeMediaTypeAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeMediaTypeAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/media-type/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeMediaTypeAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeMediaTypeAncestors(requestParameters: GetTreeMediaTypeAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeMediaTypeAncestors200ResponseInner>> {
        const response = await this.getTreeMediaTypeAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMediaTypeChildrenRaw(requestParameters: GetTreeMediaTypeChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/media-type/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeMediaTypeChildren(requestParameters: GetTreeMediaTypeChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaTypeTreeItemResponseModel> {
        const response = await this.getTreeMediaTypeChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeMediaTypeRootRaw(requestParameters: GetTreeMediaTypeRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedMediaTypeTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['foldersOnly'] != null) {
            queryParameters['foldersOnly'] = requestParameters['foldersOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/media-type/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedMediaTypeTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeMediaTypeRoot(requestParameters: GetTreeMediaTypeRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedMediaTypeTreeItemResponseModel> {
        const response = await this.getTreeMediaTypeRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postMediaTypeRaw(requestParameters: PostMediaTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaTypeRequestModelToJSON(requestParameters['createMediaTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMediaType(requestParameters: PostMediaTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMediaTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postMediaTypeAvailableCompositionsRaw(requestParameters: PostMediaTypeAvailableCompositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostMediaTypeAvailableCompositions200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/available-compositions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaTypeCompositionRequestModelToJSON(requestParameters['mediaTypeCompositionRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostMediaTypeAvailableCompositions200ResponseInnerFromJSON));
    }

    /**
     */
    async postMediaTypeAvailableCompositions(requestParameters: PostMediaTypeAvailableCompositionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostMediaTypeAvailableCompositions200ResponseInner>> {
        const response = await this.postMediaTypeAvailableCompositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postMediaTypeByIdCopyRaw(requestParameters: PostMediaTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postMediaTypeByIdCopy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}/copy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyMediaTypeRequestModelToJSON(requestParameters['copyMediaTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMediaTypeByIdCopy(requestParameters: PostMediaTypeByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMediaTypeByIdCopyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postMediaTypeFolderRaw(requestParameters: PostMediaTypeFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/folder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestModelToJSON(requestParameters['createFolderRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMediaTypeFolder(requestParameters: PostMediaTypeFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMediaTypeFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postMediaTypeImportRaw(requestParameters: PostMediaTypeImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportMediaTypeRequestModelToJSON(requestParameters['importMediaTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMediaTypeImport(requestParameters: PostMediaTypeImportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMediaTypeImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaTypeByIdRaw(requestParameters: PutMediaTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMediaTypeRequestModelToJSON(requestParameters['updateMediaTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaTypeById(requestParameters: PutMediaTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaTypeByIdImportRaw(requestParameters: PutMediaTypeByIdImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaTypeByIdImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}/import`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImportMediaTypeRequestModelToJSON(requestParameters['importMediaTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaTypeByIdImport(requestParameters: PutMediaTypeByIdImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaTypeByIdImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaTypeByIdMoveRaw(requestParameters: PutMediaTypeByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaTypeByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveMediaTypeRequestModelToJSON(requestParameters['moveMediaTypeRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaTypeByIdMove(requestParameters: PutMediaTypeByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaTypeByIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putMediaTypeFolderByIdRaw(requestParameters: PutMediaTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putMediaTypeFolderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/media-type/folder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFolderResponseModelToJSON(requestParameters['updateFolderResponseModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putMediaTypeFolderById(requestParameters: PutMediaTypeFolderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMediaTypeFolderByIdRaw(requestParameters, initOverrides);
    }

}
