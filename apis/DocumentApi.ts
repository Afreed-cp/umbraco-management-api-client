/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopyDocumentRequestModel,
  CreateDocumentRequestModel,
  DirectionModel,
  DocumentConfigurationResponseModel,
  DocumentResponseModel,
  DomainsResponseModel,
  GetDocumentByIdNotifications200ResponseInner,
  GetDocumentUrls200ResponseInner,
  GetItemDocument200ResponseInner,
  GetTreeDocumentAncestors200ResponseInner,
  MoveDocumentRequestModel,
  MoveMediaRequestModel,
  NotificationHeaderModel,
  PagedAuditLogResponseModel,
  PagedDocumentCollectionResponseModel,
  PagedDocumentRecycleBinItemResponseModel,
  PagedDocumentTreeItemResponseModel,
  PagedIReferenceResponseModel,
  PagedModelDocumentItemResponseModel,
  PagedReferenceByIdModel,
  ProblemDetails,
  PublicAccessRequestModel,
  PublicAccessResponseModel,
  PublishDocumentRequestModel,
  PublishDocumentWithDescendantsRequestModel,
  PublishWithDescendantsResultModel,
  PublishedDocumentResponseModel,
  ReferenceByIdModel,
  SortingRequestModel,
  UnpublishDocumentRequestModel,
  UpdateDocumentNotificationsRequestModel,
  UpdateDocumentRequestModel,
  UpdateDomainsRequestModel,
  ValidateUpdateDocumentRequestModel,
} from '../models/index';
import {
    CopyDocumentRequestModelFromJSON,
    CopyDocumentRequestModelToJSON,
    CreateDocumentRequestModelFromJSON,
    CreateDocumentRequestModelToJSON,
    DirectionModelFromJSON,
    DirectionModelToJSON,
    DocumentConfigurationResponseModelFromJSON,
    DocumentConfigurationResponseModelToJSON,
    DocumentResponseModelFromJSON,
    DocumentResponseModelToJSON,
    DomainsResponseModelFromJSON,
    DomainsResponseModelToJSON,
    GetDocumentByIdNotifications200ResponseInnerFromJSON,
    GetDocumentByIdNotifications200ResponseInnerToJSON,
    GetDocumentUrls200ResponseInnerFromJSON,
    GetDocumentUrls200ResponseInnerToJSON,
    GetItemDocument200ResponseInnerFromJSON,
    GetItemDocument200ResponseInnerToJSON,
    GetTreeDocumentAncestors200ResponseInnerFromJSON,
    GetTreeDocumentAncestors200ResponseInnerToJSON,
    MoveDocumentRequestModelFromJSON,
    MoveDocumentRequestModelToJSON,
    MoveMediaRequestModelFromJSON,
    MoveMediaRequestModelToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedAuditLogResponseModelFromJSON,
    PagedAuditLogResponseModelToJSON,
    PagedDocumentCollectionResponseModelFromJSON,
    PagedDocumentCollectionResponseModelToJSON,
    PagedDocumentRecycleBinItemResponseModelFromJSON,
    PagedDocumentRecycleBinItemResponseModelToJSON,
    PagedDocumentTreeItemResponseModelFromJSON,
    PagedDocumentTreeItemResponseModelToJSON,
    PagedIReferenceResponseModelFromJSON,
    PagedIReferenceResponseModelToJSON,
    PagedModelDocumentItemResponseModelFromJSON,
    PagedModelDocumentItemResponseModelToJSON,
    PagedReferenceByIdModelFromJSON,
    PagedReferenceByIdModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    PublicAccessRequestModelFromJSON,
    PublicAccessRequestModelToJSON,
    PublicAccessResponseModelFromJSON,
    PublicAccessResponseModelToJSON,
    PublishDocumentRequestModelFromJSON,
    PublishDocumentRequestModelToJSON,
    PublishDocumentWithDescendantsRequestModelFromJSON,
    PublishDocumentWithDescendantsRequestModelToJSON,
    PublishWithDescendantsResultModelFromJSON,
    PublishWithDescendantsResultModelToJSON,
    PublishedDocumentResponseModelFromJSON,
    PublishedDocumentResponseModelToJSON,
    ReferenceByIdModelFromJSON,
    ReferenceByIdModelToJSON,
    SortingRequestModelFromJSON,
    SortingRequestModelToJSON,
    UnpublishDocumentRequestModelFromJSON,
    UnpublishDocumentRequestModelToJSON,
    UpdateDocumentNotificationsRequestModelFromJSON,
    UpdateDocumentNotificationsRequestModelToJSON,
    UpdateDocumentRequestModelFromJSON,
    UpdateDocumentRequestModelToJSON,
    UpdateDomainsRequestModelFromJSON,
    UpdateDomainsRequestModelToJSON,
    ValidateUpdateDocumentRequestModelFromJSON,
    ValidateUpdateDocumentRequestModelToJSON,
} from '../models/index';

export interface DeleteDocumentByIdRequest {
    id: string;
}

export interface DeleteDocumentByIdPublicAccessRequest {
    id: string;
}

export interface DeleteRecycleBinDocumentByIdRequest {
    id: string;
}

export interface GetCollectionDocumentByIdRequest {
    id: string;
    dataTypeId?: string;
    orderBy?: string;
    orderCulture?: string;
    orderDirection?: DirectionModel;
    filter?: string;
    skip?: number;
    take?: number;
}

export interface GetDocumentAreReferencedRequest {
    id?: Set<string>;
    skip?: number;
    take?: number;
}

export interface GetDocumentByIdRequest {
    id: string;
}

export interface GetDocumentByIdAuditLogRequest {
    id: string;
    orderDirection?: DirectionModel;
    sinceDate?: Date;
    skip?: number;
    take?: number;
}

export interface GetDocumentByIdDomainsRequest {
    id: string;
}

export interface GetDocumentByIdNotificationsRequest {
    id: string;
}

export interface GetDocumentByIdPublicAccessRequest {
    id: string;
}

export interface GetDocumentByIdPublishWithDescendantsResultByTaskIdRequest {
    id: string;
    taskId: string;
}

export interface GetDocumentByIdPublishedRequest {
    id: string;
}

export interface GetDocumentByIdReferencedByRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetDocumentByIdReferencedDescendantsRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetDocumentUrlsRequest {
    id?: Set<string>;
}

export interface GetItemDocumentRequest {
    id?: Set<string>;
}

export interface GetItemDocumentSearchRequest {
    query?: string;
    trashed?: boolean;
    culture?: string;
    skip?: number;
    take?: number;
    parentId?: string;
    allowedDocumentTypes?: Array<string>;
}

export interface GetRecycleBinDocumentByIdOriginalParentRequest {
    id: string;
}

export interface GetRecycleBinDocumentChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
}

export interface GetRecycleBinDocumentReferencedByRequest {
    skip?: number;
    take?: number;
}

export interface GetRecycleBinDocumentRootRequest {
    skip?: number;
    take?: number;
}

export interface GetTreeDocumentAncestorsRequest {
    descendantId?: string;
}

export interface GetTreeDocumentChildrenRequest {
    parentId?: string;
    skip?: number;
    take?: number;
    dataTypeId?: string;
}

export interface GetTreeDocumentRootRequest {
    skip?: number;
    take?: number;
    dataTypeId?: string;
}

export interface PostDocumentRequest {
    createDocumentRequestModel?: CreateDocumentRequestModel;
}

export interface PostDocumentByIdCopyRequest {
    id: string;
    copyDocumentRequestModel?: CopyDocumentRequestModel;
}

export interface PostDocumentByIdPublicAccessRequest {
    id: string;
    publicAccessRequestModel?: PublicAccessRequestModel;
}

export interface PostDocumentValidateRequest {
    createDocumentRequestModel?: CreateDocumentRequestModel;
}

export interface PutDocumentByIdRequest {
    id: string;
    updateDocumentRequestModel?: UpdateDocumentRequestModel;
}

export interface PutDocumentByIdDomainsRequest {
    id: string;
    updateDomainsRequestModel?: UpdateDomainsRequestModel;
}

export interface PutDocumentByIdMoveRequest {
    id: string;
    moveDocumentRequestModel?: MoveDocumentRequestModel;
}

export interface PutDocumentByIdMoveToRecycleBinRequest {
    id: string;
}

export interface PutDocumentByIdNotificationsRequest {
    id: string;
    updateDocumentNotificationsRequestModel?: UpdateDocumentNotificationsRequestModel;
}

export interface PutDocumentByIdPublicAccessRequest {
    id: string;
    publicAccessRequestModel?: PublicAccessRequestModel;
}

export interface PutDocumentByIdPublishRequest {
    id: string;
    publishDocumentRequestModel?: PublishDocumentRequestModel;
}

export interface PutDocumentByIdPublishWithDescendantsRequest {
    id: string;
    publishDocumentWithDescendantsRequestModel?: PublishDocumentWithDescendantsRequestModel;
}

export interface PutDocumentByIdUnpublishRequest {
    id: string;
    unpublishDocumentRequestModel?: UnpublishDocumentRequestModel;
}

export interface PutDocumentSortRequest {
    sortingRequestModel?: SortingRequestModel;
}

export interface PutRecycleBinDocumentByIdRestoreRequest {
    id: string;
    moveMediaRequestModel?: MoveMediaRequestModel;
}

export interface PutUmbracoManagementApiV11DocumentByIdValidate11Request {
    id: string;
    validateUpdateDocumentRequestModel?: ValidateUpdateDocumentRequestModel;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     */
    async deleteDocumentByIdRaw(requestParameters: DeleteDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDocumentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDocumentById(requestParameters: DeleteDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteDocumentByIdPublicAccessRaw(requestParameters: DeleteDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDocumentByIdPublicAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/public-access`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDocumentByIdPublicAccess(requestParameters: DeleteDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentByIdPublicAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteRecycleBinDocumentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecycleBinDocument(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecycleBinDocumentRaw(initOverrides);
    }

    /**
     */
    async deleteRecycleBinDocumentByIdRaw(requestParameters: DeleteRecycleBinDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRecycleBinDocumentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecycleBinDocumentById(requestParameters: DeleteRecycleBinDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecycleBinDocumentByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCollectionDocumentByIdRaw(requestParameters: GetCollectionDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentCollectionResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCollectionDocumentById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dataTypeId'] != null) {
            queryParameters['dataTypeId'] = requestParameters['dataTypeId'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderCulture'] != null) {
            queryParameters['orderCulture'] = requestParameters['orderCulture'];
        }

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/collection/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentCollectionResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getCollectionDocumentById(requestParameters: GetCollectionDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentCollectionResponseModel> {
        const response = await this.getCollectionDocumentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentAreReferencedRaw(requestParameters: GetDocumentAreReferencedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReferenceByIdModel>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/are-referenced`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentAreReferenced(requestParameters: GetDocumentAreReferencedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReferenceByIdModel> {
        const response = await this.getDocumentAreReferencedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdRaw(requestParameters: GetDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentById(requestParameters: GetDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentResponseModel> {
        const response = await this.getDocumentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdAuditLogRaw(requestParameters: GetDocumentByIdAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAuditLogResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdAuditLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orderDirection'] != null) {
            queryParameters['orderDirection'] = requestParameters['orderDirection'];
        }

        if (requestParameters['sinceDate'] != null) {
            queryParameters['sinceDate'] = (requestParameters['sinceDate'] as any).toISOString();
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/audit-log`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAuditLogResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdAuditLog(requestParameters: GetDocumentByIdAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAuditLogResponseModel> {
        const response = await this.getDocumentByIdAuditLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdDomainsRaw(requestParameters: GetDocumentByIdDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainsResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdDomains().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainsResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdDomains(requestParameters: GetDocumentByIdDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainsResponseModel> {
        const response = await this.getDocumentByIdDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdNotificationsRaw(requestParameters: GetDocumentByIdNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetDocumentByIdNotifications200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/notifications`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetDocumentByIdNotifications200ResponseInnerFromJSON));
    }

    /**
     */
    async getDocumentByIdNotifications(requestParameters: GetDocumentByIdNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetDocumentByIdNotifications200ResponseInner>> {
        const response = await this.getDocumentByIdNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdPublicAccessRaw(requestParameters: GetDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicAccessResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdPublicAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/public-access`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicAccessResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdPublicAccess(requestParameters: GetDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicAccessResponseModel> {
        const response = await this.getDocumentByIdPublicAccessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdPublishWithDescendantsResultByTaskIdRaw(requestParameters: GetDocumentByIdPublishWithDescendantsResultByTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishWithDescendantsResultModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdPublishWithDescendantsResultByTaskId().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getDocumentByIdPublishWithDescendantsResultByTaskId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/publish-with-descendants/result/{taskId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishWithDescendantsResultModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdPublishWithDescendantsResultByTaskId(requestParameters: GetDocumentByIdPublishWithDescendantsResultByTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishWithDescendantsResultModel> {
        const response = await this.getDocumentByIdPublishWithDescendantsResultByTaskIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdPublishedRaw(requestParameters: GetDocumentByIdPublishedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishedDocumentResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdPublished().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/published`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishedDocumentResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdPublished(requestParameters: GetDocumentByIdPublishedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishedDocumentResponseModel> {
        const response = await this.getDocumentByIdPublishedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdReferencedByRaw(requestParameters: GetDocumentByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedIReferenceResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdReferencedBy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/referenced-by`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedIReferenceResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdReferencedBy(requestParameters: GetDocumentByIdReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedIReferenceResponseModel> {
        const response = await this.getDocumentByIdReferencedByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentByIdReferencedDescendantsRaw(requestParameters: GetDocumentByIdReferencedDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReferenceByIdModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDocumentByIdReferencedDescendants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/referenced-descendants`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentByIdReferencedDescendants(requestParameters: GetDocumentByIdReferencedDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReferenceByIdModel> {
        const response = await this.getDocumentByIdReferencedDescendantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentConfigurationResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentConfigurationResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getDocumentConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentConfigurationResponseModel> {
        const response = await this.getDocumentConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDocumentUrlsRaw(requestParameters: GetDocumentUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetDocumentUrls200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/urls`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetDocumentUrls200ResponseInnerFromJSON));
    }

    /**
     */
    async getDocumentUrls(requestParameters: GetDocumentUrlsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetDocumentUrls200ResponseInner>> {
        const response = await this.getDocumentUrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDocumentRaw(requestParameters: GetItemDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemDocument200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/document`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemDocument200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemDocument(requestParameters: GetItemDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemDocument200ResponseInner>> {
        const response = await this.getItemDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemDocumentSearchRaw(requestParameters: GetItemDocumentSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelDocumentItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['trashed'] != null) {
            queryParameters['trashed'] = requestParameters['trashed'];
        }

        if (requestParameters['culture'] != null) {
            queryParameters['culture'] = requestParameters['culture'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['allowedDocumentTypes'] != null) {
            queryParameters['allowedDocumentTypes'] = requestParameters['allowedDocumentTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/document/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelDocumentItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getItemDocumentSearch(requestParameters: GetItemDocumentSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelDocumentItemResponseModel> {
        const response = await this.getItemDocumentSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinDocumentByIdOriginalParentRaw(requestParameters: GetRecycleBinDocumentByIdOriginalParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceByIdModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRecycleBinDocumentByIdOriginalParent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceByIdModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinDocumentByIdOriginalParent(requestParameters: GetRecycleBinDocumentByIdOriginalParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceByIdModel> {
        const response = await this.getRecycleBinDocumentByIdOriginalParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinDocumentChildrenRaw(requestParameters: GetRecycleBinDocumentChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentRecycleBinItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentRecycleBinItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinDocumentChildren(requestParameters: GetRecycleBinDocumentChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentRecycleBinItemResponseModel> {
        const response = await this.getRecycleBinDocumentChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinDocumentReferencedByRaw(requestParameters: GetRecycleBinDocumentReferencedByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedIReferenceResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document/referenced-by`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedIReferenceResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinDocumentReferencedBy(requestParameters: GetRecycleBinDocumentReferencedByRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedIReferenceResponseModel> {
        const response = await this.getRecycleBinDocumentReferencedByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecycleBinDocumentRootRaw(requestParameters: GetRecycleBinDocumentRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentRecycleBinItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentRecycleBinItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getRecycleBinDocumentRoot(requestParameters: GetRecycleBinDocumentRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentRecycleBinItemResponseModel> {
        const response = await this.getRecycleBinDocumentRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentAncestorsRaw(requestParameters: GetTreeDocumentAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreeDocumentAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantId'] != null) {
            queryParameters['descendantId'] = requestParameters['descendantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreeDocumentAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeDocumentAncestors(requestParameters: GetTreeDocumentAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreeDocumentAncestors200ResponseInner>> {
        const response = await this.getTreeDocumentAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentChildrenRaw(requestParameters: GetTreeDocumentChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['dataTypeId'] != null) {
            queryParameters['dataTypeId'] = requestParameters['dataTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDocumentChildren(requestParameters: GetTreeDocumentChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentTreeItemResponseModel> {
        const response = await this.getTreeDocumentChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeDocumentRootRaw(requestParameters: GetTreeDocumentRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDocumentTreeItemResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['dataTypeId'] != null) {
            queryParameters['dataTypeId'] = requestParameters['dataTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/document/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedDocumentTreeItemResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeDocumentRoot(requestParameters: GetTreeDocumentRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDocumentTreeItemResponseModel> {
        const response = await this.getTreeDocumentRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postDocumentRaw(requestParameters: PostDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentRequestModelToJSON(requestParameters['createDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocument(requestParameters: PostDocumentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentByIdCopyRaw(requestParameters: PostDocumentByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDocumentByIdCopy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/copy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyDocumentRequestModelToJSON(requestParameters['copyDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentByIdCopy(requestParameters: PostDocumentByIdCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentByIdCopyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentByIdPublicAccessRaw(requestParameters: PostDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDocumentByIdPublicAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/public-access`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicAccessRequestModelToJSON(requestParameters['publicAccessRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentByIdPublicAccess(requestParameters: PostDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentByIdPublicAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postDocumentValidateRaw(requestParameters: PostDocumentValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentRequestModelToJSON(requestParameters['createDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postDocumentValidate(requestParameters: PostDocumentValidateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDocumentValidateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdRaw(requestParameters: PutDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDocumentRequestModelToJSON(requestParameters['updateDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentById(requestParameters: PutDocumentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdDomainsRaw(requestParameters: PutDocumentByIdDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdDomains().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDomainsRequestModelToJSON(requestParameters['updateDomainsRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdDomains(requestParameters: PutDocumentByIdDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdDomainsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdMoveRaw(requestParameters: PutDocumentByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveDocumentRequestModelToJSON(requestParameters['moveDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdMove(requestParameters: PutDocumentByIdMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdMoveToRecycleBinRaw(requestParameters: PutDocumentByIdMoveToRecycleBinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdMoveToRecycleBin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/move-to-recycle-bin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdMoveToRecycleBin(requestParameters: PutDocumentByIdMoveToRecycleBinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdMoveToRecycleBinRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdNotificationsRaw(requestParameters: PutDocumentByIdNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/notifications`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDocumentNotificationsRequestModelToJSON(requestParameters['updateDocumentNotificationsRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdNotifications(requestParameters: PutDocumentByIdNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdPublicAccessRaw(requestParameters: PutDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdPublicAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/public-access`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PublicAccessRequestModelToJSON(requestParameters['publicAccessRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdPublicAccess(requestParameters: PutDocumentByIdPublicAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdPublicAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdPublishRaw(requestParameters: PutDocumentByIdPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdPublish().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/publish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PublishDocumentRequestModelToJSON(requestParameters['publishDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdPublish(requestParameters: PutDocumentByIdPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdPublishRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentByIdPublishWithDescendantsRaw(requestParameters: PutDocumentByIdPublishWithDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishWithDescendantsResultModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdPublishWithDescendants().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/publish-with-descendants`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PublishDocumentWithDescendantsRequestModelToJSON(requestParameters['publishDocumentWithDescendantsRequestModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishWithDescendantsResultModelFromJSON(jsonValue));
    }

    /**
     */
    async putDocumentByIdPublishWithDescendants(requestParameters: PutDocumentByIdPublishWithDescendantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishWithDescendantsResultModel> {
        const response = await this.putDocumentByIdPublishWithDescendantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putDocumentByIdUnpublishRaw(requestParameters: PutDocumentByIdUnpublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDocumentByIdUnpublish().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/{id}/unpublish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UnpublishDocumentRequestModelToJSON(requestParameters['unpublishDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentByIdUnpublish(requestParameters: PutDocumentByIdUnpublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentByIdUnpublishRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putDocumentSortRaw(requestParameters: PutDocumentSortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/document/sort`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SortingRequestModelToJSON(requestParameters['sortingRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putDocumentSort(requestParameters: PutDocumentSortRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDocumentSortRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putRecycleBinDocumentByIdRestoreRaw(requestParameters: PutRecycleBinDocumentByIdRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putRecycleBinDocumentByIdRestore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/recycle-bin/document/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveMediaRequestModelToJSON(requestParameters['moveMediaRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putRecycleBinDocumentByIdRestore(requestParameters: PutRecycleBinDocumentByIdRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putRecycleBinDocumentByIdRestoreRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putUmbracoManagementApiV11DocumentByIdValidate11Raw(requestParameters: PutUmbracoManagementApiV11DocumentByIdValidate11Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putUmbracoManagementApiV11DocumentByIdValidate11().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1.1/document/{id}/validate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateUpdateDocumentRequestModelToJSON(requestParameters['validateUpdateDocumentRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putUmbracoManagementApiV11DocumentByIdValidate11(requestParameters: PutUmbracoManagementApiV11DocumentByIdValidate11Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putUmbracoManagementApiV11DocumentByIdValidate11Raw(requestParameters, initOverrides);
    }

}
