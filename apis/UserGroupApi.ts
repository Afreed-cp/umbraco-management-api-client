/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserGroupRequestModel,
  DeleteUserGroupsRequestModel,
  GetItemUserGroup200ResponseInner,
  NotificationHeaderModel,
  PagedUserGroupResponseModel,
  PostUserGroupByIdUsersRequestInner,
  ProblemDetails,
  UpdateUserGroupRequestModel,
  UserGroupResponseModel,
} from '../models/index';
import {
    CreateUserGroupRequestModelFromJSON,
    CreateUserGroupRequestModelToJSON,
    DeleteUserGroupsRequestModelFromJSON,
    DeleteUserGroupsRequestModelToJSON,
    GetItemUserGroup200ResponseInnerFromJSON,
    GetItemUserGroup200ResponseInnerToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedUserGroupResponseModelFromJSON,
    PagedUserGroupResponseModelToJSON,
    PostUserGroupByIdUsersRequestInnerFromJSON,
    PostUserGroupByIdUsersRequestInnerToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateUserGroupRequestModelFromJSON,
    UpdateUserGroupRequestModelToJSON,
    UserGroupResponseModelFromJSON,
    UserGroupResponseModelToJSON,
} from '../models/index';

export interface DeleteUserGroupRequest {
    deleteUserGroupsRequestModel?: DeleteUserGroupsRequestModel;
}

export interface DeleteUserGroupByIdRequest {
    id: string;
}

export interface DeleteUserGroupByIdUsersRequest {
    id: string;
    postUserGroupByIdUsersRequestInner?: Array<PostUserGroupByIdUsersRequestInner>;
}

export interface GetFilterUserGroupRequest {
    skip?: number;
    take?: number;
    filter?: string;
}

export interface GetItemUserGroupRequest {
    id?: Set<string>;
}

export interface GetUserGroupRequest {
    skip?: number;
    take?: number;
}

export interface GetUserGroupByIdRequest {
    id: string;
}

export interface PostUserGroupRequest {
    createUserGroupRequestModel?: CreateUserGroupRequestModel;
}

export interface PostUserGroupByIdUsersRequest {
    id: string;
    postUserGroupByIdUsersRequestInner?: Array<PostUserGroupByIdUsersRequestInner>;
}

export interface PutUserGroupByIdRequest {
    id: string;
    updateUserGroupRequestModel?: UpdateUserGroupRequestModel;
}

/**
 * 
 */
export class UserGroupApi extends runtime.BaseAPI {

    /**
     */
    async deleteUserGroupRaw(requestParameters: DeleteUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUserGroupsRequestModelToJSON(requestParameters['deleteUserGroupsRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserGroup(requestParameters: DeleteUserGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserGroupByIdRaw(requestParameters: DeleteUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserGroupById(requestParameters: DeleteUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserGroupByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserGroupByIdUsersRaw(requestParameters: DeleteUserGroupByIdUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserGroupByIdUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['postUserGroupByIdUsersRequestInner']!.map(PostUserGroupByIdUsersRequestInnerToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserGroupByIdUsers(requestParameters: DeleteUserGroupByIdUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserGroupByIdUsersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getFilterUserGroupRaw(requestParameters: GetFilterUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedUserGroupResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/filter/user-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedUserGroupResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getFilterUserGroup(requestParameters: GetFilterUserGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedUserGroupResponseModel> {
        const response = await this.getFilterUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemUserGroupRaw(requestParameters: GetItemUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemUserGroup200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/user-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemUserGroup200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemUserGroup(requestParameters: GetItemUserGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemUserGroup200ResponseInner>> {
        const response = await this.getItemUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserGroupRaw(requestParameters: GetUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedUserGroupResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedUserGroupResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserGroup(requestParameters: GetUserGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedUserGroupResponseModel> {
        const response = await this.getUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserGroupByIdRaw(requestParameters: GetUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGroupResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGroupResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getUserGroupById(requestParameters: GetUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGroupResponseModel> {
        const response = await this.getUserGroupByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postUserGroupRaw(requestParameters: PostUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserGroupRequestModelToJSON(requestParameters['createUserGroupRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserGroup(requestParameters: PostUserGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserGroupByIdUsersRaw(requestParameters: PostUserGroupByIdUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUserGroupByIdUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['postUserGroupByIdUsersRequestInner']!.map(PostUserGroupByIdUsersRequestInnerToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postUserGroupByIdUsers(requestParameters: PostUserGroupByIdUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserGroupByIdUsersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putUserGroupByIdRaw(requestParameters: PutUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putUserGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/user-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserGroupRequestModelToJSON(requestParameters['updateUserGroupRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putUserGroupById(requestParameters: PutUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putUserGroupByIdRaw(requestParameters, initOverrides);
    }

}
