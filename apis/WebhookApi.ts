/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWebhookRequestModel,
  GetItemWebhook200ResponseInner,
  NotificationHeaderModel,
  PagedWebhookEventModel,
  PagedWebhookLogResponseModel,
  PagedWebhookResponseModel,
  ProblemDetails,
  UpdateWebhookRequestModel,
  WebhookResponseModel,
} from '../models/index';
import {
    CreateWebhookRequestModelFromJSON,
    CreateWebhookRequestModelToJSON,
    GetItemWebhook200ResponseInnerFromJSON,
    GetItemWebhook200ResponseInnerToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedWebhookEventModelFromJSON,
    PagedWebhookEventModelToJSON,
    PagedWebhookLogResponseModelFromJSON,
    PagedWebhookLogResponseModelToJSON,
    PagedWebhookResponseModelFromJSON,
    PagedWebhookResponseModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateWebhookRequestModelFromJSON,
    UpdateWebhookRequestModelToJSON,
    WebhookResponseModelFromJSON,
    WebhookResponseModelToJSON,
} from '../models/index';

export interface DeleteWebhookByIdRequest {
    id: string;
}

export interface GetItemWebhookRequest {
    id?: Set<string>;
}

export interface GetWebhookRequest {
    skip?: number;
    take?: number;
}

export interface GetWebhookByIdRequest {
    id: string;
}

export interface GetWebhookByIdLogsRequest {
    id: string;
    skip?: number;
    take?: number;
}

export interface GetWebhookEventsRequest {
    skip?: number;
    take?: number;
}

export interface GetWebhookLogsRequest {
    skip?: number;
    take?: number;
}

export interface PostWebhookRequest {
    createWebhookRequestModel?: CreateWebhookRequestModel;
}

export interface PutWebhookByIdRequest {
    id: string;
    updateWebhookRequestModel?: UpdateWebhookRequestModel;
}

/**
 * 
 */
export class WebhookApi extends runtime.BaseAPI {

    /**
     */
    async deleteWebhookByIdRaw(requestParameters: DeleteWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWebhookById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWebhookById(requestParameters: DeleteWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemWebhookRaw(requestParameters: GetItemWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemWebhook200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/webhook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemWebhook200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemWebhook(requestParameters: GetItemWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemWebhook200ResponseInner>> {
        const response = await this.getItemWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedWebhookResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedWebhookResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getWebhook(requestParameters: GetWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedWebhookResponseModel> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookByIdRaw(requestParameters: GetWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhookById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getWebhookById(requestParameters: GetWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponseModel> {
        const response = await this.getWebhookByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookByIdLogsRaw(requestParameters: GetWebhookByIdLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedWebhookLogResponseModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhookByIdLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook/{id}/logs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedWebhookLogResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getWebhookByIdLogs(requestParameters: GetWebhookByIdLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedWebhookLogResponseModel> {
        const response = await this.getWebhookByIdLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookEventsRaw(requestParameters: GetWebhookEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedWebhookEventModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedWebhookEventModelFromJSON(jsonValue));
    }

    /**
     */
    async getWebhookEvents(requestParameters: GetWebhookEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedWebhookEventModel> {
        const response = await this.getWebhookEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWebhookLogsRaw(requestParameters: GetWebhookLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedWebhookLogResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedWebhookLogResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getWebhookLogs(requestParameters: GetWebhookLogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedWebhookLogResponseModel> {
        const response = await this.getWebhookLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postWebhookRaw(requestParameters: PostWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebhookRequestModelToJSON(requestParameters['createWebhookRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postWebhook(requestParameters: PostWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postWebhookRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putWebhookByIdRaw(requestParameters: PutWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putWebhookById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/webhook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebhookRequestModelToJSON(requestParameters['updateWebhookRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putWebhookById(requestParameters: PutWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putWebhookByIdRaw(requestParameters, initOverrides);
    }

}
