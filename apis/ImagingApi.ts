/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetImagingResizeUrls200ResponseInner,
  ImageCropModeModel,
} from '../models/index';
import {
    GetImagingResizeUrls200ResponseInnerFromJSON,
    GetImagingResizeUrls200ResponseInnerToJSON,
    ImageCropModeModelFromJSON,
    ImageCropModeModelToJSON,
} from '../models/index';

export interface GetImagingResizeUrlsRequest {
    id?: Set<string>;
    height?: number;
    width?: number;
    mode?: ImageCropModeModel;
}

/**
 * 
 */
export class ImagingApi extends runtime.BaseAPI {

    /**
     */
    async getImagingResizeUrlsRaw(requestParameters: GetImagingResizeUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetImagingResizeUrls200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['mode'] != null) {
            queryParameters['mode'] = requestParameters['mode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/imaging/resize/urls`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetImagingResizeUrls200ResponseInnerFromJSON));
    }

    /**
     */
    async getImagingResizeUrls(requestParameters: GetImagingResizeUrlsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetImagingResizeUrls200ResponseInner>> {
        const response = await this.getImagingResizeUrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
