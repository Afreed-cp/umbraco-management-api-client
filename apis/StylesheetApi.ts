/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateStylesheetFolderRequestModel,
  CreateStylesheetRequestModel,
  GetItemStylesheet200ResponseInner,
  GetTreePartialViewAncestors200ResponseInner,
  NotificationHeaderModel,
  PagedFileSystemTreeItemPresentationModel,
  ProblemDetails,
  RenameStylesheetRequestModel,
  StylesheetFolderResponseModel,
  StylesheetResponseModel,
  UpdateStylesheetRequestModel,
} from '../models/index';
import {
    CreateStylesheetFolderRequestModelFromJSON,
    CreateStylesheetFolderRequestModelToJSON,
    CreateStylesheetRequestModelFromJSON,
    CreateStylesheetRequestModelToJSON,
    GetItemStylesheet200ResponseInnerFromJSON,
    GetItemStylesheet200ResponseInnerToJSON,
    GetTreePartialViewAncestors200ResponseInnerFromJSON,
    GetTreePartialViewAncestors200ResponseInnerToJSON,
    NotificationHeaderModelFromJSON,
    NotificationHeaderModelToJSON,
    PagedFileSystemTreeItemPresentationModelFromJSON,
    PagedFileSystemTreeItemPresentationModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RenameStylesheetRequestModelFromJSON,
    RenameStylesheetRequestModelToJSON,
    StylesheetFolderResponseModelFromJSON,
    StylesheetFolderResponseModelToJSON,
    StylesheetResponseModelFromJSON,
    StylesheetResponseModelToJSON,
    UpdateStylesheetRequestModelFromJSON,
    UpdateStylesheetRequestModelToJSON,
} from '../models/index';

export interface DeleteStylesheetByPathRequest {
    path: string;
}

export interface DeleteStylesheetFolderByPathRequest {
    path: string;
}

export interface GetItemStylesheetRequest {
    path?: Set<string>;
}

export interface GetStylesheetByPathRequest {
    path: string;
}

export interface GetStylesheetFolderByPathRequest {
    path: string;
}

export interface GetTreeStylesheetAncestorsRequest {
    descendantPath?: string;
}

export interface GetTreeStylesheetChildrenRequest {
    parentPath?: string;
    skip?: number;
    take?: number;
}

export interface GetTreeStylesheetRootRequest {
    skip?: number;
    take?: number;
}

export interface PostStylesheetRequest {
    createStylesheetRequestModel?: CreateStylesheetRequestModel;
}

export interface PostStylesheetFolderRequest {
    createStylesheetFolderRequestModel?: CreateStylesheetFolderRequestModel;
}

export interface PutStylesheetByPathRequest {
    path: string;
    updateStylesheetRequestModel?: UpdateStylesheetRequestModel;
}

export interface PutStylesheetByPathRenameRequest {
    path: string;
    renameStylesheetRequestModel?: RenameStylesheetRequestModel;
}

/**
 * 
 */
export class StylesheetApi extends runtime.BaseAPI {

    /**
     */
    async deleteStylesheetByPathRaw(requestParameters: DeleteStylesheetByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling deleteStylesheetByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteStylesheetByPath(requestParameters: DeleteStylesheetByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStylesheetByPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteStylesheetFolderByPathRaw(requestParameters: DeleteStylesheetFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling deleteStylesheetFolderByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/folder/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteStylesheetFolderByPath(requestParameters: DeleteStylesheetFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStylesheetFolderByPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getItemStylesheetRaw(requestParameters: GetItemStylesheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetItemStylesheet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/item/stylesheet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetItemStylesheet200ResponseInnerFromJSON));
    }

    /**
     */
    async getItemStylesheet(requestParameters: GetItemStylesheetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetItemStylesheet200ResponseInner>> {
        const response = await this.getItemStylesheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStylesheetByPathRaw(requestParameters: GetStylesheetByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StylesheetResponseModel>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling getStylesheetByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StylesheetResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getStylesheetByPath(requestParameters: GetStylesheetByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StylesheetResponseModel> {
        const response = await this.getStylesheetByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStylesheetFolderByPathRaw(requestParameters: GetStylesheetFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StylesheetFolderResponseModel>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling getStylesheetFolderByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/folder/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StylesheetFolderResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async getStylesheetFolderByPath(requestParameters: GetStylesheetFolderByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StylesheetFolderResponseModel> {
        const response = await this.getStylesheetFolderByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeStylesheetAncestorsRaw(requestParameters: GetTreeStylesheetAncestorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTreePartialViewAncestors200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['descendantPath'] != null) {
            queryParameters['descendantPath'] = requestParameters['descendantPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/stylesheet/ancestors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTreePartialViewAncestors200ResponseInnerFromJSON));
    }

    /**
     */
    async getTreeStylesheetAncestors(requestParameters: GetTreeStylesheetAncestorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTreePartialViewAncestors200ResponseInner>> {
        const response = await this.getTreeStylesheetAncestorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeStylesheetChildrenRaw(requestParameters: GetTreeStylesheetChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedFileSystemTreeItemPresentationModel>> {
        const queryParameters: any = {};

        if (requestParameters['parentPath'] != null) {
            queryParameters['parentPath'] = requestParameters['parentPath'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/stylesheet/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedFileSystemTreeItemPresentationModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeStylesheetChildren(requestParameters: GetTreeStylesheetChildrenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedFileSystemTreeItemPresentationModel> {
        const response = await this.getTreeStylesheetChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTreeStylesheetRootRaw(requestParameters: GetTreeStylesheetRootRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedFileSystemTreeItemPresentationModel>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/tree/stylesheet/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedFileSystemTreeItemPresentationModelFromJSON(jsonValue));
    }

    /**
     */
    async getTreeStylesheetRoot(requestParameters: GetTreeStylesheetRootRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedFileSystemTreeItemPresentationModel> {
        const response = await this.getTreeStylesheetRootRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postStylesheetRaw(requestParameters: PostStylesheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStylesheetRequestModelToJSON(requestParameters['createStylesheetRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postStylesheet(requestParameters: PostStylesheetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postStylesheetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postStylesheetFolderRaw(requestParameters: PostStylesheetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/folder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStylesheetFolderRequestModelToJSON(requestParameters['createStylesheetFolderRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postStylesheetFolder(requestParameters: PostStylesheetFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postStylesheetFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putStylesheetByPathRaw(requestParameters: PutStylesheetByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling putStylesheetByPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStylesheetRequestModelToJSON(requestParameters['updateStylesheetRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putStylesheetByPath(requestParameters: PutStylesheetByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putStylesheetByPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putStylesheetByPathRenameRaw(requestParameters: PutStylesheetByPathRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling putStylesheetByPathRename().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("Backoffice User", []);
        }

        const response = await this.request({
            path: `/umbraco/management/api/v1/stylesheet/{path}/rename`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameStylesheetRequestModelToJSON(requestParameters['renameStylesheetRequestModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putStylesheetByPathRename(requestParameters: PutStylesheetByPathRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putStylesheetByPathRenameRaw(requestParameters, initOverrides);
    }

}
